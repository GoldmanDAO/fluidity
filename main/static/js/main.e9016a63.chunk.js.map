{"version":3,"sources":["../../index.ts","../../../src/EthersLiquityConnection.ts","../../../src/Decimal.ts","../../../src/_utils.ts","../../../src/constants.ts","../../../../src/hooks/useLiquityStore.ts","../../../src/WebSocketAugmentedProvider.ts","../../../src/WebSocketProvider.ts","../../../src/contracts.ts","../../../src/ReadableEthersLiquity.ts","../../../src/BlockPolledLiquityStore.ts","../../../src/PopulatableEthersLiquity.ts","../../../src/SendableEthersLiquity.ts","../../../../src/components/LiquityStoreProvider.tsx","../../../../src/utils/equals.ts","../../../src/BatchedProvider.ts","../../../src/Trove.ts","../../../src/StabilityDeposit.ts","../../../src/LQTYStake.ts","../../../src/Fees.ts","../../../src/TransactableLiquity.ts","../../../src/SendableLiquity.ts","../../../src/LiquityStore.ts","../../../src/_CachedReadableLiquity.ts","../../../src/_Multicall.ts","../../../src/ObservableEthersLiquity.ts","../../../src/parseLogs.ts","../../../src/EthersLiquity.ts","../../../../src/hooks/useLiquityReducer.ts","../../../../src/hooks/useLiquitySelector.ts","connectors/Network.js","connectors/index.js","hooks/index.js","components/Web3ReactManager/index.js","config/index.ts","hooks/LiquityContext.tsx","components/Icon.tsx","components/Tooltip.tsx","components/Transaction.tsx","theme.ts","components/LiquityLogo.tsx","components/Link.tsx","components/Nav.tsx","components/SideNav.tsx","components/UserDashboard/AccountInfo.tsx","utils/shortenAddress.ts","components/InfoIcon.tsx","components/PriceManager.tsx","strings.ts","components/BigStatistic.tsx","components/TopSystemStats.tsx","components/UserDashboard/UserAccount.tsx","components/Header.tsx","components/ActionDescription.tsx","components/Trove/Editor.tsx","components/LoadingOverlay.tsx","components/Trove/CollateralRatio.tsx","components/Trove/TroveEditor.tsx","components/Trove/TroveAction.tsx","components/Trove/context/TroveViewContext.tsx","components/ErrorDescription.tsx","components/Trove/validation/validateTroveChange.tsx","components/Trove/TroveManager.tsx","components/Trove/ReadOnlyTrove.tsx","components/InfoMessage.tsx","components/Trove/NoTrove.tsx","hooks/useStableTroveChange.ts","components/Warning.tsx","components/Trove/ExpensiveTroveChangeWarning.tsx","components/Trove/Opening.tsx","components/Trove/Adjusting.tsx","components/CollateralSurplusAction.tsx","components/Trove/RedeemedTrove.tsx","components/Trove/LiquidatedTrove.tsx","components/Trove/Trove.tsx","components/Statistic.tsx","components/SystemStats.tsx","components/Redemption/DisabledRedemption.tsx","components/Redemption/RedemptionAction.tsx","components/Redemption/RedemptionManager.tsx","components/Redemption/Redemption.tsx","pages/Dashboard.tsx","pages/UnregisteredFrontend.tsx","pages/FrontendRegistration.tsx","pages/FrontendRegistrationSuccess.tsx","pages/PageSwitcher.tsx","components/Farm/context/FarmViewContext.tsx","components/Farm/views/RemainingLQTY.tsx","components/Farm/context/fetchPrices.ts","components/Farm/views/Yield.tsx","components/Farm/views/Inactive/Inactive.tsx","components/Farm/context/useValidationState.ts","components/Farm/views/Confirm.tsx","components/Farm/views/Description.tsx","components/Farm/views/Approve.tsx","components/Farm/views/Validation.tsx","components/Farm/views/Staking/Staking.tsx","components/Farm/views/Adjusting/Adjusting.tsx","components/Farm/views/Active/ClaimReward.tsx","components/Farm/views/UnstakeAndClaim.tsx","components/Farm/views/Active/Active.tsx","components/Farm/views/Disabled/Disabled.tsx","components/Farm/Farm.tsx","components/Staking/context/StakingViewContext.tsx","components/Staking/StakingGainsAction.tsx","components/Staking/ReadOnlyStake.tsx","components/Staking/StakingEditor.tsx","components/Staking/StakingManagerAction.tsx","components/Staking/StakingManager.tsx","components/Staking/NoStake.tsx","components/Staking/Staking.tsx","components/Stability/StabilityDepositEditor.tsx","components/Stability/StabilityDepositAction.tsx","components/Stability/context/StabilityViewContext.tsx","components/Stability/StabilityActionDescription.tsx","components/Stability/validation/validateStabilityDepositChange.tsx","components/Stability/StabilityDepositManager.tsx","components/Stability/actions/ClaimAndMove.tsx","components/Stability/actions/ClaimRewards.tsx","components/Stability/RemainingLQTY.tsx","components/Stability/context/fetchLqtyPrice.ts","components/Stability/Yield.tsx","components/Stability/ActiveDeposit.tsx","components/Stability/NoDeposit.tsx","components/Stability/Stability.tsx","pages/Farm.tsx","components/LiquidationManager.tsx","components/Abbreviation.tsx","components/RiskyTroves.tsx","pages/LiquidatePage.tsx","components/Trove/context/TroveViewProvider.tsx","components/Stability/context/StabilityViewProvider.tsx","components/Staking/context/StakingViewProvider.tsx","components/Farm/context/transitions.ts","components/Farm/context/FarmViewProvider.tsx","LiquityFrontend.tsx","App.tsx","index.tsx"],"names":["__exportStar","exports","WebSocketProvider","address","overrides","a","readable","NetworkConnector","this","active","providers","currentChainId","stop","start","NetworkConnectorCore","injected","InjectedConnector","supportedChainIds","network","urls","444900","pollingInterval","useWeb3React","context","useWeb3ReactCore","contextNetwork","Web3ReactManager","children","networkActive","networkError","error","activateNetwork","activate","triedEager","useState","tried","setTried","useEffect","isAuthorized","then","undefined","catch","useEagerConnect","suppress","ethereum","window","on","handleNetworkChanged","handleAccountsChanged","accounts","length","removeListener","useInactiveListener","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","defaultConfig","frontendTag","AddressZero","hasKey","o","k","parseConfig","json","config","isAddress","getAddress","console","log","infuraApiKey","testnetOnly","configPromise","fetchConfig","fetch","response","ok","Error","status","getConfig","LiquityContext","createContext","projectNetworks","bakerloo","chainId","name","infuraSupportedNetworks","webSocketSupportedNetworks","LiquityProvider","loader","unsupportedNetworkFallback","unsupportedMainnetFallback","provider","library","account","setConfig","connection","useMemo","tempAccount","_connectByChainId","getSigner","userAddress","useStore","isBatchedProvider","isWebSocketAugmentedProvider","standard","Object","values","find","net","ensAddress","_defaultProvider","getEthersNetwork","getNetwork","includes","openWebSocket","wsParams","_isDev","location","hostname","closeWebSocket","liquity","EthersLiquity","_from","store","logging","Provider","value","useLiquity","liquityContext","useContext","add","faCircleNotch","faCheck","faCheckCircle","faExclamationTriangle","faInfoCircle","faTimes","faTrash","faChartLine","faRedo","faHistory","faChevronLeft","faChevronRight","faClipboard","faClipboardCheck","faUserCircle","faWallet","faExternalLinkAlt","faCog","faPlug","faExclamationCircle","faAngleUp","faAngleDoubleUp","faAngleDown","faAngleDoubleDown","faPen","faHandPaper","faHeartbeat","faBars","faQuestionCircle","getIcon","Icon","style","rest","icon","Tooltip","message","placement","event","useRef","show","setShow","referenceElement","setReferenceElement","popperElement","setPopperElement","usePopper","styles","attributes","React","cloneElement","Children","only","onMouseOver","current","onMouseOut","ref","variant","popper","circularProgressbarStyle","strokeLinecap","pathColor","trailColor","slowProgress","strokeWidth","buildStyles","pathTransitionDuration","fastProgress","TransactionContext","TransactionProvider","transactionState","type","useTransactionState","useMyTransactionState","myId","id","match","useTransactionFunction","send","setTransactionState","useCallback","tx","Transaction","tooltip","tooltipPlacement","showFailure","requires","sendTransaction","trigger","failureReasons","filter","map","push","clonedTrigger","disabled","onClick","tryToGetRevertReason","call","blockNumber","result","hexDataLength","hexDataSlice","defaultAbiCoder","decode","Donut","memo","CircularProgressbarWithChildren","TransactionProgressDonut","state","setValue","maxValue","color","size","spin","TransactionMonitor","cancelled","finished","txHash","rawSentTransaction","hash","waitForConfirmation","waitForReceipt","receipt","confirmations","rawReceipt","reason","EthersTransactionCancelledError","sx","alignItems","bg","p","pl","position","width","bottom","overflow","mr","height","fontSize","baseColors","colors","primary","secondary","accent","success","warning","danger","dangerHover","info","invalid","text","background","muted","badge","border","borderRadius","px","fontWeight","buttonBase","display","justifyContent","cursor","button","py","opacity","buttonOutline","hoverColor","borderColor","iconButton","padding","cardHeadingFontSize","cardGapX","card","mt","mb","boxShadow","infoCard","backgroundColor","h2","formBase","flexShrink","formCell","modalOverlay","left","top","theme","breakpoints","space","fonts","body","heading","monospace","fontSizes","fontWeights","light","medium","bold","lineHeights","borders","shadows","fontFamily","badges","outline","buttons","outlineAccent","cancel","token","dangerIcon","titleIcon","transition","cards","pr","infoPopup","right","overflowY","zIndex","tooltipInfo","userAccountModal","forms","label","unit","textAlign","input","flex","editor","layout","header","footer","minHeight","main","maxWidth","mx","columns","flexWrap","justifyItems","single","actions","ml","disabledOverlay","userOverlay","blurFilter","backdropFilter","pointerEvents","modal","infoOverlay","infoMessage","m","minWidth","sidenav","flexDirection","root","lineHeight","textDecoration","links","nav","textTransform","letterSpacing","LiquityLogo","boxProps","src","ExactLink","props","exact","Link","as","Nav","to","SideNav","isVisible","setIsVisible","overlay","NavButton","NavModal","e","target","addToken","request","method","params","options","symbol","decimals","ProtocolTokens","addresses","tokens","gap","balanceSelector","accountBalance","lusdBalance","lqtyBalance","TokenBalances","useLiquitySelector","balance","i","my","prettify","AddressBadge","textOverflow","whiteSpace","positionsSelector","stabilityDeposit","lqtyStake","AccountPositions","currentLUSD","stakedLQTY","AccountInfo","shortenAddress","substr","InfoIcon","interactive","content","selectPrice","price","PriceManager","canSetPrice","_priceFeedIsTestnet","toString","editedPrice","setEditedPrice","borderStyle","step","onChange","setPrice","Decimal","from","COIN","GT","LP","BigStatistic","delay","animation","arrow","select","numberOfTroves","total","lusdInStabilityPool","borrowingRate","redemptionRate","totalStakedLQTY","ProtocolStats","filterStats","lusdInStabilityPoolPct","debt","nonZero","Percent","div","totalCollateralRatioPct","collateralRatio","borrowingFeePct","redemptionFeePct","statFilter","stat","collateral","shorten","collateralRatioIsBelowCritical","statSelector","TopSystemStats","flexFlow","flexGrow","UserModal","AccountButton","setSystemStatsOpen","userModalOpen","UserAccount","userModalOverlayRef","tryActivation","connector","UnsupportedChainIdError","Header","flexBasis","ActionDescription","Amount","Row","labelId","labelFor","infoIcon","htmlFor","pt","PendingAmount","startsWith","StaticAmounts","inputId","labelledBy","amount","pendingAmount","pendingColor","aria-labelledby","staticStyle","pb","editableStyle","StaticRow","DisabledEditableRow","EditableRow","editingState","editedAmount","setEditedAmount","maxAmount","maxedOut","editing","setEditing","setInvalid","autoFocus","defaultValue","onBlur","stopPropagation","LoadingOverlay","CollateralRatio","change","collateralRatioPct","changePct","gt","CRITICAL_COLLATERAL_RATIO","lte","positive","absoluteValue","negative","nonZeroish","lt","TroveEditor","original","edited","fee","changePending","feePct","originalCollateralRatio","isEmpty","collateralRatioChange","Difference","between","LUSD_LIQUIDATION_RESERVE","TroveAction","transactionId","maxBorrowingRate","borrowingFeeDecayToleranceMinutes","openTrove","bind","closeTrove","adjustTrove","TroveViewContext","useTroveView","ErrorDescription","mcrPercent","MINIMUM_COLLATERAL_RATIO","ccrPercent","TroveChangeDescription","depositCollateral","borrowLUSD","repayLUSD","withdrawCollateral","selectForTroveChangeValidation","validateTroveChange","originalTrove","adjustedTrove","selectedState","whatChanged","resultingTrove","apply","recoveryMode","wouldTriggerRecoveryMode","subtract","LUSD_MINIMUM_DEBT","errorDescription","validateTroveCreation","validateTroveClosure","validateTroveAdjustment","LUSD_MINIMUM_NET_DEBT","isOpenableInRecoveryMode","collateralRatioIsBelowMinimum","sub","init","trove","Trove","debtDirty","addedMinimumDebt","reduceWith","action","reduce","addMinimumDebt","removeMinimumDebt","finishChange","revert","newCollateral","newValue","newState","setCollateral","isZero","setDebt","changeCommitted","stateChange","troveBeforeRedistribution","feeFrom","mul","ZERO","fees","validationContext","transactionIdPrefix","transactionIdMatcher","RegExp","TroveManager","useLiquityReducer","dispatch","validChange","description","dispatchEvent","handleCancel","openingNewTrove","myTransactionState","ReadOnlyTrove","handleAdjustTrove","handleCloseTrove","InfoMessage","title","NoTrove","handleOpenTrove","paramsEq","b","eq","useStableTroveChange","troveChange","stableTroveChange","setStableTroveChange","Warning","ExpensiveTroveChangeWarning","gasEstimationState","setGasEstimationState","timeoutId","populate","populatedTx","rawPopulatedTransaction","gasLimit","gasHeadroom","selector","EMPTY_TROVE","TRANSACTION_ID","GAS_ROOM_ETH","Opening","borrowAmount","setBorrowAmount","totalDebt","isDirty","maxCollateral","collateralMaxedOut","isTransactionPending","handleCancelPressed","reset","Adjusting","previousTrove","netDebt","setNetDebt","nextCollateral","unsavedChanges","applyUnsavedCollateralChanges","nextNetDebt","applyUnsavedNetDebtChanges","isDebtIncrease","debtIncreaseAmount","updatedTrove","availableEth","collateralSurplusBalance","CollateralSurplusAction","myTransactionId","claimCollateralSurplus","hasSurplusCollateral","RedeemedTrove","LiquidatedTrove","view","Statistic","selectBalances","Balances","PriceFeed","showStat","statSection","SystemStats","showBalances","showProtocol","showPriceFeed","showStats","DisabledRedemption","disabledDays","unlockDate","toLocaleString","RedemptionAction","lusdAmount","maxRedemptionRate","redeemLUSD","RedemptionManager","setLUSDAmount","setChangePending","dirty","ethAmount","ethFee","canRedeem","selectBlockTimestamp","blockTimestamp","Redemption","deploymentDate","bootstrapPeriod","bootstrapPeriodDays","Math","round","bootstrapEndTime","getTime","bootstrapEndDate","Date","Dashboard","UnregisteredFrontend","FrontendRegistrationAction","kickbackRate","registerFrontend","FrontendRegistration","setKickbackRate","cut","setCut","kickbackRateString","setKickbackRateString","newKickbackRate","newCut","ONE","FrontendRegistrationSuccess","onDismiss","selectFrontend","frontend","PageSwitcher","unregistered","registering","setRegistering","FarmViewContext","useFarmView","remainingLiquidityMiningLQTYReward","RemainingLQTY","uniswapQuery","lqtyTokenAddress","uniTokenAddress","toLowerCase","fetchPrices","headers","JSON","stringify","query","variables","Promise","reject","data","errors","derivedETH","pair","reserveUSD","totalSupply","bundle","ethPrice","ethPriceUSD","lqtyPriceUSD","uniLpPriceUSD","totalStakedUniTokens","Yield","liquidityMiningLQTYRewardRate","lqtyPrice","setLqtyPrice","uniLpPrice","setUniLpPrice","hasZeroValue","daysRemaining","remainingLqtyInUSD","totalStakedUniLpInUSD","yieldPercentage","Inactive","lusdAddress","handleStakePressed","href","uniTokenBalance","uniTokenAllowance","liquidityMiningStake","useValidationState","isWithdrawing","amountChanged","maximumStake","hasSetMaximumStake","isValid","hasApproved","hasEnoughUniToken","gte","Confirm","transactionAction","unstakeUniTokens","stakeUniTokens","shouldDisable","Description","Approve","approveUniTokens","Validation","Staking","setAmount","nextTotalStakedUniTokens","poolShare","mulDiv","infinite","liquidityMiningLQTYReward","maximumAmount","hasSetMaximumAmount","originalPoolShare","poolShareChange","concat","ClaimReward","withdrawLQTYRewardFromLiquidityMining","UnstakeAndClaim","exitLiquidityMining","Active","handleAdjustPressed","hasStakeAndRewards","Disabled","hasStake","Farm","StakingViewContext","useStakingView","selectLQTYStake","StakingGainsAction","collateralGain","lusdGain","withdrawGainsFromStaking","ReadOnlyStake","StakingEditor","originalStake","editedLQTY","totalStakedLQTYAfterChange","newPoolShare","StakingManagerAction","stakeLQTY","unstakeLQTY","updatedStake","selectLQTYBalance","StakingManagerActionDescription","StakingManager","dispatchStakingViewAction","makingNewStake","NoStake","StabilityDepositEditor","originalDeposit","editedLUSD","lusdInStabilityPoolAfterChange","lqtyReward","selectFrontendRegistered","StabilityDepositAction","depositLUSD","depositLUSDInStabilityPool","withdrawLUSDFromStabilityPool","withdrawLUSD","StabilityViewContext","useStabilityView","StabilityActionDescription","selectForStabilityDepositChangeValidation","ownFrontend","haveUndercollateralizedTroves","haveOwnFrontend","updatedDeposit","initialLUSD","StabilityDepositManager","validateStabilityDepositChange","makingNewDeposit","ClaimAndMove","transferCollateralGainToTrove","ClaimRewards","withdrawGainsFromStabilityPool","remainingStabilityPoolLQTYReward","hasProp","validateCoinGeckoSimplePriceResponse","expectedCoinIds","expectedCurrencies","coinId","coinPrices","currency","fetchCoinGeckoSimplePrice","coinIds","vsCurrencies","simplePriceUrl","URLSearchParams","ids","join","vs_currencies","accept","fetchLqtyPrice","usd","dailyIssuanceFraction","dailyIssuancePercentage","aprPercentage","ActiveDeposit","handleAdjustDeposit","hasReward","hasGain","hasTrove","isWaitingForTransaction","NoDeposit","Stability","statsToShow","LiquidationManager","numberOfTrovesToLiquidate","setNumberOfTrovesToLiquidate","liquidateUpTo","parseInt","min","Abbreviation","short","rowHeight","liquidatableInNormalMode","liquidatableInRecoveryMode","totalCollateralRatio","blockTag","RiskyTroves","pageSize","loading","setLoading","troves","setTroves","reload","setReload","forceReload","page","setPage","numberOfPages","ceil","clampedPage","mounted","getTroves","first","sortedBy","startingAt","copied","setCopied","ownerAddress","onCopy","liquidate","LiquidatePage","transitions","NONE","OPEN_TROVE_PRESSED","TROVE_OPENED","LIQUIDATED","TROVE_SURPLUS_COLLATERAL_CLAIMED","REDEEMED","OPENING","CANCEL_ADJUST_TROVE_PRESSED","ADJUSTING","TROVE_ADJUSTED","TROVE_CLOSED","TROVE_LIQUIDATED","TROVE_REDEEMED","CLOSING","ACTIVE","ADJUST_TROVE_PRESSED","CLOSE_TROVE_PRESSED","troveStatusEvents","open","closedByOwner","closedByLiquidation","closedByRedemption","TroveViewProvider","troveStatus","getInitialView","setView","viewRef","nextView","DEPOSIT_PRESSED","DEPOSITING","CANCEL_PRESSED","DEPOSIT_CONFIRMED","REWARDS_CLAIMED","ADJUST_DEPOSIT_PRESSED","DEPOSIT_EMPTIED","StabilityViewProvider","adjusting","oldStake","oldState","StakingViewProvider","stakingTransactionState","INACTIVE","STAKE_PRESSED","STAKING","STAKE_CONFIRMED","STAKE_APPROVED","ADJUST_PRESSED","CLAIM_REWARD_CONFIRMED","UNSTAKE_AND_CLAIM_CONFIRMED","UNSTAKE_CONFIRMED","DISABLED","FarmViewProvider","LiquityFrontend","assign","Wallet","path","Web3ProviderNetwork","createWeb3ReactRoot","getLibrary","ethers","Web3Provider","UnsupportedMainnetFallback","App","css","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sgBAAA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACAA,EAAa,EAAb,S,2ZAZA,YAEA,YACA,YACA,a,ohBCHA,IAAI,EAAJ,MAEA,OAEA,YACA,YACA,YACA,YACA,YACA,YACA,YAGA,QAGA,SAOA,SAEM,EAAM,UAEN,EAAW,UAGd,UAAQ,QAAU,WAHJ,IAId,UAAQ,QAAU,WAJJ,IAKd,UAAQ,QAAU,WALJ,IAMd,UAAO,QAAU,WANH,IAOd,UAAM,QAAU,WAPF,IAQd,UAAS,QAAU,WARL,GAUH,OAAR,OAAkB,EAAI,QAAU,GAAQ,IAiExC,EAAiB,SACrB,EACA,EACA,EACA,EAJqB,EAWrB,GACoC,IANlC,EAMkC,EANlC,eACA,EAKkC,EALlC,6BACA,EAIkC,EAJlC,8BACG,EAG+B,uFAClC,GACA,QAC4B,IAA5B,EAAe,WACd,EAAkB,SAAS,EAAe,UAE3C,MAAM,IAAI,MAAJ,iCAAoC,EAAe,WAG3D,OAAc,KACZ,WACA,SACA,aACA,aACA,eAAgB,IAAI,KAAK,GACzB,6BAA8B,UAAQ,KAAK,GAC3C,8BAA+B,UAAQ,KAAK,IACzC,GACA,IAKM,gBAAgB,SAAC,GAAD,OAC1B,EAAgD,YAEnD,IAAM,EAAe,SAAC,GAAD,OAClB,EAAgD,YAE7C,EAAwB,qBAAG,WAGpB,qBAAqB,SAChC,GAEmB,QADnB,EACmB,uDADE,SACF,OAE4D,QAF5D,EAEK,QAFL,EAEnB,EAAa,UAAW,eAAE,yBAAyB,CAAE,aAAY,KAAK,oBAAS,QAC/E,eAAa,GAAY,SAAS,GAAU,KAAK,IAGtC,iBAAiB,SAAC,GAAqD,aACjE,QADiE,EAClF,EAAW,cAAM,QAAI,QAAM,IAAI,MAAM,wCAG1B,eAAe,SAAC,GAAD,OAC1B,EAAW,UAIA,kBAAkB,SAC7B,EACA,GACU,eAC+B,QAD/B,EACK,QADL,EACD,OAAT,QAAS,IAAT,OAAS,EAAT,EAAW,YAAI,QAAI,EAAW,mBAAW,QAAI,QAAM,IAAI,MAAM,gCAGlD,0BAA0B,SAAC,GAA+C,aAC/D,QAD+D,EACrF,EAAW,mBAAW,QAAI,QAAM,IAAI,MAAM,oCAG/B,cAAc,SACzB,GADyB,YAGD,IAAxB,EAAW,U,IAUA,E,8BAKX,WAAY,GAAe,wBACzB,uDAAwC,EAAxC,OACK,KAAO,0BACZ,EAAK,QAAU,EAHU,E,YALgB,QAA7C,4BAYA,IAAM,EAAuB,SAC3B,G,MAQA,MAAO,CAN0B,SAAO,SAAS,GACpB,QAA1B,EAAC,EAAiB,gBAAQ,QAAI,QAAM,IAAI,MAAM,gCAC7C,EAEW,SAAO,SAAS,GAAoB,OAAmB,IAM3D,uBAAuB,SAClC,EACA,EACA,GAHkC,OAKlC,EAAc,WAAd,IACK,EAAqB,IAD1B,QAEE,sBAAoB,EAAkB,QACtC,EACA,EACA,MAgBJ,IAAM,EAAoB,CAAC,eAiE3B,SAAgB,EACd,EACA,EACA,EACA,G,MAEM,EACgB,QADN,EACd,EAAY,UAAQ,QAAI,QAAM,IAAI,EAAwB,IAE5D,OAAO,EACL,EACA,EACA,sBAA0B,OAAN,QAAM,IAAN,IAAU,EAAU,GACxC,sBAA0B,OAAN,QAAM,IAAN,IAAU,EAAU,GACxC,EACA,GAfJ,sBAoBO,IAAM,EAAQ,2BAAG,WACtB,EACA,GAFsB,gFAIK,EAAqB,GAJ1B,SAIf,EAJe,OAIL,EAJK,+BAOgB,KAAlB,OAAd,QAAc,IAAd,OAAc,EAAd,EAAgB,aAPA,sBAQZ,IAAI,MAAM,6DARE,+BAYf,GAZe,iBAaC,EAAO,aAbR,yBAalB,YAbkB,MAWpB,GAXoB,4CAiBf,EAjBe,KAiBG,EAjBH,KAiBa,EAjBb,UAiB4B,EAAS,aAjBrC,2BAiBmD,QAjBnD,KAiB4D,EAjB5D,6FAAH,wDAAR,WAAQ,G,kOCrUrB,eAEA,QAEM,EAAY,SAAC,GAAD,OAAuB,EAAI,IAAI,IAG3C,EAAY,GACZ,EAAM,YAAU,KAAK,GACrB,EAAM,YAAU,KAAK,IACrB,EAAS,EAAU,GAEnB,EAA6B,qCAC7B,EAAgB,MAChB,EAAa,CAAC,GAAI,IAAK,IAAK,IAAK,KAEjC,EAAa,SAAC,EAAc,GAAf,OAAgC,EAAE,IAAI,GAAG,IAAI,EAAQ,KAAK,KAAK,IAAI,IAkBzE,E,WAkBT,SAAF,EAAoB,GACd,GADkC,UAClC,EAAU,aACN,UAAI,MAAM,sCAGd,KAAC,WAAa,E,2BAdpB,WACE,OAAO,KAAK,WAAW,gB,qBAIzB,WACE,OAAO,KAAK,WAAW,a,6CA8EjB,WACN,IAAM,EAAiB,KAAK,WAAW,IAAI,GACrC,EAAW,KAAK,WAAW,IAAI,GAErC,GAAI,EAAS,SACX,OAAO,EAAe,WAEtB,IACM,EADiB,EAAS,WAAW,SAAS,EAAW,KACxB,QAAQ,EAAe,IAC9D,OAAO,EAAe,WAAa,IAAM,I,sBAIrC,SAAS,GACf,IAAM,EAAY,EAAU,GAAgB,GAAW,IAAI,GAC3D,OAAO,KAAK,WAAW,IAAI,K,oCAGrB,SAAuB,GAC7B,GAAI,EAAY,EACd,MAAM,IAAI,MAAM,kCAGlB,IAAM,EAAQ,EAAY,EAAY,KAAK,SAAS,GAAa,KAAK,WAChE,EAAiB,EAAM,IAAI,GAC3B,EAAW,EAAM,IAAI,GAE3B,GAAkB,IAAd,EACF,OAAO,EAAe,WAEtB,IACM,EADiB,EAAS,WAAW,SAAS,EAAW,KACxB,OAAO,EAAG,GACjD,OAAO,EAAe,WAAa,IAAM,I,sBAI7C,SAAS,GACP,OAAI,KAAK,SACA,cACgB,IAAd,EACF,KAAK,uBAAuB,GAE5B,KAAK,oC,sBAIhB,WAAsB,IAAb,EAAa,uDAAD,EAAC,EACe,KAAK,SAAS,GAAW,MAAM,KAD9C,SACb,EADa,KACG,EADH,KAEd,EAAuB,EAAe,QAAQ,0BAA2B,OAE/E,YAAoB,IAAb,EAAyB,EAAuB,IAAM,EAAW,I,qBAG1E,WACE,IAAM,EAAuB,KAAK,SAAS,GAAG,OACxC,EAAY,KAAK,IAAI,KAAK,OAAO,EAAuB,GAAK,GAAI,EAAW,OAAS,GAErF,EAAY,KAAK,IAAI,GAAK,EAAY,GAAK,EAAsB,GAGvE,OAFmB,KAAK,IAAI,IAAI,EAAQ,EAAU,EAAY,EAAI,KAEhD,SAAS,GAAa,EAAW,K,iBAGrD,SAAI,GACI,OAAC,IAAI,EAAQ,KAAK,WAAW,IAAI,EAAQ,KAAK,GAAQ,e,iBAG9D,SAAI,GACF,OAAO,IAAI,EAAQ,KAAK,WAAW,IAAI,EAAQ,KAAK,GAAY,e,iBAGlE,SAAI,GACF,OAAO,IAAI,EAAQ,KAAK,WAAW,IAAI,EAAQ,KAAK,GAAY,YAAY,IAAI,M,iBAGlF,SAAI,GAGF,OAFM,EAAI,EAAQ,KAAK,IAEX,OACH,EAAQ,SAGV,IAAI,EAAQ,KAAK,WAAW,IAAI,GAAQ,IAAI,EAAQ,e,sBAI7D,SAAS,GAGP,OAFA,EAAU,EAAQ,KAAK,IAEX,OACH,EAAQ,SAGV,IAAI,EACT,KAAK,WAAW,IAAI,GAAQ,IAAI,EAAQ,WAAW,IAAI,IAAM,IAAI,EAAQ,e,oBAI7E,SAAO,EAAwB,GAI7B,OAHA,EAAa,EAAQ,KAAK,IAC1B,EAAU,EAAQ,KAAK,IAEX,OACH,EAAQ,SAGV,IAAI,EAAQ,KAAK,WAAW,IAAI,EAAW,YAAY,IAAI,EAAQ,e,iBAG5E,SAAI,GAIF,GAHA,UAAO,OAAO,UAAU,IACxB,UAAO,GAAK,GAAY,GAAY,YAEnB,IAAb,EACF,OAAO,EAAQ,IAGjB,GAAiB,IAAb,EACF,OAAO,KAMT,IAHA,IAAI,EAAI,KAAK,WACT,EAAI,EAED,EAAW,EAAG,KAAc,EAClB,EAAX,IACF,EAAI,EAAW,EAAG,IAGpB,EAAI,EAAW,EAAG,GAGpB,OAAO,IAAI,EAAQ,EAAW,EAAG,M,kBAGnC,WACQ,OAAC,KAAK,WAAW,W,gBAGzB,WACE,GAAI,KAAK,OACP,OAAO,O,mBAIX,WACE,IAAK,KAAK,OACR,OAAO,O,oBAIX,WACE,GAAI,KAAK,GAAG,EAAQ,UAClB,OAAO,O,kBAIX,WACE,IAAK,KAAK,GAAG,EAAQ,UACnB,OAAO,O,yBAKX,WACE,OAAO,O,gBAGT,SAAG,GACD,OAAO,KAAK,WAAW,GAAG,EAAQ,KAAK,GAAM,c,gBAG/C,SAAG,GACK,OAAC,KAAK,WAAW,GAAG,EAAQ,KAAK,GAAM,c,gBAG/C,SAAG,GACD,OAAO,KAAK,WAAW,GAAG,EAAQ,KAAK,GAAM,c,iBAG/C,SAAI,GACF,OAAO,KAAK,WAAW,IAAI,EAAQ,KAAK,GAAM,c,iBAGhD,SAAI,GACF,OAAO,KAAK,WAAW,IAAI,EAAQ,KAAK,GAAM,e,kCA5PhD,SAA2B,GACnB,OAAC,IAAI,EAAQ,YAAU,KAAK,M,yBAG5B,SAAmB,GACzB,IAAK,IAAmB,EAAe,MAAM,GAC3C,MAAM,IAAI,MAAJ,+BAAkC,EAAlC,MAGF,GAAF,EAAe,SAAS,KAAM,OAEF,EAAe,MAAM,KAFnB,SAE3B,EAF2B,KAEd,EAFc,KAIhC,OAAI,EAAS,WAAW,KACf,IAAI,EACT,EAAQ,YAAY,GAAa,WAAW,IAC1C,EAAI,IAAI,YAAU,KAAK,EAAS,OAAO,QAKzC,EAAS,WAAW,OACZ,EAAC,EAAS,OAAO,IAGtB,IAAI,EACT,EAAQ,YAAY,GAAa,WAAW,IAAI,EAAI,IAAI,YAAU,KAAK,OAI3E,IAAK,EAAe,SAAS,KAC3B,OAAO,IAAI,EAAQ,YAAU,KAAK,GAAgB,IAAI,IA3BT,MA+Bd,EAAe,MAAM,KA/BP,SA+B1C,EA/B0C,KA+B1B,EA/B0B,KAuC/C,OANI,EAAS,OAAS,EACpB,GAAY,IAAI,OAAO,EAAY,EAAS,QAE5C,EAAW,EAAS,OAAO,EAAG,GAGzB,IAAI,EACT,YAAU,KAAK,GAAkB,GAC9B,IAAI,GACJ,IAAI,M,kBAIX,SAAY,GACV,cAAe,GACb,IAAK,SACH,GAAI,aAAsB,EACxB,OAAO,EAEP,MAAM,IAAI,MAAM,4BAEpB,IAAK,SACH,OAAO,EAAQ,YAAY,GAC7B,IAAK,SACH,OAAO,EAAQ,YAAY,EAAW,YACxC,QACE,MAAM,IAAI,MAAM,+B,iBAgMtB,SAAW,EAAe,GAIxB,OAHA,EAAI,EAAQ,KAAK,GACjB,EAAI,EAAQ,KAAK,GAEV,EAAE,GAAG,GAAK,EAAI,I,iBAGvB,SAAW,EAAe,GAIxB,OAHA,EAAI,EAAQ,KAAK,GACjB,EAAI,EAAQ,KAAK,GAEV,EAAE,GAAG,GAAK,EAAI,M,KApSzB,YACkB,WAAW,EAAQ,oBA7BhB,sEA8BH,OAAO,EAAQ,KAAK,GACpB,OAAO,EAAQ,KAAK,IACpB,MAAM,EAAQ,KAAK,G,IAuSxB,E,WAGT,SAAF,EAAoB,GAAiC,UAC/C,KAAC,QAAU,E,kCA0BjB,SAAS,GACP,OAAK,KAAK,QAIH,KAAK,QAAQ,KAAO,KAAK,QAAQ,cAAc,SAAS,GAHtD,Q,sBAMX,SAAS,GACP,OAAK,KAAK,QAIH,KAAK,QAAQ,KAAO,KAAK,QAAQ,cAAc,SAAS,GAHtD,KAAK,a,iBAMhB,SAAI,GACF,OAAO,IAAI,EACT,KAAK,SAAW,CACd,KAAM,KAAK,QAAQ,KACnB,cAAe,KAAK,QAAQ,cAAc,IAAI,O,mBAKpD,W,MACE,OAAmB,QAAZ,OAAK,eAAO,eAAE,cAAc,UAAW,O,oBAGhD,W,MACE,MAA8B,OAAX,QAAZ,OAAK,eAAO,eAAE,MAAe,UAAO,I,oBAG7C,W,MACE,MAA8B,OAAX,QAAZ,OAAK,eAAO,eAAE,MAAe,UAAO,I,yBAG7C,W,MACE,OAAmB,QAAnB,EAAO,KAAK,eAAO,eAAE,gB,oBAGvB,W,MACE,OAAmB,QAAZ,OAAK,eAAO,eAAE,cAAc,WAAY,O,kBAGjD,W,MACE,OAAmB,QAAZ,OAAK,eAAO,eAAE,cAAc,SAAU,Q,sBArE/C,SAAe,EAA4B,GACzC,YAAW,IAAP,QAA2B,IAAP,EACf,IAAI,OAAW,IAGxB,EAAK,EAAQ,KAAK,GAClB,EAAK,EAAQ,KAAK,GAEd,EAAG,UAAY,EAAG,SACb,IAAI,OAAW,GACb,EAAG,SACL,IAAI,EAAW,CAAE,KAAM,IAAK,cAAe,IACzC,EAAG,SACL,IAAI,EAAW,CAAE,KAAM,IAAK,cAAe,IACzC,EAAG,GAAG,GACR,IAAI,EAAW,CAAE,KAAM,IAAK,cAAe,EAAQ,KAAK,GAAI,IAAI,KAC9D,EAAG,GAAG,GACR,IAAI,EAAW,CAAE,KAAM,IAAK,cAAe,EAAQ,KAAK,GAAI,IAAI,KAEhE,IAAI,EAAW,CAAE,KAAM,GAAI,cAAe,EAAQ,Y,KA1B/D,e,IAiFa,E,WAaX,WAAmB,GAAQ,UACzB,KAAK,SAAW,EAAM,UAAa,EAAM,KAAO,EAAM,IAAI,MAAS,E,oCAGrE,SAAW,G,MACH,EAAO,YAAQ,IAAI,OAAO,GAAnB,KAEb,GAA+B,QAA/B,EAAI,KAAK,SAAS,qBAAa,eAAE,IAAI,GACnC,OAAO,O,sBAIX,SAAS,GACP,OACE,KAAK,SAAS,SAAS,IACtB,KAAK,SAAS,gBAAkB,KAAK,SAAS,SAAW,IAAM,M,sBAIpE,W,QACE,OAA+B,QAA/B,EAAI,KAAK,SAAS,qBAAa,eAAE,IAAI,SAC5B,KAAK,SAAS,IACe,QAA/B,EAAI,KAAK,SAAS,qBAAa,eAAE,IAAI,OACnC,KAAK,SAAS,GAEd,KAAK,SAAS,O,KAtC3B,a,wdF9ZA,YACE,wGAIA,mDAAE,YAAF,EAAE,IAAF,+CAGF,YACA,YACA,YACA,YACAA,EAAa,EAAb,QACAA,EAAa,EAAb,QACAA,EAAa,EAAb,S,2IGZA,WAEa,YAAY,SAAC,GAAD,OAAkC,EAAU,YAExD,aAAa,SAAC,GAAD,OACxB,UAAQ,oBAAoB,EAAU,gBAE3B,QAAQ,SAAI,GACvB,MAAM,GAMK,mBAAmB,SAAI,GAClC,IAAM,EAAO,OAAO,KAAK,GAEzB,OAAO,QAAQ,IAAI,OAAO,OAAO,IAAS,MAAK,YAAM,OACnD,OAAO,YAAY,EAAO,KAAI,SAAC,EAAO,GAAR,MAAc,CAAC,EAAK,GAAI,Y,sTCpB1D,YAOa,4BAA4B,UAAQ,KAAK,KAOzC,2BAA2B,UAAQ,KAAK,KAOxC,2BAA2B,UAAQ,KAAK,KAWxC,wBAAwB,UAAQ,KAAK,MAUrC,oBAAoB,2BAAyB,IAAI,yBAWjD,yBAAyB,UAAQ,KAAK,MAOtC,yBAAyB,UAAQ,KAAK,KAOtC,0BAA0B,UAAQ,KAAK,O,uGCnEpD,WAIA,SAEa,kBAAkB,WAC3B,IAAI,EAAQ,aAAW,uBAEvB,IAAG,EACH,MAAM,IAAI,MAAM,4DAGlB,OAAO,I,0ZLbT,YACA,YACA,a,yRMQA,YAGA,OAEA,SAOM,EAAqC,GAE9B,+BAA+B,SAC1C,GAD0C,OAG1C,EAA4B,MAC1B,YAA0B,OAAI,aAAoB,MAGtD,IAYM,EAAoB,SAAC,GAAD,MACH,kBAAd,GAAuD,KAA7B,gBAAc,IAG3C,EAAQ,SAAC,GAAD,OAAgB,IAAI,SAAQ,YAAO,OAAI,WAAW,EAAS,OAOnE,EAAU,SAAO,GAAP,OAA0C,SAAC,GAAD,OAAuB,SAC/E,EAD+E,GAG7E,IADA,EACA,EADA,SAEI,EAAJ,GAAG,MAAK,YACE,OAAN,GAAc,KAChB,EAAE,SAKF,EAAO,SAAI,GAAF,OAAwB,SAAC,EAAM,GACxC,EAAF,KAGE,EAAW,SAAI,GAAF,OAAwB,SAAC,EAAD,GAA6C,IAApC,EAAoC,EAApC,SAC9C,EAAF,GACE,MAgBO,qBAAqB,SAAiD,GAC/E,IAAE,EAA0B,8BAAG,qC,2BAK/B,WAAa,EACP,EAAN,yBAA0B,EAEX,EAAN,gBAAkB,IAAI,IAChB,EAAN,eAAiB,EAAK,SAAS,KAAd,MATK,EAAH,uCAW5B,SAAc,EAAa,GACjB,KAAH,YAAc,IAAI,oBAAkB,EAAK,GACtC,KAAH,YAAY,QAAU,KAAK,kBAAkB,KAAK,MAC/C,KAAH,UAAY,CAAC,EAAK,GACf,KAAH,gBAfqB,+BAkB5B,WAAiB,WACP,KAAH,iBACL,QAAQ,KAAK,2DACb,KAAK,kBAAoB,YAAW,kBAAM,EAAK,cAAL,QAAI,EAAkB,EAAK,cAAa,OArBxD,4BAwB5B,WACM,KAAK,cACP,KAAK,YAAY,QAAU,KACjB,KAAL,YAAY,MAAM,KACvB,KAAK,iBAAc,EACnB,KAAK,mBAE0B,IAA3B,KAAK,oBACP,aAAa,KAAK,mBAClB,KAAK,uBAAoB,MAjCH,yBAsC5B,WACM,KAAK,gBAAgB,KAAO,IAC1B,KAAK,aACP,uCAAU,QAAS,KAAK,gBAE1B,KAAK,uBA3CmB,sBA+C5B,SAAS,GAAmB,WAC1B,KAAK,WAAa,EAEb,KAAK,0BACR,KAAK,yBAA0B,EAE/B,YAAW,WACT,EAAK,yBAA0B,EAC/B,EAAI,EAAK,iBAAiB,SAAQ,mBAAkB,EAAlB,WAA2B,EAAK,iBACjE,OAxDqB,wDA4D5B,WAAyB,EAA2B,GAApD,qEACqB,EADrB,gCAGwB,IAHxB,cAGY,EAHZ,yBAOa,GAPb,mCASU,KAAK,aAAe,IA7Hf,kBADY,EA8H0C,OA5H9C,kBAAlB,EAAM,UACZ,EAAM,QAAQ,SAEb,qBAEA,EAAM,QAAQ,SAEZ,8EA4GF,qDAeU,EArH6B,KAsGvC,yDArH0B,IAAC,IAqH3B,oBA5D4B,sGA+E5B,WACE,EACA,GAFQ,IAAV,WAAU,OAAV,oBAAY,OAAZ,6CAIiC,EAJjC,cAIQ,EAJR,OAMQ,EAAU,W,MACd,OAAgB,QAAhB,IAAK,mBAAW,eAAE,SACd,EAAK,YAAY,KAAK,EAAa,GADvC,kCAEe,EAAa,IAThC,kBAWS,IAAqB,KAAK,WAC7B,KAAK,gBAAgB,EAAS,KAAK,YACnC,KAbN,gDA/E4B,4GA+F5B,WACE,EACA,GAFF,8FAIiC,EAJjC,cAIQ,EAJR,OAMQ,EAAU,W,MACd,OAAgB,QAAhB,IAAK,mBAAW,eAAE,SACd,EAAK,YAAY,WAAW,EAAe,GAD/C,wCAEqB,EAAe,IATxC,kBAWS,IAAqB,KAAK,WAC7B,KAAK,gBAAgB,EAAS,KAAK,YACnC,KAbN,gDA/F4B,wFA+G5B,WACM,KAAK,aACP,QAAQ,IAAI,iDACZ,KAAK,YAAY,GAAG,QAAS,KAAK,kBAElC,QAAQ,IAAI,8CACZ,sCAAS,QAAS,KAAK,mBArHC,8BAyH5B,WACM,KAAK,YACP,KAAK,YAAY,IAAI,QAAS,KAAK,gBAEnC,uCAAU,QAAS,KAAK,kBA7HA,mBAiI5B,SACE,EACA,GAA4E,WAE5E,MAAO,CACL,EACA,SAAC,GAAD,OACE,EA/II,SAAI,GAAJ,OAA0B,SAAC,GACnC,YAAO,WACH,EAAJ,KACD,IA4IO,CAAM,GAAR,CAAY,EAAG,CACb,SAAU,kBAAM,EAAK,gBAAgB,IAAI,IACzC,SAAU,kBAAM,EAAK,gBAAgB,OAAO,UA1IxB,gBA+I5B,SAAG,EAAsB,GACvB,GAAI,EAAkB,GAAY,CAChC,IAAM,EAAe,KAAK,iCAAiC,KAAK,KAAM,GADtC,EAER,KAAK,MAAM,EAAU,EAAQ,IAA5C,EAFuB,UAMhC,OAFA,OAAY,GAEL,KAAK,kBAAkB,EAAU,GACnC,MAAkB,UAAd,EACF,KAAK,kBAAL,aAA0B,KAAK,MAAM,EAAU,KAEtD,sCAAgB,EAAW,KA1JH,+BA8J5B,SAAkB,EAAyB,GAQjC,OAPH,KAAK,gBAAgB,IAAI,KAC5B,KAAK,gBAAgB,IAAI,EAAK,GAEI,IAA9B,KAAK,gBAAgB,MACvB,KAAK,qBAGF,OAtKmB,kBAyK5B,SAAK,EAAsB,GACjB,GAAJ,EAAkB,GAAY,CACtB,IAAJ,EAAe,KAAK,iCAAiC,KAAK,KAAM,GADtC,EAEJ,KAAK,MAAM,GAzL7C,EAyLgE,EAAQ,GAxLxE,EAwLuF,EAvLpF,SAAC,GAAG,OAAmB,SAAC,EAAM,GAC3B,GAAJ,YAAS,OAAJ,EAAE,EAAF,CAAK,EAAG,KAAT,CAAmB,EAAG,OAsLb,EAFuB,UAMhC,OAFA,OAAgB,GAET,KAAK,kBAAkB,EAAU,GACnC,MAAkB,UAAd,EACF,KAAK,kBAAL,aAA0B,KAAK,MAAM,EAAU,KAEtD,wCAAkB,EAAW,GAlMpB,IACf,EACA,IAY8B,iBAwL5B,SAAI,EAAsB,GAChB,OAAJ,EAAkB,IAA4B,UAAd,EAC3B,KAAK,qBAAqB,GAEjC,uCAAiB,EAAW,KA5LJ,kCAgM5B,SAAqB,GAOnB,OANI,KAAK,gBAAgB,IAAI,KAC3B,KAAK,gBAAgB,OAAO,GACM,IAA9B,KAAK,gBAAgB,MACvB,KAAK,oBAGF,OAvMmB,uDA0M5B,WAAqB,GAArB,oFACQ,EADR,mDAEyB,IAFzB,UAGwB,QAAhB,OAAK,mBAAW,eAAE,SAAU,CAAC,KAAK,YAAY,eAAe,IAAoB,KAHzF,SAMsB,QAAQ,KAAK,GANnC,UAOkB,QADV,EANR,cAOkB,IAAL,EAPb,qBAOa,EAPb,wCAO6B,QAAQ,IAAI,GAPzC,oBAOsD,MAAK,YAAE,OAAW,OAAP,KAPjE,gBAOU,EAPV,UAO6E,OAP7E,sCAO6E,MAP7E,uCAO6E,EAP7E,6BAOiF,KAPjF,eAOQ,EAPR,uBASS,GATT,iDA1M4B,0FAsN5B,SAAsB,G,MACpB,OAAuB,QAAhB,OAAK,mBAAW,eAAE,SACrB,KAAK,YAAY,sBAAsB,GADpC,yDAEyB,KAzNN,iCA4N5B,SACE,EACA,G,MAEA,OAAuB,QAAhB,OAAK,mBAAW,eAAE,SACrB,KAAK,YAAY,oBAAoB,EAAe,GADjD,uDAEuB,EAAe,KAlOnB,sBAqO5B,SAAS,G,MACP,OAAuB,QAAhB,OAAK,mBAAW,eAAE,SACrB,KAAK,YAAY,SAAS,GADvB,4CAEY,KAxOO,sCA2O5B,SAAyB,G,MACvB,OAAuB,QAAhB,OAAK,mBAAW,eAAE,SACrB,KAAK,YAAY,yBAAyB,GADvC,4DAE4B,KA9OT,yDAiP5B,WAAuB,EAAqB,GAA5C,qEAGO,EAAQ,KAHf,UAGsB,EAHtB,gCAIU,EA/R6B,KA2RvC,uBAG2C,KAAK,SAAS,GAHzD,OAG6B,EAH7B,sDAOS,EAAM,aAAa,MAAK,YAAa,OAAI,IAAkB,MAPpE,iDAjP4B,kIA2P5B,WAAuC,EAAkC,GAAzE,qFACiB,EADjB,OACE,EADF,OAGqB,EAHrB,uBAI2B,KAAK,sBAAsB,GAJtD,UAIU,EAJV,iBAOsB,IAAhB,EAPN,8BAQmB,OAAZ,GARP,uCAQmC,KAAK,iBAAiB,EAAa,GARtE,uFASmB,OAAZ,GAAoB,EAAQ,YAAc,EAAQ,cAAgB,GAAK,EAT9E,2DAca,GAdb,yBAkBU,EAvT6B,KAqSvC,wEA3P4B,oHAiR5B,WAAyB,EAAgB,EAAwB,GAAjE,sFACkB,IAAZ,EADN,+FAGoC,EAAQ,EAAe,IAH3D,OAMM,OAAkC,EANxC,uBAQ0B,KAAK,iCAAiC,EAAQ,GARxE,UAWkB,QAHR,EARV,gBAYyB,IAAlB,GAA+B,EAAQ,eAAiB,GAZ/D,yCAca,GAdb,wBAiBwB,IAAI,SAAgB,YAAO,OAAI,EAAK,KAAK,QAAS,MAjB1E,QAiBI,EAjBJ,+EAjR4B,gEAAiB,GAyS/C,OAFA,EAA4B,KAAK,GAE1B,GAGI,iCAAiC,qBAAmB,iB,+JCpYjE,IAEa,E,mHACX,WACE,OAAQ,KAAK,WAAyB,aAAe,UAAU,O,mBAGjE,SAAY,GACT,KAAK,WAAyB,QAAU,I,mBAG3C,SAAM,GACH,KAAK,WAAyB,MAAM,K,sDAGvC,qGACS,KAAK,SADd,gD,2DAfF,MAEuC,mBAAvCC,EAAQC,kBAAoB,G,yTCE5B,YAUA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YA2Ga,E,8BAGX,WACE,EACA,EACA,GAAgD,MA3BlD,EACA,EA0BkD,kBAEhD,cAAM,EAAe,EAAmB,IAGnC,qBAhCP,EAgCqD,EAAK,YA/B1D,EA+BuE,EAAK,oBA7B5E,OAAO,YACL,OAAO,KAAK,GAAmB,KAAI,YAAY,MAAI,CACjD,EADiD,2BAEjD,WAAO,EAAW,GAAlB,sGAAqC,EAArC,iCAAqC,EAArC,kBAC6B,IAAvB,EAAU,SADhB,gCAE+B,EAAkB,GAAlB,QAAmC,EAAlB,QAAwB,KAFxE,OAEU,EAFV,OAII,EAAS,OACJ,GADI,IAEP,SAAU,EAAe,KAN/B,gCAUS,EAAU,GAAV,QAA2B,EAAlB,QAAwB,MAV1C,2CAFiD,8DAuBH,E,uCAQlD,SAAc,EAAa,GAAY,WACrC,OAAO,EACJ,QAAO,YAAG,OAAI,EAAI,UAAY,EAAK,WACnC,KAAI,YAAG,OAAI,EAAK,UAAU,SAAS,MACnC,QAAO,YAAC,OAAI,EAAE,OAAS,S,GAlBQ,YAAtC,qBAgDa,sBAAsB,SACjC,GADiC,MAEC,aAAc,GAGrC,kBAAkB,SAAC,GAAD,MAC7B,SAAU,GAsDC,sBAAsB,SACjC,EADiC,GAGZ,IAhDP,EAA6B,EAsB3C,EACA,EAwBE,EACmB,EADnB,UAAW,EACQ,EADR,oBAAqB,EACb,EADa,gBAE5B,GAjDQ,EAiDK,EAjDwB,EAiDH,EAjDqD,CAC7F,WAAY,UACZ,mBAAoB,UACpB,aAAc,UACd,UAAW,UACX,kBAAmB,UACnB,YAAa,UACb,UAAW,UACX,YAAa,UACb,sBAAuB,UACvB,YAAa,UACb,iBAAkB,UAClB,UAAW,EAAqB,UAAsB,UACtD,aAAc,UACd,cAAe,UACf,QAAS,UACT,gBAAiB,UACjB,QAAS,UACT,SAAU,EAAiB,UAAe,YAiC1C,OA7BA,EA8BE,EA7BF,EA8BE,SAAC,EAAS,GAAV,OACE,IAAI,EAAiB,EAAS,EAAI,GAAM,IA7B5C,OAAO,YACL,OAAO,QAAQ,GAAW,KAAI,yBAAE,EAAF,KAAO,EAAP,WAAc,CAAC,EAAK,EAAE,EAAG,U,gKCnO3D,IAuCK,EAvCL,OAiBA,QAGA,QAWA,SAKM,EAAsB,UAAQ,KAAK,wBACnC,EAAO,UAAQ,KAAK,IAE1B,SAAK,GACH,iCACA,uBACA,qCACA,iDACA,+CALF,CAAK,MAAkB,KAQvB,IAAM,EAAsB,SAAC,GAAD,OAC1B,IAAkB,EAAmB,YACjC,cACA,IAAkB,EAAmB,OACrC,OACA,IAAkB,EAAmB,cACrC,gBACA,IAAkB,EAAmB,oBACrC,sBACA,IAAkB,EAAmB,mBACrC,qBACA,QAAM,IAAI,MAAJ,gCAAmC,MAEzC,EAAgB,SAAC,GAAD,OAAuB,IAAI,KAAiB,IAAZ,IAEhD,EAAsB,CAAC,2BAA4B,6BAEnD,EAAoB,SAAmB,EAA4B,GACrE,QAAe,IAAb,EAAI,GAAoB,CACtB,IAAC,OAAO,UAAU,EAAI,IACxB,MAAM,IAAI,MAAJ,UAAa,EAAb,wBAGR,GAAI,EAAI,GAAO,EACb,MAAM,IAAI,MAAJ,UAAa,EAAb,4BAUC,E,WAIT,SAAF,EAAY,GAAmC,UACzC,KAAC,WAAa,E,kCAwDpB,WACE,OAAO,I,8DAIT,WAA4B,GAApB,IAAR,YAAQ,OAAR,oBAAU,OAAV,sCAC2B,gBAAc,KAAK,YAApC,EADV,EACU,aADV,SAGmC,QAAQ,IAAI,CAC3C,EAAa,MAAb,KAAwB,IAAa,KAAK,cAC1C,EAAa,WAAb,KAA6B,IAAa,KAAK,gBALnD,gCAGS,EAHT,KAGqB,EAHrB,uBAQS,IAAI,QAAM,EAAY,IAR/B,gD,4HAYA,WACE,EACA,GAFF,sFAIS,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aAJnC,EAK2B,gBAAc,KAAK,YAApC,EALV,EAKU,aALV,SAOkC,QAAQ,IAAI,CAC1C,EAAa,OAAO,EAApB,KAAkC,IAClC,EAAa,gBAAgBC,EAA7B,KAA2CC,MAT/C,4BAOS,EAPT,KAOgB,EAPhB,KAYM,EAAM,SAAW,EAAmB,OAZ1C,0CAaW,IAAI,iCACT,EACA,EAAoB,EAAM,QAC1B,aAAW,EAAM,MACjB,aAAW,EAAM,MACjB,aAAW,EAAM,OACjB,IAAI,QAAM,aAAW,EAAS,KAAM,aAAW,EAAS,aAnB9D,iCAsBW,IAAI,iCAA+B,EAAS,EAAoB,EAAM,UAtBjF,iD,0GA2BA,WAAe,EAAkB,GAAjC,2FAC4C,QAAQ,IAAI,CACpD,KAAK,6BAA6B,EAAS,GAC3C,KAAK,sBAAsB,KAH/B,gCACS,EADT,KACgB,EADhB,uBAMS,EAAM,oBAAoB,IANnC,gD,mHAUA,WAAwB,GAAxB,gFAC2B,gBAAc,KAAK,YAApC,EADV,EACU,aADV,SAGgB,EAAa,oBAAb,KAAsC,IAHtD,uCAGoE,YAHpE,gD,6EAOA,SAAS,GAGP,OAFsB,gBAAc,KAAK,YAAjC,UAES,WAAW,WAArB,KAAqC,IAAa,KAAK,gB,uDAIhE,WAAqB,GAArB,wFACyB,gBAAc,KAAK,YAAlC,EADV,EACU,WADV,SAG+C,QAAQ,IACnD,CACE,EAAW,OAAX,KAAuB,IACvB,EAAW,YAAX,KAA4B,KAC5B,KAAI,YAAY,OAAI,EAAa,KAAK,kBAP5C,gCAGS,EAHT,KAG2B,EAH3B,uBAUS,IAAI,QAAM,EAAkB,IAVrC,gD,+GAcA,WAAsB,GAAtB,wFAC0B,gBAAc,KAAK,YAAnC,EADV,EACU,YADV,SAGmD,QAAQ,IACvD,CACE,EAAY,OAAZ,KAAwB,IACxB,EAAY,YAAZ,KAA6B,KAC7B,KAAI,YAAY,OAAI,EAAa,KAAK,kBAP5C,gCAGS,EAHT,KAG+B,EAH/B,uBAUS,IAAI,QAAM,EAAsB,IAVzC,gD,wGAcA,WAAe,GAAf,2FAC0C,QAAQ,IAAI,CAClD,KAAK,eAAe,GACpB,KAAK,gBAAgB,KAHzB,gCACS,EADT,KACqB,EADrB,uBAMS,EAAW,IAAI,IANxB,gD,mHAUA,WACE,EACA,GAFM,IAAR,oBAAQ,OAAR,oBAAU,OAAV,oCAIS,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aAJnC,EAK4B,gBAAc,KAAK,YAArC,EALV,EAKU,cALV,SAYY,QAAQ,IAAI,CACpB,EAAc,SAAS,EAAvB,KAAqC,IACrC,EAAc,yBAAyB,EAAvC,KAAqD,IACrD,EAAc,oBAAoB,EAAlC,KAAgD,IAChD,EAAc,qBAAqB,EAAnC,KAAiD,MAhBrD,uCAQM,EARN,EAQM,YAAa,EARnB,EAQmB,aACf,EATJ,KAUI,EAVJ,KAWI,EAXJ,uBAmBS,IAAI,mBACT,aAAW,GACX,aAAW,GACX,aAAW,GACX,aAAW,GACX,IAxBJ,iD,qIA6BA,WAA0C,GAA1C,oFACgC,gBAAc,KAAK,YAAzC,EADV,EACU,kBAEF,EAAc,KAAK,WAAW,6BAHtC,KAI0B,EAJ1B,SAI2C,EAAkB,gBAAlB,KAAuC,IAJlF,0BAIQ,EAJR,KAI0B,WAJ1B,kCAOS,EAAY,IAAI,IAPzB,gD,2FAWA,SAAuB,GAGrB,OAF0B,gBAAc,KAAK,YAArC,cAEa,qBAAd,KAAwC,IAAa,KAAK,gB,4BAInE,SAAe,EAAkB,GAI/B,OAHO,OAAD,QAAC,IAAP,MAAY,kBAAgB,KAAK,aACX,gBAAc,KAAK,YAAjC,UAES,UAAU,EAApB,KAAkC,IAAa,KAAK,gB,4BAI7D,SAAe,EAAkB,GAI/B,OAHO,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aACX,gBAAc,KAAK,YAAjC,UAES,UAAU,EAApB,KAAkC,IAAa,KAAK,gB,gCAI7D,SAAmB,EAAkB,GAInC,OAHO,OAAD,QAAC,IAAP,MAAY,kBAAgB,KAAK,aACZ,gBAAc,KAAK,YAAhC,SAEQ,UAAU,EAAnB,KAAiC,IAAa,KAAK,gB,kCAI5D,SAAqB,EAAkB,GAC9B,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aADmC,MAEtC,gBAAc,KAAK,YAAzC,EAF4D,EAE5D,SAAU,EAFkD,EAElD,QAElB,OAAO,EAAS,UAAU,EAAS,EAAQ,QAApC,KAAkD,IAAa,KAAK,gB,yFAI7E,WACE,GADF,4FAGsB,gBAAc,KAAK,YAA/B,EAHV,EAGU,QAHV,SAKwE,QAAQ,IAAI,CAChF,EAAQ,YAAR,KAAyB,IACzB,EAAQ,WAAR,KAAwB,IAAa,KAAK,cAC1C,EAAQ,aAAR,KAA0B,IAAa,KAAK,aAC5C,EAAQ,eAAR,KAA4B,IAAa,KAAK,eATlD,gCAKS,EALT,KAKsB,EALtB,KAKkC,EALlC,KAKgD,EALhD,wBAYS,SAAC,GAAD,OACL,EAAW,IACT,KAAK,IAAI,EAAG,GAAgB,EAAY,SAAW,EAAiB,QAd1E,iD,qIAmBA,WAA4C,GAA5C,2FACyD,QAAQ,IAAI,CACjE,KAAK,iDAAiD,GACtD,KAAK,mBAA4B,OAAT,QAAS,IAAT,OAAS,EAAT,EAAW,YAHvC,gCACS,EADT,KACiC,EADjC,uBAMS,EAAuB,IANhC,gD,4FAUA,SAAwB,EAAkB,GAIlC,OAHC,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aACb,gBAAc,KAAK,YAA/B,QAEO,UAAU,EAAlB,KAAgC,IAAa,KAAK,gB,qCAI3D,SAAwB,GAGtB,OAFoB,gBAAc,KAAK,YAA/B,QAEO,YAAR,KAAyB,IAAa,KAAK,gB,0CAIpD,SAA6B,EAAkB,GAIvC,OAHC,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aACb,gBAAc,KAAK,YAA/B,QAEO,OAAO,EAAf,KAA6B,IAAa,KAAK,gB,yCAIxD,SAA4B,EAAkB,GAI5C,OAHO,OAAD,QAAC,IAAP,MAAY,kBAAgB,KAAK,aACL,gBAAc,KAAK,YAAvC,gBAEe,cAAc,EAA9B,KAA4C,IAAa,KAAK,gB,kDAYvE,WACE,EACA,GAFM,IAAR,kBAAQ,OAAR,oBAAU,OAAV,kCAI+B,gBAAc,KAAK,YAAxC,EAJV,EAIU,iBAER,EAAkB,EAAQ,SAC1B,EAAkB,EAAQ,cAErB,EAAoB,SAAS,EAAO,UAT3C,sBAUU,IAAI,MAAJ,mCACwB,EAAoB,KAAI,YAAC,iBAAQ,EAAR,QAAc,KAAK,QAX9E,uBAeoD,QAAQ,IAAI,CAC5D,EAAO,0BAAuB,EAAY,KAAK,sBAAL,KAAgC,IAC1E,EAAiB,wBACK,8BAApB,EAAO,SACc,QAAlB,EAAC,EAAO,kBAAU,QAAI,KACD,QAAlB,EAAC,EAAO,kBAAU,QAAI,GAAK,GACjC,EAAO,MAJT,KAKO,MAtBX,4BAeS,EAfT,KAe6B,EAf7B,KA0BQ,EAAS,EAAiB,IAE5B,EA5BN,0CA6BW,EAAO,KAAI,YAAK,OAAI,EAAM,oBAAoB,OA7BzD,iCA+BW,GA/BX,iD,yFAoCA,SAAmB,GACX,OAAC,qBAAmB,KAAK,WAAY,K,wDAI7C,WACE,GADF,wFAG2B,gBAAc,KAAK,YAApC,EAHV,EAGU,aAHV,SAK6D,QAAQ,IAAI,CACrE,EAAa,qBAAb,KAAuC,IACvC,EAAa,SAAb,KAA2B,IAAa,KAAK,gBAPjD,gCAKS,EALT,KAK+B,EAL/B,wBAUS,SAAC,EAAgB,GAAjB,OACL,IAAI,OACF,EACA,EACA,EACA,EAAc,EAAqB,YACnC,EAAc,GACd,MAjBN,gD,uGAsBA,WAAc,GAAd,+FAC2D,QAAQ,IAAI,CACnE,KAAK,gBAAgB,GACrB,KAAK,SAAS,GACd,KAAK,SAAS,GACd,KAAK,mBAA4B,OAAT,QAAS,IAAT,OAAS,EAAT,EAAW,YALvC,gCACS,EADT,KACqB,EADrB,KAC4B,EAD5B,KACmC,EADnC,uBAQS,EAAW,EAAgB,EAAM,+BAA+B,KARzE,gD,4GAYA,WAAmB,EAAkB,GAArC,wFACS,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,aADnC,EAE0B,gBAAc,KAAK,YAAnC,EAFV,EAEU,YAFV,SAIuD,QAAQ,IAC3D,CACE,EAAY,OAAO,EAAnB,KAAiC,IACjC,EAAY,kBAAkB,EAA9B,KAA4C,IAC5C,EAAY,mBAAmB,EAA/B,KAA6C,KAC7C,KAAI,YAAY,OAAI,EAAa,KAAK,kBAT5C,gCAIS,EAJT,KAIqB,EAJrB,KAIqC,EAJrC,uBAYS,IAAI,YAAU,EAAY,EAAgB,IAZnD,iD,oHAgBA,WAAyB,GAAzB,gFAC0B,gBAAc,KAAK,YAAnC,EADV,EACU,YADV,kBAGS,EAAY,gBAAZ,KAAiC,IAAa,KAAK,eAH5D,gD,iHAOA,WACE,EACA,GAFF,oFAIS,OAAP,QAAO,IAAP,MAAY,0BAAwB,KAAK,aAJ3C,EAK4B,gBAAc,KAAK,YAArC,EALV,EAKU,cALV,SAO6C,EAAc,UAAU,EAAxB,KAAsC,IAPnF,uBAOU,EAPV,EAOU,WAAY,EAPtB,EAOsB,aAPtB,kBASS,EACH,CAAE,OAAQ,aAAc,aAAc,aAAW,IACjD,CAAE,OAAQ,iBAXhB,gD,8EA3YA,SAAa,GACL,MAAW,IAAI,EAAsB,GAE3C,MAA+B,gBAAxB,EAAW,SACd,IAAI,EAAkC,GACtC,I,gDAqBN,WACE,EACA,GAFF,2EAIS,EAJT,SAI2C,WAAS,EAAkB,GAJtE,iDAI+B,MAJ/B,4D,gEA3CF,0BA8aA,IAAM,EAAmB,SAAC,GAAD,OACvB,EAAO,KACL,YAAK,OACH,IAAI,iCACF,EAAM,MACN,OACA,aAAW,EAAM,MACjB,aAAW,EAAM,MACjB,aAAW,EAAM,OACjB,IAAI,QAAM,aAAW,EAAM,aAAc,aAAW,EAAM,wBAe5D,E,WAOJ,WAAY,GAA+B,UACzC,IAAM,EAAQ,IAAI,0BAAwB,GAE1C,KAAK,MAAQ,EACb,KAAK,WAAa,EAAS,WAC3B,KAAK,UAAY,E,mCAGX,SAAU,GAChB,OACG,QACsB,IAAvB,EAAU,UACV,EAAU,WAAa,KAAK,MAAM,MAAM,W,sBAIpC,SAAS,EAAkB,GACjC,OACE,KAAK,UAAU,UACF,IAAZ,GAAyB,IAAY,KAAK,MAAM,WAAW,e,0BAIxD,SAAa,EAAkB,GACrC,OACE,KAAK,UAAU,UACF,IAAZ,GAAyB,IAAY,KAAK,MAAM,WAAW,e,sBAIhE,SAAS,GACP,YAAiB,IAAV,GAAiC,gBAAV,I,8DAGhC,WAA4B,GAA5B,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,mBACjB,KAAK,UAAU,sBAAsB,IAH3C,gD,4HAMA,WACE,EACA,GAFF,wFAIS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,0BACjB,KAAK,UAAU,6BAA6B,EAAS,IAN3D,gD,0GASA,WAAe,EAAkB,GAAjC,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,MACjB,KAAK,UAAU,SAAS,EAAS,IAHvC,gD,mHAMA,WAAwB,GAAxB,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,eACjB,KAAK,UAAU,kBAAkB,IAHvC,gD,wGAMA,WAAe,GAAf,wFACS,KAAK,UAAU,GAAa,KAAK,MAAM,MAAM,MAAQ,KAAK,UAAU,SAAS,IADtF,gD,wGAIA,WAAe,GAAf,wFACS,KAAK,UAAU,GAAa,KAAK,MAAM,MAAM,MAAQ,KAAK,UAAU,SAAS,IADtF,gD,mHAIA,WACE,EACA,GAFF,wFAIS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,iBACjB,KAAK,UAAU,oBAAoB,EAAS,IANlD,gD,qIASA,WAA0C,GAA1C,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,iCACjB,KAAK,UAAU,oCAAoC,IAHzD,gD,sHAMA,WAA6B,GAA7B,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,oBACjB,KAAK,UAAU,uBAAuB,IAH5C,gD,8GAMA,WAAqB,EAAkB,GAAvC,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,YACjB,KAAK,UAAU,eAAe,EAAS,IAH7C,gD,gHAMA,WAAqB,EAAkB,GAAvC,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,YACjB,KAAK,UAAU,eAAe,EAAS,IAH7C,gD,oHAMA,WAAyB,EAAkB,GAA3C,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,gBACjB,KAAK,UAAU,mBAAmB,EAAS,IAHjD,gD,sHAMA,WAA2B,EAAkB,GAA7C,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,kBACjB,KAAK,UAAU,qBAAqB,EAAS,IAHnD,gD,uIAMA,WAA4C,GAA5C,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,mCACjB,KAAK,UAAU,sCAAsC,IAH3D,gD,uHAMA,WACE,EACA,GAFF,wFAIS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,qBACjB,KAAK,UAAU,wBAAwB,EAAS,IANtD,gD,yHASA,WAA8B,GAA9B,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,qBACjB,KAAK,UAAU,wBAAwB,IAH7C,gD,4HAMA,WACE,EACA,GAFF,wFAIS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,0BACjB,KAAK,UAAU,6BAA6B,EAAS,IAN3D,gD,6HASA,WACE,EACA,GAFF,wFAIS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,yBACjB,KAAK,UAAU,4BAA4B,EAAS,IAN1D,gD,oHASA,WAAyB,GAAzB,wFACS,KAAK,UAAU,CAAE,aACpB,KAAK,MAAM,MAAM,eACjB,KAAK,UAAU,mBAAmB,IAHxC,gD,+GAMA,WACE,GADF,wFAGS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,aACjB,KAAK,UAAU,gBAAgB,IALrC,gD,uGAQA,WAAc,GAAd,wFACS,KAAK,UAAU,GAAa,KAAK,MAAM,MAAM,KAAO,KAAK,UAAU,QAAQ,IADpF,gD,4GAIA,WAAmB,EAAkB,GAArC,wFACS,KAAK,SAAS,EAAS,GAC1B,KAAK,MAAM,MAAM,UACjB,KAAK,UAAU,aAAa,EAAS,IAH3C,gD,oHAMA,WAAyB,GAAzB,wFACS,KAAK,UAAU,GAClB,KAAK,MAAM,MAAM,gBACjB,KAAK,UAAU,mBAAmB,IAHxC,gD,iHAMA,WACE,EACA,GAFF,wFAIS,KAAK,aAAa,EAAS,GAC9B,KAAK,MAAM,MAAM,SACjB,KAAK,UAAU,kBAAkB,EAAS,IANhD,gD,gFAgBA,SAAU,EAA4B,GACpC,OAAO,KAAK,UAAU,UAAU,EAAQ,K,4BAG1C,WACE,MAAM,IAAI,MAAM,6B,6BAGlB,WACE,MAAM,IAAI,MAAM,6B,8DAGlB,WACE,MAAM,IAAI,MAAM,+B,gMCpvBpB,YAEA,OAWA,QAEA,QAyCa,E,8BAMT,SAAF,EAAY,GAA+B,wBACrC,EAAJ,cAEK,WAAa,EAAS,WACvB,EAAC,UAAY,EACb,EAAC,UAAY,eAAa,EAAS,YALE,E,0FAQnC,WACN,GADM,qFAGuB,KAAK,UAAU,UAC1C,CAAE,MAAO,EAAG,SAAU,2BAA4B,sBAAsB,GACxE,GALI,UAQwB,KALxB,EAHA,QAQa,OARb,yCASG,IAAI,iCAA+B,cAAa,gBATnD,gCAYC,EAAe,IAZhB,gD,oGAeA,WACN,GADM,4FAG+B,KAAK,WAAlC,EAHF,EAGE,YAAa,EAHf,EAGe,YAHf,SAUI,sBACR,eAAgB,KAAK,UAAU,mBAAmB,GAClD,aAAc,KAAK,UAAU,gBAAgB,CAAE,aAC/C,uBAAwB,KAAK,UAAU,iDAAiD,CACtF,aAGF,MAAO,KAAK,UAAU,SAAS,CAAE,aACjC,eAAgB,KAAK,UAAU,kBAAkB,CAAE,aACnD,mBAAoB,KAAK,UAAU,sBAAsB,CAAE,aAC3D,MAAO,KAAK,UAAU,SAAS,CAAE,aACjC,oBAAqB,KAAK,UAAU,uBAAuB,CAAE,aAC7D,gBAAiB,KAAK,UAAU,mBAAmB,CAAE,aACrD,mCAAoC,KAAK,sCAAsC,CAAE,aACjF,qBAAsB,KAAK,UAAU,wBAAwB,CAAE,aAC/D,iCAAkC,KAAK,UAAU,oCAAoC,CACnF,aAGF,SAAU,EACN,KAAK,UAAU,kBAAkB,EAAa,CAAE,aAChD,CAAE,OAAQ,iBAEV,EACA,CACE,eAAgB,KAAK,UAAU,WAAW,EAAa,GAAU,KAAK,cACtE,YAAa,KAAK,UAAU,eAAe,EAAa,CAAE,aAC1D,YAAa,KAAK,UAAU,eAAe,EAAa,CAAE,aAC1D,gBAAiB,KAAK,UAAU,mBAAmB,EAAa,CAAE,aAClE,kBAAmB,KAAK,UAAU,qBAAqB,EAAa,CAAE,aACtE,qBAAsB,KAAK,UAAU,wBAAwB,EAAa,CAAE,aAC5E,0BAA2B,KAAK,UAAU,6BAA6B,EAAa,CAClF,aAEF,yBAA0B,KAAK,UAAU,4BAA4B,EAAa,CAChF,aAEF,0BAA2B,KAAK,UAAU,6BAA6B,EAAa,CAClF,aAEF,iBAAkB,KAAK,UAAU,oBAAoB,EAAa,CAAE,aACpE,UAAW,KAAK,UAAU,aAAa,EAAa,CAAE,aACtD,YAAa,KAAK,UAAU,kBAAkB,EAAa,CAAE,cAE/D,CACE,eAAgB,UAAQ,KACxB,YAAa,UAAQ,KACrB,YAAa,UAAQ,KACrB,gBAAiB,UAAQ,KACzB,kBAAmB,UAAQ,KAC3B,qBAAsB,UAAQ,KAC9B,0BAA2B,UAAQ,KACnC,yBAA0B,UAAQ,KAClC,0BAA2B,IAAI,iCAC7B,cACA,eAEF,iBAAkB,IAAI,mBACpB,UAAQ,KACR,UAAQ,KACR,UAAQ,KACR,UAAQ,KACR,eAEF,UAAW,IAAI,YACf,YAAa,CAAE,OAAQ,mBA3EzB,uBAMJ,EANI,EAMJ,eACA,EAPI,EAOJ,aACA,EARI,EAQJ,uBACG,EATC,kFA+EC,QAEA,GAFA,IAGH,kBAAmB,EAAa,GAAgB,GAChD,mCAAoC,EAAuB,KAE7D,CACE,WACA,iBACA,kBAxFE,gD,6EA8FE,WAAQ,WAChB,KAAK,OAAO,MAAK,YACV,EAAK,SACR,EAAK,MAAL,QAAI,EAAU,OAIlB,IAAM,EAAa,2BAAG,WAAO,GAAP,qFACA,EAAK,KAAK,GADV,OACd,EADc,OAGhB,EAAK,QACP,EAAK,QAAL,QAAI,EAAY,IAEhB,EAAK,MAAL,QAAI,EAAU,IANI,2CAAH,sDAYnB,OAFA,KAAK,UAAU,GAAG,QAAS,GAEpB,WACL,EAAK,UAAU,IAAI,QAAS,M,0BAKtB,SACR,EACA,G,UAEA,MAAO,CACL,SAA8B,QAAtB,EAAE,EAAY,gBAAQ,QAAI,EAAS,SAC3C,eAA0C,QAA5B,EAAE,EAAY,sBAAc,QAAI,EAAS,eACvD,aAAsC,QAA1B,EAAE,EAAY,oBAAY,QAAI,EAAS,kB,GA3JZ,gBAA7C,6B,2ICqDU,G,6UA7GV,eAGA,QAEA,OAGA,OAqCA,QAOA,QACA,SACA,SAGM,EAAe,SAAC,EAAc,GAAf,OAAmC,OAAD,QAAC,IAAD,OAAC,EAAD,EAAG,GAAG,IAAK,EAAI,GAIzD,uBAAuB,GAEpC,IA0DY,EA1DN,EAAwC,UAAQ,KAAK,MACrD,EAAyC,UAAQ,KAAK,MAGtD,EAAY,aAEZ,EAAU,SAAU,EAAgB,GAA1B,OAA6C,SAAC,GAAD,OAAU,EAAE,EAAE,MAErE,EAAK,SAAI,GAAJ,OAAa,GAIlB,EAA0B,eAAC,EAAD,uDAA6B,GAA7B,OAAoC,SAAC,GAAD,OAClE,EAAI,IAAI,IAAQ,KAAO,KAAK,KAAK,KAAK,KAAK,EAA4B,OAInE,EAAkC,SAAC,GAAD,OAAoB,EAAI,IAAI,MAE9D,EAAwB,SAAC,GAAD,OAAoB,EAAI,IAAI,MAEpD,EAA+B,SAAC,GAAD,OAAoB,EAAI,IAAI,MAyBjE,SAAU,EAAe,GAAvB,IAAF,EAAE,OAAF,oBAAI,OAAJ,6BACE,UAAO,OAAO,UAAU,IAAwB,EAAsB,GADxE,WAGS,EAHT,gBAKI,OADM,EAAiB,KAAK,IAAI,EANJ,MAEhC,SAKU,EALV,OAOI,GAAuB,EAP3B,uDAYA,SAAY,GACR,EAAF,wCACE,EAAF,kCACE,EAAF,gCACE,EAAF,gCAJF,CAAY,wCAAe,KAO3B,IAAM,EAA2C,CAC/C,EAAgB,sBAChB,EAAgB,qBAChB,EAAgB,sBAwBZ,EAAU,SAAsB,EAAM,GAA5B,OAAqE,KAAK,GAQpF,EAA6B,SAAC,GAAD,OACjC,EAAQ,EAAO,SACf,EAAM,OAAS,YAAU,sBACzB,EAAQ,EAAO,WACf,EAA8B,SAAS,EAAM,SAOlC,E,8BAKT,SAAF,EAAY,GAAsC,uBAC5C,EAAJ,QAAO,EAAS,SAAW,EAAgB,uBAEvC,EAAJ,kCAAqB,EAAS,UACzB,KAAO,4BACZ,EAAK,sBAAwB,EAAS,QACtC,EAAK,SAAW,EANgC,E,YALC,QAArD,oC,IAuBa,E,WAUX,WACE,EACA,EACA,GAAkD,UAElD,KAAK,mBAAqB,EAC1B,KAAK,YAAc,EACnB,KAAK,OAAS,E,sCAGR,SAAa,GAA2C,WAC9D,OAAO,EACH,EAAW,OACT,qBAAmB,EAAY,KAAK,OAAO,IAAa,kBACtD,eAAa,EAAY,gBAAc,EAAK,iBAE9C,iBAAe,GACjB,oB,2DAGE,WAAyB,GAAzB,wFAES,KAAK,mBAAmB,KAAK,GAFtC,6EAIA,gBAAiB,OAJjB,oBAtEwB,EA2EE,MA1ElC,EAAQ,EAAO,SACf,EAAM,OAAS,YAAU,iBACzB,EAAQ,EAAO,WACf,EAAM,SAAW,EAAgB,mBAkEzB,0CAMO,KAAM,SANb,YASE,EAA0B,MAT5B,qBAUI,KAAM,UAVV,uBAWQ,IAAI,EAAJ,MAXR,iCAaS,KAAM,SAbf,qDAtEuB,IAAC,IAsExB,oB,0GAuBR,wFACS,KADT,SACiC,KAAK,mBAAmB,GADzD,iDACc,aADd,iE,6GAUA,aAAQ,IAAR,EAAQ,OAAR,oBAAU,OAAE,OAAZ,eAAc,KAAd,cACkB,KADlB,SAC0C,KAAK,qBADjC,KAAd,qBACQ,EADR,KACuB,aADvB,gBAGE,UAA0B,YAAnB,EAAQ,QAHjB,kBAIS,GAJK,KAAd,EAAc,IAAd,qC,6DA/DF,iCAuGA,IAAM,EAA4C,SAChD,EACA,G,QAKE,QAAuC,IAArC,EACE,MAAG,CACL,iBACiE,QADjD,EACM,OAApB,QAAoB,IAApB,OAAoB,EAApB,EAAsB,IAAI,UAAqC,QAAK,UAAQ,KACxE,kCAtPqC,IAwPxC,GACuC,kBAArC,GACqC,kBAArC,GACP,aAA4C,UAExC,MAAG,CACC,iBAAY,UAAQ,KAAK,GAC/B,kCA/P2C,IAiQxC,IACG,EAAwD,EAAxD,iBAAkB,EAAsC,EAAtC,kCAE1B,MAAO,CACL,sBACuB,IAArB,EACI,UAAQ,KAAK,GACkD,QAAhE,EAAqB,OAApB,QAAoB,IAApB,OAAoB,EAApB,EAAsB,IAAI,UAAqC,QAAK,UAAQ,KAElF,kCACmC,OAAjC,QAAiC,IAAjC,IA3QyC,KAwRpC,E,WA0BT,SAAF,EACE,EACA,EACA,EACA,GAAoB,UAEhB,KAAC,wBAA0B,EAC3B,KAAC,YAAc,EACf,KAAC,OAAS,OAEM,IAAhB,IACI,KAAD,YAAc,G,yDAKvB,wFACa,EADb,SAEU,iBAAe,KAAK,aAAa,gBAAgB,KAAK,yBAFhE,+BAGI,KAAK,YAHT,KAII,KAAK,OAJT,4F,6DA1CF,sC,IAwDa,E,8BAsBT,SAAF,EACE,EACA,EACA,EACA,EACA,GAEuC,oBAE/B,EAAiB,gBAAc,GAA/B,aAF+B,OAInC,EAAJ,YACE,EACA,GAEA,gBAAG,EAAH,EAAG,KAAH,OACE,EACG,cAAc,EAAM,cACpB,KAAI,oBAAG,KAAQ,EAAX,EAAW,SAAU,EAArB,EAAqB,QAAS,EAA9B,EAA8B,kBAAmB,EAAjD,EAAiD,qBAAjD,MAA+E,CAClF,oBAAqB,aAAW,GAChC,iBAAkB,aAAW,GAC7B,gBAAiB,aAAW,GAC5B,IAAK,aAAW,OACd,OAGL,oBAAsB,EACvB,EAAC,qBAAuB,EACxB,EAAC,YAAc,EAAqB,GAAG,GACvC,EAAC,gCAAkC,EAtBA,E,wDA0BzC,SACE,GAEM,IAAD,KAAK,gCACR,MAAM,IAAI,MACR,2GAKJ,OAAO,KAAK,gCAAgC,O,GAhEtC,GADV,8B,IAiFa,E,WAST,SAAF,EAAY,GAA+B,UACrC,KAAC,UAAY,E,gDAGX,SACN,GAEM,OAAC,IAAI,EACT,EACA,KAAK,UAAU,WACf,K,sCAII,SACN,EACA,EACA,GAAoB,IAEZ,EAAuB,gBAAc,KAAK,UAAU,YAApD,mBAEF,OAAC,IAAI,EACT,EACA,KAAK,UAAU,YAEf,YAAa,IAAV,EAAU,EAAV,KAAU,EACQ,EAChB,cAAc,EAAM,gBACpB,KAAI,oBAAG,KAAQ,EAAX,EAAW,MAAO,EAAlB,EAAkB,MAAlB,OAAgC,IAAI,QAAM,aAAW,GAAQ,aAAW,OAFxE,EADI,YAKG,EACX,cAAc,EAAM,wBACpB,KAAI,gBAAW,EAAX,EAAG,KAAQ,SAAX,OAA4B,aAAW,MAFvC,EALI,UASX,MAAO,CACL,SACA,WACU,IAAV,KAIJ,K,0DAII,WACN,GADM,kFAG4B,gBAAc,KAAK,UAAU,YAAvD,EAHF,EAGE,WAAY,EAHd,EAGc,UAHd,kBAKC,IAAI,EACT,EACA,KAAK,UAAU,YAEf,YAAgC,IAA7B,EAA6B,EAA7B,KAAY,EAAiB,EAAvB,KAAuB,EACV,EACjB,cAAc,EAAM,YACpB,QAAO,oBAAG,KAAQ,EAAX,EAAW,KAAM,EAAjB,EAAiB,GAAjB,OAA4B,IAAS,GAAe,IAAO,iBAClE,KAAI,gBAAW,EAAX,EAAG,KAAQ,MAAX,OAAyB,aAAW,MAHpC,EADuB,YAMD,EAC1B,cAAc,EAAM,aACpB,QAAO,qBAAG,KAAQ,MAAoB,KACtC,KAAI,gBAAW,EAAX,EAAG,KAAQ,QAAX,OAA2B,aAAW,MAHtC,EANuB,UAW9B,MAAO,CACL,OAAQ,EAAU,QAAU,CAAE,qBAAoB,aAAc,CAAE,2BArBlE,gD,qFA2BA,SACN,GAAmD,IAE3C,EAAiB,gBAAc,KAAK,UAAU,YAA9C,aAER,OAAO,IAAI,EACT,EACA,KAAK,UAAU,YAEf,YAAa,IAAV,EAAU,EAAV,KACK,EAAsB,EACzB,cAAc,EAAM,mBACpB,KAAI,qBAAG,KAAQ,aAHP,EAKM,EACd,cAAc,EAAM,eACpB,KACC,oBACE,KAAQ,EADV,EACU,qBAAsB,EADhC,EACgC,qBAAsB,EADtD,EACsD,gBAAiB,EADvE,EACuE,gBADvE,MAEO,CACL,0BAA2B,aAAW,GACtC,oBAAqB,aAAW,GAChC,gBAAiB,IAAI,QAAM,aAAW,GAAkB,aAAW,QARlE,EALI,UAiBX,UACE,uBACG,Q,yDAMH,SACN,GAAW,IAEH,EAAkB,gBAAc,KAAK,UAAU,YAA/C,cAFG,EAIc,EACtB,cAAc,EAAM,sBACpB,KAAI,gBAAW,EAAX,EAAG,KAAQ,YAAX,OAA+B,aAAW,MAF1C,EAJI,YAQ0B,EAClC,cAAc,EAAM,oBACpB,KAAI,oBAAG,KAAQ,EAAX,EAAW,KAAM,EAAjB,EAAiB,UAAjB,MAAmC,CAAC,aAAW,GAAO,aAAW,OAV7D,qBAQH,EARG,KAQa,EARb,OAYU,EAClB,cAAc,EAAM,uBACpB,KAAI,gBAAW,EAAX,EAAG,KAAQ,MAAX,OAAyB,aAAW,MAE3C,MAAO,CACL,WACA,iBACA,iBACA,WApBS,a,+CAwBL,SACN,GAAmD,WAEnD,OAAO,IAAI,EACT,EACA,KAAK,UAAU,YACf,gBAAG,EAAH,EAAG,KAAH,OAAc,EAAK,4CAA4C,Q,wCAI3D,SACN,EACA,GAAmD,WAEnD,OAAO,IAAI,EACT,EACA,KAAK,UAAU,YAEf,gBAAG,EAAH,EAAG,KAAH,cACK,EAAK,4CAA4C,IADtD,IAEE,gB,wEAKE,WACN,GADM,yFAG+B,gBAAc,KAAK,UAAU,YAA1D,EAHF,EAGE,cAAe,EAHjB,EAGiB,UAHjB,kBAKC,IAAI,EACT,EACA,KAAK,UAAU,YAEf,YAAgC,IAA7B,EAA6B,EAA7B,KAAY,EAAiB,EAAvB,KACD,EAAyB,EAAK,4CAA4C,GADlD,EAGP,EACpB,cAAc,EAAM,YACpB,QAAO,oBAAG,KAAQ,EAAX,EAAW,KAAM,EAAjB,EAAiB,GAAjB,OAA4B,IAAS,EAAc,SAAW,IAAO,KAC5E,KAAI,gBAAW,EAAX,EAAG,KAAQ,MAAX,OAAyB,aAAW,MAHpC,EAHuB,UAQ9B,cACK,GADL,IAEE,OAAQ,CAAE,eAAc,gBAAiB,EAAuB,eAAe,cAnB/E,gD,gGAyBA,SACN,GAAmD,WAE3C,EAAuB,gBAAc,KAAK,UAAU,YAApD,mBAER,OAAO,IAAI,EACT,EACA,KAAK,UAAU,YAEf,YAAa,IAAV,EAAU,EAAV,KAAU,EACQ,EAChB,cAAc,EAAM,gBACpB,KAAI,oBAAG,KAAQ,EAAX,EAAW,MAAO,EAAlB,EAAkB,MAAlB,OAAgC,IAAI,QAAM,aAAW,GAAQ,aAAW,OAFxE,EADI,UAKX,cACK,EAAK,4CAA4C,IADtD,IAEE,kB,4EAMA,WACN,EACA,GAFM,gHAIgC,gBAAc,KAAK,UAAU,YAA3D,EAJF,EAIE,aAAc,EAJhB,EAIgB,YAJhB,SAKuB,KAAK,UAAU,oBALtC,UAKA,EALA,gDAQG,CAAC,cAAa,gBARjB,WAWF,EAAuB,SAXrB,6BAYI,cAZJ,UAYuB,EAAa,WAZpC,yEAeA,EAAsB,KAAK,KAAK,GAAK,KAAK,KAAK,IAf/C,EAgBiC,EAAe,GAhBhD,OAgBC,EAhBD,KAgBiB,EAhBjB,WAkBA,EAAoB,WAQxB,GARwB,IAEtB,EAFsB,EAEtB,iBACA,EAHsB,EAGtB,QAHsB,OAUxB,EACG,cAAc,EAAuB,IAAK,EAAgB,GAC1D,MAAK,gBAAG,EAAH,EAAG,iBAAqB,EAAxB,gCAAsC,CAC1C,mBACA,QAAO,YAAM,GAAN,CAAe,SAhCtB,UAmCoB,EAAa,QACrC,SAAC,EAAG,GAAJ,OAAuB,EAAE,MAAK,YAAK,OAAI,EAAkB,EAAO,QAChE,EAAkB,CAAE,iBAxnBE,KAAK,MAAM,KAAK,SAAW,OAAO,kBAwnBD,QAAS,IAAM,IArClE,wBAmCE,EAnCF,EAmCE,QAnCF,EAwCkB,EAAQ,QAAO,SAAC,EAAG,GAAJ,OAAW,EAAE,KAAK,GAAG,EAAE,MAAQ,EAAI,KAAlE,EAxCF,EAwCE,YAxCF,UA0CmB,EAAa,mBACpC,EAAuB,IACvB,EACA,GA7CI,6BA0CD,EA1CC,KA0CK,EA1CL,MAgDF,EAhDE,oBAoDA,IAAS,EApDT,kCAqDW,EAAa,QAAQ,GArDhC,QAqDF,EArDE,kCAsDO,IAAS,EAtDhB,kCAuDW,EAAa,QAAQ,GAvDhC,QAuDF,EAvDE,sBA6DF,IAAS,cACX,EAAO,EACE,IAAS,gBAClB,EAAO,GAhEH,kBAmEC,CAAC,EAAM,IAnER,iD,4GAsEA,WAAiB,EAAc,GAA/B,oEACF,aAAiB,kCADf,sBAEE,IAAI,MAAM,yCAFZ,gCAKC,KAAK,oCAAoC,EAAM,wBAAyB,IALzE,gD,sHAQA,WACN,GADM,kGAWkB,gBAAc,KAAK,UAAU,YAA7C,EAXF,EAWE,YAXF,SAYc,KAAK,UAAU,WAZ7B,cAYA,EAZA,gBAkBI,EAAY,mBAAmB,EAAO,IAAK,EAAM,IAAK,wBAlB1D,mBAeJ,EAfI,EAeJ,oBACA,EAhBI,EAgBJ,0BACA,EAjBI,EAiBJ,qBAME,EAA0B,SAvBxB,sBAwBF,CAAC,cAAa,eAxBZ,yCAyBI,KAAK,oCACT,aAAW,IA1BX,mDAqBJ,EArBI,KAsBJ,EAtBI,uBA8BC,CACL,aAAW,GACX,EACA,EACA,EACA,IAnCI,iD,yGAwCR,WACE,EACA,EACA,GAHF,8IAKiC,gBAAc,KAAK,UAAU,YAApD,EALV,EAKU,mBAEF,EAAmB,0BAAwB,GACzC,EAAkC,EAAlC,kBAAmB,EAAe,EAAf,WAR7B,SAUqD,QAAQ,IAAI,CAC7D,KAAK,UAAU,kBACf,KAAK,UAAU,qBACf,KAAK,UAAU,WACf,KAAK,UAAU,aAdnB,gCAUS,EAVT,KAUe,EAVf,KAU+B,EAV/B,KAUsC,EAVtC,KAiBQ,EAAe,EAAM,+BAA+B,GAKpD,GAHA,EAAqB,SAAC,GAAD,OACzB,EAAK,EAAiB,EAAS,GAAc,kBAEC,GAC1C,EAAW,QAAM,OAAO,EAAkB,GAvBlD,UAwBsB,KAAK,WAAW,GAxBtC,WAwBQ,EAxBR,SA6BM,EACF,EACA,GAJA,EA3BJ,EA2BI,iBACA,EA5BJ,EA4BI,kCAMI,EAAW,SAAC,GAAD,OACf,EAAiB,IACjB,EAAW,KAFI,SAGZ,GAHY,IAIb,MAAO,EAAkB,KAAQ,WAKT,KAAf,OAAT,QAAS,IAAT,OAAS,EAAT,EAAW,UA3CjB,oBA4CU,EAAuB,EAAmB,GAAK,GAC/C,EAAe,QAAM,OAAO,EAAkB,GA7CxD,EA8CsD,QAAM,SACtD,EACA,GAFkB,EA9CxB,EA8CY,YAKJ,EAAa,KAAK,GAAG,qBAnD7B,uBAoDY,IAAI,MACR,wCAAiC,oBAAjC,sBACY,EADZ,aArDR,yBA0DqC,QAAQ,IAAI,EAC3C,IAAmB,aAAY,UAA/B,UAA4C,EAAS,MACrD,IAAmB,aAAY,UAA/B,UAA4C,EAAS,OA5D3D,0BA0DW,EA1DX,KA0DmB,EA1DnB,KA+DU,EAAW,EAAwB,EAAxB,CACf,EAAa,EAAgC,GAAS,IAGxD,EAAc,EAAS,IAAI,GAAQ,WACnC,EAAS,OAAQ,GAAR,IAAmB,aApEhC,oBAuES,KAvET,KAwEI,EAxEJ,WAyEU,IAAmB,qBAAoB,UAAvC,UAAoD,EAAS,KAzEvE,gCA0EI,EA1EJ,uBAuEc,yBAvEd,4E,8GA+EA,WACE,GADF,gFAGiC,gBAAc,KAAK,UAAU,YAApD,EAHV,EAGU,mBAHV,KAKS,KALT,SAMU,EAAmB,oBAAoB,WAAvC,KAAuD,GAAa,GAN9E,iDAKc,kBALd,iE,sFAWA,SACE,EACA,GAEA,OAAO,KAAK,YAAY,CAAE,kBAAmB,QAAU,EAAW,K,gCAIpE,SACE,EACA,GAEA,OAAO,KAAK,YAAY,CAAE,mBAAoB,QAAU,EAAW,K,wBAIrE,SACE,EACA,EACA,GAEA,OAAO,KAAK,YAAY,CAAE,WAAY,GAAU,EAAkB,K,uBAIpE,SACE,EACA,GAEA,OAAO,KAAK,YAAY,CAAE,UAAW,QAAU,EAAW,K,oDAI5D,WACE,EACA,EACA,GAHF,4IAKQ,EAAU,kBAAgB,KAAK,UAAU,WAAY,GAL7D,EAMiC,gBAAc,KAAK,UAAU,YAApD,EANV,EAMU,mBAEF,EAAmB,4BAA0B,GAC3C,EAAiE,EAAjE,kBAAmB,EAA8C,EAA9C,mBAAoB,EAA0B,EAA1B,WAAY,EAAc,EAAd,UAT7D,SAWiC,QAAQ,IAAI,CACzC,KAAK,UAAU,SAAS,GACxB,GACE,mBAAiB,CACf,KAAM,KAAK,UAAU,kBACrB,eAAgB,KAAK,UAAU,qBAC/B,MAAO,KAAK,UAAU,WACtB,MAAO,KAAK,UAAU,eAlB9B,gCAWS,EAXT,KAWgB,EAXhB,KA8BQ,GARA,EAAqB,SAAC,GAAD,OAClB,OAAP,QAAO,IAAP,OAAO,EAAP,EACI,KACA,EAAQ,eAAiB,EACzB,EAAQ,MAAM,+BAA+B,EAAQ,QAEtD,kBAE2C,GAC1C,EAAgB,EAAM,OAAO,EAAkB,GA/BvD,UAgCsB,KAAK,WAAW,EAAe,GAhCrD,WAgCQ,EAhCR,SAqCM,EACF,EACA,GAJA,EAnCJ,EAmCI,iBACA,EApCJ,EAoCI,kCAMI,EAAW,SAAC,G,MAA4E,OAC5F,EAAiB,KACE,OAAlB,QAAkB,IAAlB,IAAsB,UAAQ,MAAM,KACb,QAAxB,EAAW,OAAV,QAAU,IAAV,IAAc,SAAS,QAAI,UAAQ,MAAM,MACxC,GAJ0F,SAKzF,GALyF,IAM1F,MAAwB,OAAjB,QAAiB,IAAjB,OAAiB,EAAjB,EAAmB,KAAQ,WAKV,KAAf,OAAT,QAAS,IAAT,OAAS,EAAT,EAAW,UArDjB,oBAsDU,EAAuB,EAAmB,GAAK,GAC/C,EAAe,EAAM,OAAO,EAAkB,GAvDxD,EAwDsD,EAAM,SACtD,EACA,GAFkB,EAxDxB,EAwDY,YAKJ,EAAa,KAAK,GAAG,qBA7D7B,uBA8DY,IAAI,MACR,wCAAiC,oBAAjC,sBACY,EADZ,aA/DR,yBAoEqC,QAAQ,IAAI,EAC3C,IAAmB,aAAY,YAA/B,UAA8C,EAAS,KACvD,IACE,IAAmB,aAAY,YAA/B,UAA8C,EAAS,OAvE/D,0BAoEW,EApEX,KAoEmB,EApEnB,KA0EQ,EAAW,EAAa,EAAgC,GAAS,GAEjE,IACF,EAAW,EAAwB,EAAxB,CAA2D,IAGxE,EAAc,EAAS,IAAI,GAAQ,WACnC,EAAS,OAAQ,GAAR,IAAmB,aAjFhC,oBAoFS,KApFT,KAqFI,EArFJ,WAsFU,IAAmB,qBAAoB,YAAvC,UAAsD,EAAS,KAtFzE,gCAuFI,EAvFJ,uBAoFc,yBApFd,4E,0HA4FA,WACE,GADF,gFAGiC,gBAAc,KAAK,UAAU,YAApD,EAHV,EAGU,mBAHV,KAKS,KALT,SAMU,EAAmB,oBAAoB,gBAAvC,KAA4D,GAAa,GANnF,iDAKc,uBALd,iE,wGAWA,WACE,EACA,GAFF,4EAIwB,gBAAc,KAAK,UAAU,YAA3C,EAJV,EAIU,UAEH,sBAAoB,GAN3B,sBAOU,IAAI,MAAM,wDAPpB,mBAUS,KAVT,SAWU,EAAU,oBAAoB,SAA9B,KAA4C,GAAa,EAAI,UAAQ,KAAK,GAAO,KAX3F,iDAUc,uBAVd,iE,2GAgBA,WACE,EACA,GAFF,4EAI2B,gBAAc,KAAK,UAAU,YAA9C,EAJV,EAIU,cAEJ,MAAM,QAAQ,GANpB,4BAOW,KAPX,SAQY,EAAa,oBAAoB,qBAAjC,KACC,GACL,EACA,GAXR,iDAOgB,iBAPhB,oCAeW,KAfX,UAgBY,EAAa,oBAAoB,UAAjC,KACC,GACL,EACA,GAnBR,kDAegB,iBAfhB,kE,+GA0BA,WACE,EACA,GAFF,gFAI2B,gBAAc,KAAK,UAAU,YAA9C,EAJV,EAIU,aAJV,KAMS,KANT,SAOU,EAAa,oBAAoB,gBAAjC,KACC,GACL,EACA,GAVN,iDAMc,iBANd,iE,4HAgBA,WACE,EACA,EACA,GAHF,oFAK4B,gBAAc,KAAK,UAAU,YAA/C,EALV,EAKU,cACF,EAAc,UAAQ,KAAK,GANnC,KAQS,KART,KASI,CAAE,eATN,SAUU,EAAc,oBAAoB,YAAlC,KACC,GACL,EACA,EAAY,IACwC,QADrC,EACJ,OAAX,QAAW,IAAX,IAAe,KAAK,UAAU,WAAW,mBAAW,QAAI,eAd9D,iDAQc,2BARd,sE,iIAoBA,WACE,EACA,GAFF,gFAI4B,gBAAc,KAAK,UAAU,YAA/C,EAJV,EAIU,cAJV,KAMS,KANT,SAOU,EAAc,oBAAoB,eAAlC,KACC,GACL,EACA,UAAQ,KAAK,GAAQ,KAV3B,iDAMc,gCANd,iE,gIAgBA,WACE,GADF,gFAG4B,gBAAc,KAAK,UAAU,YAA/C,EAHV,EAGU,cAHV,KAKS,KALT,SAMU,EAAc,oBAAoB,eAAlC,KACC,GACL,EACA,UAAQ,KAAK,KATnB,iDAKc,kCALd,iE,6HAeA,WACE,GADF,4FAGQ,EAAU,kBAAgB,KAAK,UAAU,WAAY,GAH7D,EAI4B,gBAAc,KAAK,UAAU,YAA/C,EAJV,EAIU,cAJV,SAMiD,QAAQ,IAAI,CACzD,KAAK,UAAU,SAAS,GACxB,KAAK,UAAU,oBAAoB,KARvC,gCAMS,EANT,KAMuB,EANvB,KAWQ,EAAa,EAAa,cAAc,EAAiB,gBAXjE,KAaS,KAbT,MAcU,IAAc,qBAAoB,uBAd5C,kBAeW,GACL,EAAQ,EAAiC,IAhB/C,iBAiBgB,KAAK,WAAW,EAAY,GAjB5C,4KAac,4BAbd,kE,wGAuBA,WACE,EACA,EACA,GAHF,gFAKwB,gBAAc,KAAK,UAAU,YAA3C,EALV,EAKU,UALV,KAOS,KAPT,SAQU,EAAU,oBAAoB,SAA9B,KACC,GACL,EACA,EACA,UAAQ,KAAK,GAAQ,KAZ3B,iDAOc,uBAPd,iE,4GAkBA,WACE,EACA,EACA,GAHF,gFAKwB,gBAAc,KAAK,UAAU,YAA3C,EALV,EAKU,UALV,KAOS,KAPT,SAQU,EAAU,oBAAoB,SAA9B,KACC,GACL,EACA,EACA,UAAQ,KAAK,GAAQ,KAZ3B,iDAOc,uBAPd,iE,8GAkBA,WACE,EACA,EACA,GAHF,6GAK2B,gBAAc,KAAK,UAAU,YAA9C,EALV,EAKU,aACF,EAAsB,UAAQ,KAAK,GAN3C,SAYY,QAAQ,IAAI,CACpB,KAAK,UAAU,UACf,KAAK,UAAU,WACf,KAAK,qBAAqB,KAf9B,4BASI,EATJ,KAUI,EAVJ,eAWK,EAXL,KAWsB,EAXtB,KAW8C,EAX9C,YAkBM,EAAgB,OAlBtB,uBAmBU,IAAI,MAAJ,6DACkD,wBADlD,MAnBV,eAwBQ,EAA2B,SAAC,GAAD,OAC/B,UAAQ,IACN,EAAK,eAAe,EAAO,IAAI,EAAM,OAAO,IAAI,GAChD,UAAQ,MAGN,EA9BR,2BA8B6B,WACzB,EACA,GAFyB,8FAGzB,EAHyB,+BAGE,EAC3B,EAJyB,+BAIsB,CAAC,cAAa,cAAa,GAEpE,OACkB,IAAtB,EACI,UAAQ,KAAK,GACb,EAAyB,GATN,KAWd,EAXc,UAYjB,IAAa,qBAAoB,iBAAjC,cACC,GACL,IACA,EAAgB,IAChB,GAJI,SAKD,GALC,CAMJ,uBACA,EAA2B,OAnBN,+BAsBvB,EAAK,UAAU,WAtBQ,KAuBvB,EAvBuB,KAwBvB,EAxBuB,KA0BvB,EAAgB,GAAG,GACf,YAAoB,OAClB,EACE,EAAgB,IAAI,yBACA,OAApB,QAAoB,IAApB,IAAwB,SAE5B,EAhCmB,kGA9B7B,0EAkES,EAAmB,EAAqB,EAAmB,EAAiB,IAlErF,iD,6GAsEA,WACE,EACA,GAFF,gFAI0B,gBAAc,KAAK,UAAU,YAA7C,EAJV,EAIU,YAJV,KAMS,KANT,SAOU,EAAY,oBAAoB,MAAhC,KAA2C,GAAa,EAAI,UAAQ,KAAK,GAAQ,KAP3F,iDAMc,uBANd,iE,6GAYA,WACE,EACA,GAFF,gFAI0B,gBAAc,KAAK,UAAU,YAA7C,EAJV,EAIU,YAJV,KAMS,KANT,SAOU,EAAY,oBAAoB,QAAhC,KAA6C,GAAa,EAAI,UAAQ,KAAK,GAAQ,KAP7F,iDAMc,uBANd,iE,+FAYA,SACE,GAEA,OAAO,KAAK,YAAY,UAAQ,KAAM,K,yDAIxC,WACE,EACA,GAFF,gFAI4B,gBAAc,KAAK,UAAU,YAA/C,EAJV,EAIU,cAJV,KAMS,KANT,SAOU,EAAc,oBAAoB,iBAAlC,KACC,GACL,EACA,UAAQ,KAAK,GAAc,KAVjC,iDAMc,uBANd,iE,+GAgBA,WACE,EACA,EACA,GAHF,0EAKS,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,UAAU,WAAY,IALzD,EAMuB,gBAAc,KAAK,UAAU,YAA1C,EANV,EAMU,SAEH,kBAAgB,GARvB,sBASU,IAAI,MAAM,6DATpB,mBAYS,KAZT,SAaU,EAAS,oBAAoB,KAA7B,KACC,GACL,EACA,EACA,UAAQ,KAAK,GAAQ,KAjB3B,iDAYc,uBAZd,iE,oHAuBA,WACE,EACA,GAFF,kFAIgC,gBAAc,KAAK,UAAU,YAAnD,EAJV,EAIU,SAAU,EAJpB,EAIoB,QAJpB,KAMS,KANT,SAOU,EAAS,oBAAoB,QAA7B,KACC,GACL,EACA,EAAQ,QACR,UAAQ,KAAc,OAAT,QAAS,IAAT,IAAa,UAAQ,UAAU,KAXlD,iDAMc,uBANd,iE,gHAiBA,WACE,EACA,GAFF,gFAIsB,gBAAc,KAAK,UAAU,YAAzC,EAJV,EAIU,QAJV,KAMS,KANT,SAOU,EAAQ,oBAAoB,MAA5B,KACC,GACL,EACA,UAAQ,KAAK,GAAQ,KAV3B,iDAMc,uBANd,iE,kHAgBA,WACE,EACA,GAFF,gFAIsB,gBAAc,KAAK,UAAU,YAAzC,EAJV,EAIU,QAJV,KAMS,KANT,SAOU,EAAQ,oBAAoB,SAA5B,KACC,GACL,EACA,UAAQ,KAAK,GAAQ,KAV3B,iDAMc,uBANd,iE,uIAgBA,WACE,GADF,gFAGsB,gBAAc,KAAK,UAAU,YAAzC,EAHV,EAGU,QAHV,KAKS,KALT,SAMU,EAAQ,oBAAoB,YAA5B,KAA6C,GAAa,GANpE,iDAKc,uBALd,iE,mHAWA,WACE,GADF,gFAGsB,gBAAc,KAAK,UAAU,YAAzC,EAHV,EAGU,QAHV,KAKS,KALT,SAMU,EAAQ,oBAAoB,iBAA5B,KACC,GACL,GARN,iDAKc,uBALd,iE,8DA55BF,8B,gJCtcA,IAAM,EAAkB,SAAI,GAAJ,OAAiD,EAAG,QAO/D,E,WAIT,SAAF,EAAY,GAAqC,UAC/C,KAAK,UAAY,E,8DAInB,WACE,EACA,EACA,GAHF,wFAKS,KAAK,UACT,UAAU,EAAQ,EAAkC,GACpD,KAAK,IAPV,gD,mFAWA,SACE,GAEA,OAAO,KAAK,UAAU,WAAW,GAAW,KAAK,K,yBAInD,SACE,EACA,EACA,GAEA,OAAO,KAAK,UACT,YAAY,EAAQ,EAAkC,GACtD,KAAK,K,+BAIV,SACE,EACA,GAEA,OAAO,KAAK,UAAU,kBAAkB,EAAQ,GAAW,KAAK,K,gCAIlE,SACE,EACA,GAEA,OAAO,KAAK,UAAU,mBAAmB,EAAQ,GAAW,KAAK,K,wBAInE,SACE,EACA,EACA,GAEA,OAAO,KAAK,UAAU,WAAW,EAAQ,EAAkB,GAAW,KAAK,K,uBAI7E,SACE,EACA,GAEA,OAAO,KAAK,UAAU,UAAU,EAAQ,GAAW,KAAK,K,sBAI1D,SACE,EACA,GAEA,OAAO,KAAK,UAAU,SAAS,EAAO,GAAW,KAAK,K,uBAIxD,SACE,EACA,GAEA,OAAO,KAAK,UAAU,UAAU,EAAS,GAAW,KAAK,K,2BAI3D,SACE,EACA,GAEA,OAAO,KAAK,UACT,cAAc,EAAkC,GAChD,KAAK,K,wCAIV,SACE,EACA,EACA,GAEA,OAAO,KAAK,UACT,2BAA2B,EAAQ,EAAa,GAChD,KAAK,K,2CAIV,SACE,EACA,GAEA,OAAO,KAAK,UAAU,8BAA8B,EAAQ,GAAW,KAAK,K,4CAI9E,SACE,GAEA,OAAO,KAAK,UAAU,+BAA+B,GAAW,KAAK,K,2CAIvE,SACE,GAEA,OAAO,KAAK,UAAU,8BAA8B,GAAW,KAAK,K,sBAItE,SACE,EACA,EACA,GAEA,OAAO,KAAK,UAAU,SAAS,EAAW,EAAQ,GAAW,KAAK,K,sBAIpE,SACE,EACA,EACA,GAEA,OAAO,KAAK,UAAU,SAAS,EAAW,EAAQ,GAAW,KAAK,K,wBAIpE,SACE,EACA,EACA,GAEA,OAAO,KAAK,UAAU,WAAW,EAAQ,EAAmB,GAAW,KAAK,K,oCAI9E,SACE,GAEA,OAAO,KAAK,UAAU,uBAAuB,GAAW,KAAK,K,uBAI/D,SACE,EACA,GAEA,OAAO,KAAK,UAAU,UAAU,EAAQ,GAAW,KAAK,K,yBAI1D,SACE,EACA,GAEA,OAAO,KAAK,UAAU,YAAY,EAAQ,GAAW,KAAK,K,sCAI5D,SACE,GAEA,OAAO,KAAK,UAAU,yBAAyB,GAAW,KAAK,K,8BAIjE,SACE,EACA,GAEA,OAAO,KAAK,UAAU,iBAAiB,EAAc,GAAW,KAAK,K,2BAIvE,SACE,EACA,EACA,GAEA,OAAO,KAAK,UAAU,cAAc,EAAQ,EAAS,GAAW,KAAK,K,8BAIvE,SACE,EACA,GAEA,OAAO,KAAK,UAAU,iBAAiB,EAAW,GAAW,KAAK,K,4BAIpE,SACE,EACA,GAEA,OAAO,KAAK,UAAU,eAAe,EAAQ,GAAW,KAAK,K,8BAI/D,SACE,EACA,GAEA,OAAO,KAAK,UAAU,iBAAiB,EAAQ,GAAW,KAAK,K,mDAIjE,SACE,GAEA,OAAO,KAAK,UAAU,sCAAsC,GAAW,KAAK,K,iCAI9E,SACE,GAEA,OAAO,KAAK,UAAU,oBAAoB,GAAW,KAAK,O,KA9O9D,2B,yqBClCA,IAAI,EAAJ,QAEa,sBAAsB,qBAAwC,GAO9D,uBAA4D,YAIpE,IAHH,EAGG,EAHH,MACA,EAEG,EAFH,OACA,EACG,EADH,SACG,EACmC,aADnC,SACI,EADJ,KACiB,EADjB,KAcD,OAXA,EAAF,WAAU,WACR,EAAM,SAAW,kBAAM,EAAe,IACtC,IAAM,EAAO,EAAM,QAEnB,OAAO,WACL,EAAM,cAAW,EACjB,OAAe,GACf,OAED,CAAC,IAEC,EAIE,wBAAC,sBAAoB,SAAQ,CAAC,MAAO,GAAc,GAHjD,gDAAG,K,8FC3Bd,IAGM,EAAgB,SAAC,EAAkB,GACrC,IAAI,EAAQ,OAAO,KAAK,GACpB,EAAQ,OAAO,KAAK,GAE1B,OACE,EAAM,SAAW,EAAM,QACvB,EAAM,OAAM,YAAG,OATI,SAAC,EAAkB,GAAnB,OACrB,OAAO,UAAU,eAAe,KAAK,EAAG,GAQnB,CAAe,EAAG,IAAQ,OAAO,GAAG,EAAE,GAAM,EAAE,QAI/D,EAAW,SAAC,GAAD,OAA0C,OAAN,GAA2B,kBAAN,GAE7D,SAAS,SAAC,EAAY,GAAb,OACpB,EAAS,IAAM,EAAS,GAAK,EAAc,EAAG,GAAK,OAAO,GAAG,EAAG,K,kRClBlE,YAKA,QACA,OAEA,SAEM,EAAmB,CACrB,EAAC,6CACD,EAAC,6CACH,EAAG,6CACH,EAAG,6CACH,GAAI,8CAMA,EAAe,CACnB,CACI,KAAI,WACJ,KAAI,YACJ,gBAAe,aACf,UAAQ,EACR,SAAO,EAEP,OAAM,CACN,CACM,WAAQ,CACV,CACE,KAAM,SACN,KAAM,WAER,CACE,KAAM,WACN,KAAM,UAGN,KAAE,QACF,KAAE,YAIR,QAAO,CACP,CACE,KAAM,cACN,KAAM,WAER,CACE,KAAM,aACN,KAAM,aAKZ,CACI,KAAI,WACJ,KAAI,gBACJ,gBAAe,OACf,UAAQ,EACR,SAAO,EAEP,OAAM,CACN,CACE,KAAM,OACN,KAAM,YAIV,QAAS,CACP,CACE,KAAM,UACN,KAAM,cAsDR,EAAgB,SAAC,GAAD,YACC,IAArB,EAAQ,eAA+C,IAArB,EAAQ,eAA4C,IAAlB,EAAQ,OAExE,EAAc,SAAC,EAAqC,GAAtC,OAClB,EAAQ,KAAO,GACS,kBAAjB,EAAQ,MACf,EAAQ,KAAK,WAAW,eAOpB,EAA0B,GAEnB,oBAAoB,SAAC,GAAD,OAC/B,EAAiB,MAAK,YAAe,OAAI,aAAoB,MAElD,UAAU,SAAiD,GACpE,IAAI,EAAe,8BAAG,qC,2BACtB,gBAAkB,GAEZ,EAAN,SAAW,EAGL,EAAN,SArCoC,CAAE,MAAO,GAAI,UAAW,IAuCtD,EAAN,sBAAwB,EAClB,EAAN,qBAAuB,EATD,EAAH,+BAYnB,WACE,OAAO,KAAK,UAbK,IAgBnB,SAAY,GACF,GAAJ,KAAK,WACP,MAAM,IAAI,MAAM,8BApJH,SAAC,GAAD,OACnB,KAAW,GAsJH,CAAa,KACf,KAAK,WAAa,IAAI,WAAS,EAAiB,GAAU,EAAc,OAGlE,KAAH,SAAW,IAzBC,uDA4BnB,+FACyC,KAAK,SAApC,EADV,EACU,MAAO,EADjB,EACiB,UAAW,EAD5B,EAC4B,SAC1B,KAAK,SA7D6B,CAAE,MAAO,GAAI,UAAW,IA2D5D,WAMM,EAAM,OAAS,GANrB,gCAOgB,KAAK,WAAY,WAAW,UAAU,EAAO,CAAE,aAAY,MAC/D,YAAC,OAAI,EAAE,cARnB,mGAU4B,CAAE,GAAI,EAAM,GAAG,OAAQ,KAAM,EAAM,GAAG,UAAY,GAV9E,wCAKU,EALV,KAYI,EAAU,SAAQ,WAAY,GAAZ,OAAkB,EAAlB,WAA0B,EAAQ,OAZxD,kDAcI,EAAU,SAAQ,mBAAgB,EAAhB,WAAsB,SAd5C,0DA5BmB,gFA8CnB,SAAa,GAAiB,WAQ5B,YAPwB,IAApB,KAAK,YACP,aAAa,KAAK,YAGpB,KAAK,SAAS,MAAM,KAAK,GACzB,KAAK,WAAa,YAAW,kBAAM,EAAK,mBAAkB,KAAK,iBAExD,IAAI,SAAQ,SAAC,EAAS,GAAV,OAAqB,EAAK,SAAS,UAAU,KAAK,CAAC,EAAS,SAtD9D,8CAyDnB,SAAiC,G,MAC/B,OACiC,IAA/B,KAAK,SAAS,MAAM,SACX,OAAR,QAAQ,IAAR,IAAY,aAAqC,QAAvB,EAAC,KAAK,SAAS,gBAAQ,QAAI,YA5DvC,6CAgEnB,WACE,EACA,GAFF,gFAIO,KAAK,WAJZ,iFAKsB,EAAS,IAL/B,OAOU,GAAM,IAAI,MAAO,eAEY,IAA/B,KAAK,sBACP,KAAK,sBAAwB,EAEG,EAAM,KAAK,uBAEZ,KAAS,KAAK,uBAO3C,KAAK,sBAAwB,EAC7B,KAAK,qBAAuB,EAC5B,KAAK,sBAAwB,GAvBrC,uBA4BoD,QAAQ,IAAI,CAC5D,oBAAkB,GAClB,IA9BJ,4BA4BS,EA5BT,KA4B0B,EA5B1B,MAkCI,EAAY,EAAiB,KAAK,WAAW,UAC5C,EAAc,KACf,KAAK,iCAAiC,GApC1C,wBAsCI,KAAK,uBAtCT,0DAwCsB,EAAiB,IAxCvC,eA0CI,KAAK,wBAE8B,IAA/B,KAAK,SAAS,MAAM,SACtB,KAAK,SAAS,SAAW,GA7C/B,kBAgDW,KAAK,aAAa,CAAE,OAAQ,EAAgB,GAAK,SAAU,EAAgB,QAhDtF,iDAhEmB,4GAoHnB,WACE,EACA,GAFF,iGAI0D,QAAQ,IAAI,CAAC,EAAe,IAJtF,4BAIS,EAJT,KAIgC,EAJhC,KAMO,YAAU,IAA2B,KAAK,WANjD,uFAO4B,EAAuB,IAPnD,wBAU0B,KAAK,WAAW,UAAU,cAAc,EAAuB,CACrF,SAAU,IAXd,iCAUS,EAVT,uBAcS,GAdT,iDApHmB,8DAAiB,GAwItC,OAFA,EAAiB,KAAK,GAEf,GAGI,wCAAwC,UAAQ,mC,wYC/R7D,eAEA,QAEA,SAuNM,EAAuB,SAC3B,EACA,GAF2B,MAGD,CAC1B,KAAM,kBACN,eACI,MAAJ,IAGI,EAAgB,SAAI,GAAJ,MAA0D,CAC9E,KAAM,WACF,OAAJ,IAGI,EAAe,SAAI,GAAJ,MAAwD,CAC3E,KAAM,UACN,WAGI,EAAkB,SACtB,EACA,GAFsB,MAGE,CACxB,KAAM,aACN,SACI,UAAJ,IAGI,EAAiB,SAAI,GAAJ,YACR,IAAb,EAAM,IASF,EAA8D,CAClE,oBACA,cAeF,IAaM,EAAa,yBAAK,EAAL,KAAQ,EAAR,WAA8C,CAAC,EAAG,UAAQ,KAAK,KAC5E,EAAU,6BAAwC,QAG3C,0BAA0B,SACrC,GAEE,IAAI,EAAiB,OAAO,QAAQ,GAAQ,OAAO,GAInD,OApCJ,SACE,GAEE,IAAI,EAAU,EACb,QAAO,YAAI,IAAF,EAAF,UAAI,OAAO,EAAsC,SAAS,MACjE,KAAI,YAAI,IAAF,EAAF,UAAI,MAAJ,WAAa,EAAb,QAEL,GAAE,EAAQ,OAAS,EACnB,MAAM,IAAI,MAAJ,wCAA2C,EAAQ,KAAK,MAAxD,iBAyBN,CAA4B,GArBO,SACrC,GAEE,IAAI,EAAS,OAAO,YAAY,GAC5B,EAAc,EAAyB,QAAO,YAAC,QAAM,KAAK,MAAS,KAAI,YAAC,iBAAQ,EAAR,QAE5E,GAAE,EAAY,OAAS,EACnB,MAAE,IAAI,MAAJ,wCAA2C,EAAY,KAAK,MAA5D,aAGN,OAAK,EAcA,CAFgB,EAAe,IAAI,KAK5C,IAAM,EAAkE,CACtE,oBACA,qBACA,aACA,aAeF,IAuCM,EAAmC,SACvC,GAEA,IAAM,EAAS,OAAO,YAAY,GAI5B,EA9CqB,YAGiE,IAF5F,EAE4F,EAF5F,kBACA,EAC4F,EAD5F,mBAEE,QAAwB,IAAtB,QAA0D,IAAvB,EACrC,MAAM,IAAI,MACR,yGAKF,YAAwB,IAAtB,EACK,CAAE,0BAGgB,IAAvB,EACK,CAAE,2BADT,EA+BuB,CAAqB,GACxC,EA3Be,YAGiE,IAFtF,EAEsF,EAFtF,WACA,EACsF,EADtF,UAEE,QAAiB,IAAf,QAA0C,IAAd,EAC9B,MAAM,IAAI,MACR,yFAIF,YAAiB,IAAf,EACK,CAAE,mBAGO,IAAd,EACK,CAAE,kBADT,EAaiB,CAAe,GAElC,QAAyB,IAArB,QAAiD,IAAf,EACpC,cAAY,GAAqB,GAGnC,QAAyB,IAArB,EACF,OAAO,EAGP,QAAiB,IAAf,EACE,OAAG,EAGP,MAAI,IAAI,MAAM,wEAIL,4BAA4B,SACvC,GAEE,IAAI,EAAiB,OAAO,QAAQ,GAAQ,OAAO,IAhFvD,SACE,GAEE,IAAI,EAAU,EACb,QAAO,gBAAE,EAAF,iBAAW,EAAwC,SAAS,MACnE,KAAI,gBAAE,EAAF,2BAAa,EAAb,QAEL,GAAE,EAAQ,OAAS,EACnB,MAAM,IAAI,MAAJ,0CAA6C,EAAQ,KAAK,MAA1D,iBAyEN,CAA8B,GAC9B,IAAI,EAAiB,EAAe,IAAI,GAAY,OAAO,GAE7D,OAAO,EAAiC,IAG1C,IAAM,EAAW,SAAC,EAA2B,GAA5B,OACf,EAAa,IAAI,UAAQ,IAAI,IAAI,KAE7B,EAAa,SAAC,EAA2B,GAA5B,OACjB,EAAa,SAAS,UAAQ,IAAI,IAAI,KAElC,EAAqC,UAAQ,KAAK,KAO3C,E,WAQT,SAAF,IAA0D,IAA9C,EAA8C,uDAAjC,UAAQ,KAAM,EAAmB,uDAAZ,UAAQ,KAAI,UACpD,KAAC,WAAa,EACd,KAAC,KAAO,E,+BAGd,WACE,OAAO,KAAK,WAAW,QAAU,KAAK,KAAK,S,mBAS7C,WACE,GAAI,KAAK,KAAK,GAAG,4BACf,MAAM,IAAI,MAAJ,iDAAoD,6BAG5D,OAAO,KAAK,KAAK,IAAI,8B,mCAIvB,WACE,OAAO,KAAK,WAAW,OAAO,EAAoC,KAAK,Q,6BAIzE,SAAgB,GACd,OAAO,KAAK,WAAW,OAAO,EAAO,KAAK,Q,2CAU5C,SAA8B,GAC5B,OAAO,KAAK,gBAAgB,GAAO,GAAG,8B,4CAoBxC,SAA+B,GAC7B,OAAO,KAAK,gBAAgB,GAAO,GAAG,+B,sCAIxC,SAAyB,GACvB,OAAO,KAAK,gBAAgB,GAAO,IAAI,+B,sBAIzC,WACE,8BAAwB,KAAK,WAA7B,mBAAkD,KAAK,KAAvD,Q,oBAGF,SAAO,GACL,OAAO,KAAK,WAAW,GAAG,EAAK,aAAe,KAAK,KAAK,GAAG,EAAK,Q,iBAGlE,SAAI,GACF,OAAO,IAAI,EAAM,KAAK,WAAW,IAAI,EAAK,YAAa,KAAK,KAAK,IAAI,EAAK,S,2BAG5E,SAAc,GACZ,OAAO,IAAI,EAAM,KAAK,WAAW,IAAI,GAAa,KAAK,Q,qBAGzD,SAAQ,GACN,OAAO,IAAI,EAAM,KAAK,WAAY,KAAK,KAAK,IAAI,M,sBAGlD,SAAS,GAAW,IACV,EAAqB,EAArB,WAAY,EAAS,EAAT,KAEpB,OAAO,IAAI,EACT,KAAK,WAAW,GAAG,GAAc,KAAK,WAAW,IAAI,GAAc,UAAQ,KAC3E,KAAK,KAAK,GAAG,GAAQ,KAAK,KAAK,IAAI,GAAQ,UAAQ,Q,gCAIvD,SAAmB,GACjB,OAAO,IAAI,EACT,KAAK,WAAW,GAAG,GAAc,KAAK,WAAW,IAAI,GAAc,UAAQ,KAC3E,KAAK,Q,0BAIT,SAAa,GACX,OAAO,IAAI,EAAM,KAAK,WAAY,KAAK,KAAK,GAAG,GAAQ,KAAK,KAAK,IAAI,GAAQ,UAAQ,Q,sBAGvF,SAAS,GACP,OAAO,IAAI,EAAM,KAAK,WAAW,IAAI,GAAa,KAAK,KAAK,IAAI,M,2BAGlE,SAAc,GACZ,OAAO,IAAI,EAAM,UAAQ,KAAK,GAAa,KAAK,Q,qBAGlD,SAAQ,GACN,OAAO,IAAI,EAAM,KAAK,WAAY,UAAQ,KAAK,M,yBAGzC,WAA6B,GAAyB,IAAxC,EAAwC,EAAxC,KACpB,OAAO,EAAK,GAAG,KAAK,MAChB,CAAE,WAAY,EAAW,EAAe,EAAK,IAAI,KAAK,QACtD,CAAE,UAAW,KAAK,KAAK,IAAI,M,+BAGzB,YAAuC,IAAnB,EAAmB,EAAnB,WAC1B,OAAO,EAAW,GAAG,KAAK,YACtB,CAAE,kBAAmB,EAAW,IAAI,KAAK,aACzC,CAAE,mBAAoB,KAAK,WAAW,IAAI,M,yBAYhD,SACE,GACkD,I,EAAlD,EAAkD,uDAAtB,yBAE5B,IAAI,KAAK,WAAW,GAAG,EAAK,cAAe,KAAK,KAAK,GAAG,EAAK,MAI7D,OAAI,KAAK,QACH,EAAK,KAAK,GAAG,4BACR,EAAqB,EAAM,6BAG7B,EAAc,CACnB,kBAAmB,EAAK,WACxB,WAAY,EAAW,EAAe,EAAK,WAI3C,EAAK,QACA,EACL,KAAK,QAAQ,QACT,CAAE,mBAAoB,KAAK,WAAY,UAAW,KAAK,SACvD,CAAE,mBAAoB,KAAK,aAI5B,KAAK,WAAW,GAAG,EAAK,YAC3B,EAAyB,KAAK,YAAY,EAAM,GAAgB,EAAK,KAAK,MAAQ,QAClF,KAAK,KAAK,GAAG,EAAK,MAClB,EAAyB,KAAK,kBAAkB,GAAO,EAAK,WAAW,MAAQ,cAC/E,EAAe,OAER,KAAK,YAAY,EAAM,IACvB,KAAK,kBAAkB,IAEF,QADzB,EACA,EAAK,KAAK,MAAQ,cAAO,QAAK,EAAK,WAAW,MAAQ,gB,mBAU/D,SACE,GACkD,IAAlD,EAAkD,uDAAtB,yBAE5B,IAAK,EACH,OAAO,KAGT,OAAQ,EAAO,MACb,IAAK,kBACH,IAAK,KAAK,QACR,MAAM,IAAI,MAAM,oCAGlB,OAAO,EAAO,aAEhB,IAAK,WACH,IAAK,KAAK,QACR,MAAM,IAAI,MAAM,oCAFH,MAK2B,EAAO,OAAzC,EALO,EAKP,kBAAmB,EALZ,EAKY,WAE3B,OAAO,IAAI,EACT,EACA,2BAAyB,IAAI,EAAS,EAAe,KAIzD,IAAK,UACH,GAAI,KAAK,QACP,MAAM,IAAI,MAAM,2BAGlB,OAAO,cAET,IAAK,aAAc,IAEf,EAEE,EAFF,UAFe,EAIb,EADF,OAAU,EAHK,EAGL,kBAAmB,EAHd,EAGc,mBAAoB,EAHlC,EAGkC,WAAY,EAH9C,EAG8C,UAGzD,EAAuC,OAAlB,QAAkB,IAAlB,IAAsB,UAAQ,KACnD,EAAsC,OAAjB,QAAiB,IAAjB,IAAqB,UAAQ,KAClD,EAAwB,OAAT,QAAS,IAAT,IAAa,UAAQ,KACpC,EAAe,EAAa,EAAS,EAAe,GAAc,UAAQ,KAEhF,MAAqB,eAAd,EACH,KAAK,cAAc,UAAQ,MAAM,QAAQ,GAAc,aAAa,GACtD,SAAd,EACA,KAAK,QAAQ,UAAQ,MAClB,cAAc,GACd,mBAAmB,GACtB,KAAK,IAAI,IAAI,EAAM,EAAoB,IAAe,SACpD,IAAI,EAAM,EAAoB,O,oBAoC1C,SAAO,EAA2C,GAChD,OAAO,KAAK,MAAM,EAAgB,4BAA0B,IAAU,K,sBAUxE,SAAS,EAAa,GACpB,IAAM,EAAS,KAAK,YAAY,EAAM,GAEtC,OADA,UAAwB,gBAAX,OAAN,QAAM,IAAN,OAAM,EAAN,EAAQ,OACR,EAAO,U,qBAtChB,SAAc,EAAyC,GACrD,OAAO,cAAY,MAAM,EAAc,0BAAwB,IAAU,K,sBAU3E,SAAgB,EAAa,GAC3B,IAAM,EAAS,cAAY,YAAY,EAAM,GAE7C,OADA,UAAwB,cAAX,OAAN,QAAM,IAAN,OAAM,EAAN,EAAQ,OACR,EAAO,W,KAtRlB,UAmTa,cAAc,IAAI,E,IA2BlB,E,8BAQX,WAAY,EAAsB,EAAyB,EAAsB,GAAc,wBAC7F,cAAM,EAAY,IAEb,aAAe,EACpB,EAAK,OAAS,EAJ+E,E,gCAO/F,SAAO,GACL,OACE,0CAAa,IAAS,KAAK,eAAiB,EAAK,cAAgB,KAAK,SAAW,EAAK,S,sBAK1F,WACE,MACE,2BAAoB,KAAK,aAAzB,6BACiB,KAAK,YADtB,kBAEW,KAAK,MAFhB,qBAGc,KAAK,OAHnB,W,GAxByB,GAA/B,c,IA0Ca,E,8BAKX,WACE,EACA,EACA,EACA,GAE0C,MAD1C,EAC0C,uDADlC,UAAQ,KAChB,EAA0C,uDAAX,cAAW,kBAE1C,cAAM,EAAc,EAAQ,EAAY,IAEnC,MAAQ,EACb,EAAK,6BAA+B,EALM,E,6CAQ5C,SAAoB,GAClB,IAAM,EAAsB,KAAK,IAC/B,EAAmB,SAAS,KAAK,8BAA8B,SAAS,KAAK,QAG/E,OAAO,IAAI,EACT,KAAK,aACL,KAAK,OACL,EAAoB,WACpB,EAAoB,Q,oBAIxB,SAAO,GACL,OACE,0CAAa,IACb,KAAK,MAAM,GAAG,EAAK,QACnB,KAAK,6BAA6B,OAAO,EAAK,kC,GApCA,GAApD,oC,4HChxBA,YAgBa,E,WAuBT,SAAF,EACE,EACA,EACA,EACA,EACA,GAQI,GARe,UAEnB,KAAK,YAAc,EACnB,KAAK,YAAc,EACnB,KAAK,eAAiB,EACtB,KAAK,WAAa,EAClB,KAAK,YAAc,EAEf,KAAK,YAAY,GAAG,KAAK,aACrB,UAAI,MAAM,iD,+BAIpB,WACE,OACE,KAAK,YAAY,QACjB,KAAK,YAAY,QACjB,KAAK,eAAe,QACpB,KAAK,WAAW,S,sBAKpB,WACE,MACE,yBAAkB,KAAK,aAAvB,yBACkB,KAAK,aADvB,4BAEqB,KAAK,gBAF1B,wBAGiB,KAAK,YAHtB,0BAImB,KAAK,YAJxB,S,oBAWJ,SAAO,GACL,OACE,KAAK,YAAY,GAAG,EAAK,cACzB,KAAK,YAAY,GAAG,EAAK,cACzB,KAAK,eAAe,GAAG,EAAK,iBAC5B,KAAK,WAAW,GAAG,EAAK,aACxB,KAAK,cAAgB,EAAK,c,yBAS9B,SAAY,GAGV,OAFA,EAAW,UAAQ,KAAK,IAEX,GAAG,KAAK,aACZ,CAAE,aAAc,KAAK,YAAY,IAAI,GAAW,gBAAiB,EAAS,QAG/E,EAAS,GAAG,KAAK,aACZ,CAAE,YAAa,EAAS,IAAI,KAAK,mBAD1C,I,mBAUF,SAAM,GACJ,OAAK,OAIuB,IAAxB,EAAO,aACF,EAAO,iBAAmB,KAAK,YAAY,IAAI,EAAO,cACzD,UAAQ,KACR,KAAK,YAAY,IAAI,EAAO,cAEzB,KAAK,YAAY,IAAI,EAAO,aAR5B,KAAK,gB,KAlGlB,sB,qHChBA,YAmBa,E,WAWT,SAAF,IAA6F,IAAjF,EAAiF,uDAApE,UAAQ,KAAM,EAAsD,uDAArC,UAAQ,KAAM,EAAuB,uDAAZ,UAAQ,KAAI,UAC3F,KAAK,WAAa,EACd,KAAC,eAAiB,EAClB,KAAC,SAAW,E,+BAGlB,WACE,OAAO,KAAK,WAAW,QAAU,KAAK,eAAe,QAAU,KAAK,SAAS,S,sBAI/E,WACE,MACE,wBAAiB,KAAK,YAAtB,4BACqB,KAAK,gBAD1B,sBAEe,KAAK,SAFpB,Q,oBASJ,SAAO,GACL,OACE,KAAK,WAAW,GAAG,EAAK,aACxB,KAAK,eAAe,GAAG,EAAK,iBAC5B,KAAK,SAAS,GAAG,EAAK,Y,yBAS1B,SAAY,GAGJ,OAFN,EAAiB,UAAQ,KAAK,IAEX,GAAG,KAAK,YAClB,CACL,YAAa,KAAK,WAAW,IAAI,GACjC,eAAgB,EAAe,QAI/B,EAAe,GAAG,KAAK,YAClB,CAAE,UAAW,EAAe,IAAI,KAAK,kBAD9C,I,mBAUF,SAAM,GACJ,OAAK,OAIsB,IAAvB,EAAO,YACF,EAAO,gBAAkB,KAAK,WAAW,IAAI,EAAO,aACvD,UAAQ,KACR,KAAK,WAAW,IAAI,EAAO,aAExB,KAAK,WAAW,IAAI,EAAO,WAR3B,KAAK,e,KApElB,e,gMCnBA,eAEA,QAEA,SAca,E,WAST,SAAF,EACE,EACA,EACA,EACA,EACA,EACA,GAAqB,UAErB,KAAK,sBAAwB,UAAQ,KAAK,GACtC,KAAC,mBAAqB,UAAQ,KAAK,GACnC,KAAC,MAAQ,UAAQ,KAAK,GACtB,KAAC,kBAAoB,EACrB,KAAC,mBAAqB,EACtB,KAAC,cAAgB,EAErB,UAAO,KAAK,mBAAmB,GAAG,I,0CAIpC,SAAiB,GACT,OAAC,IAAI,EACT,KAAK,sBACL,KAAK,mBACL,KAAK,MACL,KAAK,kBACL,KAAK,mBACL,K,oBAOJ,SAAO,GACL,OACE,KAAK,sBAAsB,GAAG,EAAK,wBACnC,KAAK,mBAAmB,GAAG,EAAK,qBAChC,KAAK,MAAM,GAAG,EAAK,QACnB,KAAK,kBAAkB,YAAc,EAAK,kBAAkB,WAC5D,KAAK,mBAAmB,YAAc,EAAK,mBAAmB,WAC9D,KAAK,gBAAkB,EAAK,gB,sBAKhC,WACE,MACE,kCAA2B,KAAK,uBAAhC,+BACwB,KAAK,kBAAkB,iBAD/C,+BAEmB,KAAK,cAFxB,S,sBAOJ,WAAuC,IAA9B,EAA8B,uDAAvB,KAAK,mBACb,EAAoC,KAAK,IAC7C,EAAK,UAAY,KAAK,kBAAkB,UACxC,GAII,EAA+B,KAAK,MAAM,EAAoC,KAEpF,OAAO,KAAK,mBAAmB,IAAI,GAA8B,IAAI,KAAK,yB,2BAwB5E,SAAc,GACZ,OAAO,KAAK,cACR,UAAQ,KACR,UAAQ,IAAI,yBAAuB,IAAI,KAAK,SAAS,IAAQ,4B,4BAgCnE,WAA+E,IAAhE,EAAgE,uDAAzB,UAAQ,KAAM,EAAW,uCAC7E,EAA2B,UAAQ,KAAK,GACxC,IAAI,EAAW,KAAK,SAAS,GAM7B,OAJI,EAAyB,UAC3B,EAAW,EAAyB,IAAI,KAAK,OAAO,IAAI,IAGnD,UAAQ,IAAI,0BAAwB,IAAI,GAAW,UAAQ,S,KA3ItE,U,qTCRa,E,8BAIT,SAAF,EAAY,EAAc,EAAiB,GAAgB,wBACzD,cAAM,IACD,KAAO,EACZ,EAAK,cAAgB,EAHoC,E,YAJwB,QAArF,4B,yJC8Ca,kBAAkC,CAAE,OAAQ,WAgB5C,iBAAiB,SAAI,GAAJ,MAAyC,CACrE,OAAQ,SACR,eAyBW,qBAAqB,SAChC,EACA,EACA,GAHgC,UAKhC,OAAQ,YACR,aACA,WACI,EAAW,CAAE,YAAa,M,uSC3GhC,eAkLM,EAAe,SAAI,EAAM,GAAV,OAAmB,IAAM,GACxC,EAAK,SAAqC,EAAM,GAA3C,OAAoD,EAAE,GAAG,IAC9D,EAAS,SAAyC,EAAM,GAA/C,OAAwD,EAAE,OAAO,IAE1E,EAAuB,SAAC,EAAmB,GAApB,MACd,iBAAb,EAAE,OACe,iBAAb,EAAE,OACW,eAAb,EAAE,QAA2B,EAAE,aAAa,GAAG,EAAE,eAEjD,EAAqB,SAAC,GAAD,MACZ,iBAAb,EAAE,OACE,6BADJ,gDAE6C,EAAE,aAF/C,OAsBoB,E,WAApB,SAAF,IAAI,EAAJ,QAEE,cAAU,EAWA,cAAU,EAOZ,gBAAa,IAAI,I,6BAWzB,WACE,OAAO,OAAO,OAAO,GAAI,KAAK,WAAY,KAAK,cAAe,KAAK,e,mBAiBrE,WAAK,WACG,EAAS,KAAK,WAEpB,OAAO,WACL,IAEA,EAAK,8B,sCAID,gBACwB,IAA1B,KAAK,kBACP,aAAa,KAAK,oB,6BAId,WAAe,WACrB,KAAK,2BAEL,KAAK,iBAAmB,YAAW,WACjC,EAAK,sBAAmB,EACxB,EAAK,YACJ,O,wBAGG,SAAc,EAAc,EAAS,GAK3C,OAJI,KAAK,SACP,QAAQ,IAAR,UAAe,EAAf,uBAAkC,EAAO,EAAK,GAAQ,IAGjD,I,8BAGD,SACN,EACA,EACA,EACA,EACA,GAEA,YAAgB,IAAT,GAAuB,EAAO,EAAM,GAA4C,EAApC,KAAK,WAAW,EAAM,EAAM,K,sCAGzE,SAA4B,EAAiC,EAAS,GAC5E,YAAgB,IAAT,GAAuB,EAAO,EAAM,GAAe,EAAP,I,yBAG7C,SAAY,EAAc,EAAY,GAC5C,OAAI,IAAS,EAAK,OAAO,IAGnB,UAAG,KAAH,UAAiB,IACnB,KAAK,WAAW,EAAM,GAEjB,GAEA,I,qBAIH,SACN,EACA,GAEA,MAAO,CACL,SAAU,KAAK,iBACb,EACA,WACA,EAAU,SACV,EAAgB,SAChB,GAGF,YAAa,KAAK,iBAChB,EACA,cACA,EAAU,YACV,EAAgB,YAChB,GAGF,eAAgB,KAAK,iBACnB,EACA,iBACA,EAAU,eACV,EAAgB,gBAGlB,eAAgB,KAAK,iBACnB,EACA,iBACA,EAAU,eACV,EAAgB,gBAGlB,YAAa,KAAK,iBAChB,EACA,cACA,EAAU,YACV,EAAgB,aAGlB,YAAa,KAAK,iBAChB,EACA,cACA,EAAU,YACV,EAAgB,aAGlB,gBAAiB,KAAK,iBACpB,EACA,kBACA,EAAU,gBACV,EAAgB,iBAGlB,kBAAmB,KAAK,iBACtB,EACA,oBACA,EAAU,kBACV,EAAgB,mBAGlB,mCAAoC,KAAK,yBACvC,EACA,EAAU,mCACV,EAAgB,oCAGlB,qBAAsB,KAAK,iBACzB,EACA,uBACA,EAAU,qBACV,EAAgB,sBAGlB,qBAAsB,KAAK,iBACzB,EACA,uBACA,EAAU,qBACV,EAAgB,sBAGlB,0BAA2B,KAAK,yBAC9B,EACA,EAAU,0BACV,EAAgB,2BAGlB,yBAA0B,KAAK,iBAC7B,EACA,2BACA,EAAU,yBACV,EAAgB,0BAGlB,MAAO,KAAK,iBAAiB,EAAI,QAAS,EAAU,MAAO,EAAgB,OAE3E,oBAAqB,KAAK,iBACxB,EACA,sBACA,EAAU,oBACV,EAAgB,qBAGlB,MAAO,KAAK,iBAAiB,EAAQ,QAAS,EAAU,MAAO,EAAgB,OAE/E,mBAAoB,KAAK,iBACvB,EACA,qBACA,EAAU,mBACV,EAAgB,oBAGlB,0BAA2B,KAAK,iBAC9B,EACA,4BACA,EAAU,0BACV,EAAgB,2BAGlB,iBAAkB,KAAK,iBACrB,EACA,mBACA,EAAU,iBACV,EAAgB,kBAGlB,iCAAkC,KAAK,yBACrC,EACA,EAAU,iCACV,EAAgB,kCAGlB,kBAAmB,KAAK,yBACtB,EACA,EAAU,kBACV,EAAgB,mBAGlB,UAAW,KAAK,iBACd,EACA,YACA,EAAU,UACV,EAAgB,WAGlB,gBAAiB,KAAK,iBACpB,EACA,kBACA,EAAU,gBACV,EAAgB,iBAGlB,mCAAoC,KAAK,yBACvC,EACA,EAAU,mCACV,EAAgB,uC,qBAKd,YAOgB,IANtB,EAMsB,EANtB,0BACA,EAKsB,EALtB,mBACA,EAIsB,EAJtB,kBACA,EAGsB,EAHtB,MACA,EAEsB,EAFtB,MACA,EACsB,EADtB,mCAEM,EAAO,EAAkB,iBAAiB,EAAM,+BAA+B,IAErF,MAAO,CACL,MAAO,EAA0B,oBAAoB,GACrD,OACA,cAAe,EAAK,gBACpB,eAAgB,EAAK,iBACrB,8BAA+B,EAC5B,oBAAoB,GACpB,8BAA8B,M,4BAI7B,SACN,EACA,GAEA,MAAO,CACL,KAAM,KAAK,YAAY,OAAQ,EAAa,KAAM,EAAmB,MAErE,MAAO,KAAK,iBAAiB,EAAQ,QAAS,EAAa,MAAO,EAAmB,OAErF,cAAe,KAAK,yBAClB,EACA,EAAa,cACb,EAAmB,eAGrB,eAAgB,KAAK,yBACnB,EACA,EAAa,eACb,EAAmB,gBAGrB,8BAA+B,KAAK,iBAClC,EACA,gCACA,EAAa,8BACb,EAAmB,kC,qBAQjB,SAAQ,GAAqC,WAOnD,EAAI,KAAK,YAAY,SAAQ,YACvB,EAAK,WAAW,IAAI,IACtB,EAAS,Q,uBAWf,SAAU,GAAyD,IA3W/B,EA2W+B,OAC3D,GA5W4B,EA4WN,EA5W+B,kBAAgB,EAAC,WAAD,eAgX3E,OAFA,KAAK,WAAW,IAAI,GAEb,WACL,EAAK,WAAW,OAAO,M,mBAKjB,SAAM,EAAkC,GAChD,WAAQ,KAAK,SAEb,KAAK,WAAa,EAClB,KAAK,cAAgB,KAAK,QAAQ,GAClC,KAAK,YAAc,EACnB,KAAK,SAAU,EAEf,KAAK,kBAED,KAAK,UACP,KAAK,a,qBAKC,SACR,EACA,GAEA,UAAO,KAAK,YAAc,KAAK,eAE/B,IA1YmB,EAAM,EA0YnB,EAAW,KAAK,MAElB,IACF,KAAK,WAAa,KAAK,QAAQ,KAAK,WAAY,IAIlD,KAAK,cAAgB,KAAK,eAAe,KAAK,cAAe,KAAK,QAAQ,KAAK,aAE3E,IACF,UAAO,KAAK,aACZ,KAAK,YAAc,KAAK,aAAa,KAAK,YAAa,IAGzD,KAAK,kBAEL,KAAK,QAAQ,CACX,SAAU,KAAK,MACf,WACA,aA7ZiB,EA6ZO,KAAK,MA7ZN,EA6Za,EA5ZxC,OAAO,YACL,OAAO,QAAQC,GAAG,QAAO,yBAAE,EAAF,mBAA6B,EAA8B,c,KAcxF,kB,6KCrKa,E,WAKT,SAAF,EAAY,EAA8C,GAA2B,UACnF,KAAK,UAAY,EACjB,KAAK,OAAS,E,0EAGhB,2HAEqD,QAD5C,GACL,OAAK,QAAO,sBAAZ,kBAAiD,SACjD,OAAK,WAAU,sBAAf,YAHJ,gD,2HAOA,WACE,GADF,0GAEK,EAFL,iCAEK,EAFL,mCAKqE,QAD5D,GACL,OAAK,QAAO,6BAAZ,SAAyC,GAAzC,OAAqD,WAAY,SACjE,OAAK,WAAU,6BAAf,SAA4C,GAA5C,OAAwD,KAN5D,gD,wGAUA,WAAe,GAAf,4GAAoC,EAApC,iCAAoC,EAApC,0BACgE,QAAQ,IAAI,CACxE,KAAK,6BAAL,YAAkC,GAAlC,OAA8C,IAC9C,KAAK,sBAAL,WAA8B,KAHlC,gCACS,EADT,KACoC,EADpC,uBAMS,EAA0B,oBAAoB,IANvD,gD,iHASA,2HAEiD,QADxC,GACL,OAAK,QAAO,kBAAZ,kBAA6C,SAC7C,OAAK,WAAU,kBAAf,YAHJ,gD,uGAOA,aAAQ,IAAR,kBAAQ,OAAR,oBAAU,OAAV,sDAC6C,QAA3C,GAAO,OAAK,QAAO,SAAZ,kBAAoC,SAAI,OAAK,WAAU,SAAf,YADjD,gD,uGAIA,aAAQ,IAAR,kBAAQ,OAAR,oBAAU,OAAV,sDAC6C,QAA3C,GAAO,OAAK,QAAO,SAAZ,kBAAoC,SAAI,OAAK,WAAU,SAAf,YADjD,gD,kHAIA,WAA0B,GAA1B,0GAA+C,EAA/C,iCAA+C,EAA/C,mCAE4D,QADnD,GACL,OAAK,QAAO,oBAAZ,SAAgC,GAAhC,OAA4C,WAAY,SACxD,OAAK,WAAU,oBAAf,SAAmC,GAAnC,OAA+C,KAHnD,gD,mIAOA,2HAEmE,QAD1D,GACL,OAAK,QAAO,oCAAZ,kBAA+D,SAC/D,OAAK,WAAU,oCAAf,YAHJ,gD,qHAOA,2HAEsD,QAD7C,GACL,OAAK,QAAO,uBAAZ,kBAAkD,SAClD,OAAK,WAAU,uBAAf,YAHJ,gD,6GAOA,WAAqB,GAArB,0GAA0C,EAA1C,iCAA0C,EAA1C,mCAEuD,QAD9C,GACL,OAAK,QAAO,eAAZ,SAA2B,GAA3B,OAAuC,WAAY,SACnD,OAAK,WAAU,eAAf,SAA8B,GAA9B,OAA0C,KAH9C,gD,8GAOA,WAAqB,GAArB,0GAA0C,EAA1C,iCAA0C,EAA1C,mCAEuD,QAD9C,GACL,OAAK,QAAO,eAAZ,SAA2B,GAA3B,OAAuC,WAAY,SACnD,OAAK,WAAU,eAAf,SAA8B,GAA9B,OAA0C,KAH9C,gD,kHAOA,WAAyB,GAAzB,0GAA8C,EAA9C,iCAA8C,EAA9C,mCAE2D,QADlD,GACL,OAAK,QAAO,mBAAZ,SAA+B,GAA/B,OAA2C,WAAY,SACvD,OAAK,WAAU,mBAAf,SAAkC,GAAlC,OAA8C,KAHlD,gD,oHAOA,WAA2B,GAA3B,0GAAgD,EAAhD,iCAAgD,EAAhD,mCAE6D,QADpD,GACL,OAAK,QAAO,qBAAZ,SAAiC,GAAjC,OAA6C,WAAY,SACzD,OAAK,WAAU,qBAAf,SAAoC,GAApC,OAAgD,KAHpD,gD,qIAOA,2HAEqE,QAD5D,GACL,OAAK,QAAO,sCAAZ,kBAAiE,SACjE,OAAK,WAAU,sCAAf,YAHJ,gD,sHAOA,WAA8B,GAA9B,0GAAmD,EAAnD,iCAAmD,EAAnD,mCAEgE,QADvD,GACL,OAAK,QAAO,wBAAZ,SAAoC,GAApC,OAAgD,WAAY,SAC5D,OAAK,WAAU,wBAAf,SAAuC,GAAvC,OAAmD,KAHvD,gD,uHAOA,2HAEuD,QAD9C,GACL,OAAK,QAAO,wBAAZ,kBAAmD,SACnD,OAAK,WAAU,wBAAf,YAHJ,gD,2HAOA,WAAmC,GAAnC,0GAAwD,EAAxD,iCAAwD,EAAxD,mCAEqE,QAD5D,GACL,OAAK,QAAO,6BAAZ,SAAyC,GAAzC,OAAqD,WAAY,SACjE,OAAK,WAAU,6BAAf,SAA4C,GAA5C,OAAwD,KAH5D,gD,2HAOA,WAAkC,GAAlC,0GAAuD,EAAvD,iCAAuD,EAAvD,mCAEoE,QAD3D,GACL,OAAK,QAAO,4BAAZ,SAAwC,GAAxC,OAAoD,WAAY,SAChE,OAAK,WAAU,4BAAf,SAA2C,GAA3C,OAAuD,KAH3D,gD,yGAcA,WAAgB,GAAhB,2GACU,EAA0C,EAA1C,qBAAyB,EADnC,EACoD,EADpD,qCAA+C,EAA/C,iCAA+C,EAA/C,0BAG6C,QAAQ,IAAI,CACrD,OAAuB,EAAY,KAAK,sBAAL,WAA8B,GACqB,Q,GAAtF,OAAK,QAAO,UAAZ,YAAwB,sBAAsB,GAAS,IAAvD,OAA0E,WAAY,SACpF,OAAK,WAAU,UAAf,YAA2B,sBAAsB,GAAS,IAA1D,OAA6E,MANnF,4BAGS,EAHT,KAG6B,EAH7B,MASM,EATN,0CAUW,EAAO,KAAI,YAAK,OAAI,EAAM,oBAAoB,OAVzD,iCAYW,GAZX,iD,uGAgBA,2HAC4C,QAA1C,GAAO,OAAK,QAAO,QAAZ,kBAAmC,SAAI,OAAK,WAAU,QAAf,YADhD,gD,2GAIA,WAAmB,GAAnB,0GAAwC,EAAxC,iCAAwC,EAAxC,mCAEqD,QAD5C,GACL,OAAK,QAAO,aAAZ,SAAyB,GAAzB,OAAqC,WAAY,SACjD,OAAK,WAAU,aAAf,SAA4B,GAA5B,OAAwC,KAH5C,gD,kHAOA,2HAEkD,QADzC,GACL,OAAK,QAAO,mBAAZ,kBAA8C,SAC9C,OAAK,WAAU,mBAAf,YAHJ,gD,gHAOA,WAAwB,GAAxB,0GAA6C,EAA7C,iCAA6C,EAA7C,mCAE0D,QADjD,GACL,OAAK,QAAO,kBAAZ,SAA8B,GAA9B,OAA0C,WAAY,SACtD,OAAK,WAAU,kBAAf,SAAiC,GAAjC,OAA6C,KAHjD,gD,8DAhLF,4B,wjlHC1CA,YAIM,EAAe,CACnB,CACI,UAAQ,EACR,OAAM,GACN,KAAI,2BACJ,QAAO,CACP,CACE,KAAM,YACN,KAAM,YAGV,SAAS,EACT,gBAAiB,OACjB,KAAM,aAIJ,EAAmB,CACrB,EAAC,6CACH,EAAG,6CACH,EAAG,6CACH,EAAG,6CACD,GAAE,8CAUO,sBAAsB,SACjC,EACA,GAFiC,OAPd,SAAC,GAAD,OACnB,KAAW,EAUX,CAAa,GACP,IAAI,WACJ,EAAiB,GACjB,EACA,QAEF,I,kNCtCN,YAKM,EAAW,SAAC,GACd,IAAE,OAAuD,EACvD,EAAc,EAEhB,OAAK,WAAuB,MACtB,GAAK,EAAQ,UAAK,OAAS,GAAtB,gDAEe,IAAtB,EAAM,aAA6B,EAAM,YAAc,IACzD,EAAc,EAAM,kBAGJ,IAAd,GACF,aAAa,GAGX,EAAQ,YAAW,WACrB,EAAS,GACT,OAAY,IAnBQ,MAyBb,E,WAGT,SAAF,EAAY,GAA+B,UACzC,KAAK,UAAY,E,iDAGnB,SACE,GAAgE,aAE5B,gBAAc,KAAK,UAAU,YAAzD,EAFwD,EAExD,WAAY,EAF4C,EAE5C,YACd,EAAY,EAAW,QAAQ,YAE/B,EAAyB,GAAS,SAAC,GACvC,EAAK,UAAU,sBAAsB,CAAE,aAAY,KAAK,MAGpD,EAAoB,SAAC,EAAmB,EAAoB,GAC5D,IAAc,EAAY,SAC5B,EAAuB,IAM3B,OAFA,EAAW,GAAG,EAAW,GAElB,WACL,EAAW,eAAe,EAAW,M,sCAIzC,SACE,EACA,GAAgB,WAET,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,UAAU,aAF3B,MAI6B,gBAAc,KAAK,UAAU,YAAlE,EAJQ,EAIR,aAAc,EAJN,EAIM,mBAChB,EAA6B,EAAa,QAAQ,aAAa,GAC/D,EAAmC,EAAmB,QAAQ,aAAa,GAE3E,EAAgB,GAAS,SAAC,GAC9B,EAAK,UAAU,6BAA6B,EAAS,CAAE,aAAY,KAAK,MAMpE,OAHN,EAAa,GAAG,EAA4B,GAC5C,EAAmB,GAAG,EAAkC,GAEjD,WACL,EAAa,eAAe,EAA4B,GACxD,EAAmB,eAAe,EAAkC,M,iCAIxE,SAAoB,GAAyD,WACnE,EAAiB,gBAAc,KAAK,UAAU,YAA9C,aAEF,GAAe,EADI,EAAa,QAA9B,gBAGF,EAAuB,GAAS,SAAC,GACrC,EAAK,UAAU,kBAAkB,CAAE,aAAY,KAAK,MAKhD,OAFA,EAAO,GAAG,EAAc,GAEvB,WACL,EAAa,eAAe,EAAc,M,wBAK9C,SAAW,GAIT,MAAM,IAAI,MAAM,6B,wBAGlB,SAAW,GAAsC,WACvC,EAAiB,gBAAc,KAAK,UAAU,YAA9C,aAEF,GAAe,EADI,EAAa,QAA9B,gBAGF,EAAgB,GAAS,SAAC,GAC9B,EAAK,UAAU,SAAS,CAAE,aAAY,KAAK,MAK7C,OAFA,EAAa,GAAG,EAAc,GAEvB,WACL,EAAa,eAAe,EAAc,M,mCAI9C,SACE,EACA,GAAgB,WAET,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,UAAU,aAF3B,MAIsB,gBAAc,KAAK,UAAU,YAA3D,EAJQ,EAIR,WAAY,EAJJ,EAII,cACZ,EAAuB,EAAc,QAArC,mBACA,EAAc,EAAW,QAAzB,UAEF,EAAqB,EAAmB,GACxC,EAAY,IAEZ,EAAkB,GAAS,SAAC,GAChC,EAAK,UAAU,oBAAoB,EAAS,CAAE,aAAY,KAAK,MAG3D,EAAoB,SAAC,EAAmB,EAAoB,GAC5D,IAAc,EAAc,SAG9B,EAAgB,IAOpB,OAHA,EAAc,GAAG,EAAoB,GACrC,EAAW,GAAG,EAAW,GAElB,WACL,EAAc,eAAe,EAAoB,GACjD,EAAW,eAAe,EAAW,M,sCAIzC,SACE,GAAoE,aAE/B,gBAAc,KAAK,UAAU,YAA1D,EAF4D,EAE5D,UAAW,EAFiD,EAEjD,cACX,EAAa,EAAU,QAAvB,SAKF,EAA2B,CAHK,EAAS,EAAc,SACzB,EAAS,KAAM,EAAc,UAI3D,EAA4B,GAAS,SAAC,GAC1C,EAAK,UAAU,uBAAuB,CAAE,aAAY,KAAK,MAK3D,OAFA,EAAyB,SAAQ,YAAM,OAAI,EAAU,GAAG,EAAQ,MAEzD,kBACL,EAAyB,SAAQ,YAAM,OACrC,EAAU,eAAe,EAAQ,S,8BAIvC,SAAiB,EAAkD,GAAgB,WAC1E,OAAP,QAAO,IAAP,MAAY,kBAAgB,KAAK,UAAU,aADsC,IAGzE,EAAc,gBAAc,KAAK,UAAU,YAA3C,UACA,EAAa,EAAU,QAAvB,SAIF,EAAsB,CAHC,EAAS,GACX,EAAS,KAAM,IAIpC,EAAuB,GAAS,SAAC,GACrC,EAAK,UAAU,eAAe,EAAS,CAAE,aAAY,KAAK,MAK5D,OAFA,EAAoB,SAAQ,YAAM,OAAI,EAAU,GAAG,EAAQ,MAEpD,kBACL,EAAoB,SAAQ,YAAM,OAAI,EAAU,eAAe,EAAQ,W,KAvK7E,6B,kICvCA,YACA,QAIA,OAgDM,EAAY,SAChB,EACA,GAEE,IAAI,EAA0B,GAC1B,EAAsB,GAY1B,OAVF,EAAK,SAAQ,YACX,IAAM,EAvBY,SAAC,EAAU,GAA2D,IAClF,EAAY,EAAZ,QAER,GAAI,KAAW,EACb,IACE,MAAO,CAAE,UAAS,eAAgB,EAAgB,GAAS,SAAS,IACpE,MAAO,GACP,QAAQ,KAAK,wBACb,QAAQ,KAAK,GACP,QAAE,KAAK,WACb,QAAQ,KAAK,IAaG,CAAc,EAAK,GAEjC,EACF,EAAW,KAAK,GAEhB,EAAa,KAAK,MAIf,CAAC,EAAY,IAGhB,EAAW,YAAU,KAAK,IAAI,IAAI,GAoBlC,EAAyB,SAAC,EAAgC,GAC9D,IAAM,EAAgB,OAAO,QAAQ,EAAe,MACjD,QAAO,6BAAgB,MAAM,aAC7B,KAAI,yBAAE,EAAF,KAAO,EAAP,qBAAqB,EAArB,aArBQ,SAAC,EAAc,GAC5B,OAAE,YAAU,YAAY,GACpB,EAAI,IAAI,GACV,UAAU,UAAQ,oBAAoB,EAAI,eAA1C,OAEO,EAAI,WAEW,kBAAR,EACT,IAAQ,cACX,aACA,GAAc,KAAO,EACrB,EAAW,GACX,EAEG,OAAO,GAOoB,CAAS,EAAO,OAEpD,gBAAU,EAAe,KAAzB,cAAmC,EAAc,KAAK,MAAtD,QAGW,eAAe,SAAC,EAA6B,GACxD,IAAM,EAAkB,EAClB,EAlFoB,SAAC,GACzB,OAAK,OAAO,YACZ,OAAO,QAAQ,GAAgB,KAAI,gBAAI,EAAJ,gBAAkB,CAAC,EAAS,QAAS,EAAS,eAgF3D,CAAoB,GACtC,EA7Ee,SAAC,GACpB,OAAK,OAAO,YACZ,OAAO,QAAQ,GAAgB,KAAI,yBAAE,EAAF,WAAsB,CAAtB,KAAgC,QAAS,OA2EnD,CAAe,GAEpC,EAAU,OACb,EAAQ,KAAO,QACb,GAP2F,EAU7D,EAAU,EAAQ,KAAM,GAVqC,SAUzF,EAVyF,KAU7E,EAV6E,KAiBhG,OALI,EAAa,OAAS,IACxB,QAAQ,KAAK,qDACb,QAAQ,KAAK,IAGX,EAAW,OAAS,EAEpB,qBAAc,EAAQ,gBAAtB,OACA,EACG,KACC,gBAAG,EAAH,EAAG,QAAS,EAAZ,EAAY,eAAZ,kBACO,EAAmB,GAD1B,YACsC,EAAuB,EAAgB,OAE9E,KAAK,MAGV,oCAAoC,EAAQ,mB,uLC/HhD,WA2BA,QAgBA,SAKA,SACA,SAQa,E,8BAGT,SAAF,EAAY,EAAiB,GAAsD,6BAC3E,+BAAgC,EAAS,G,UAJD,0BAAlD,iCAQA,IAAM,EAAc,2BAAG,WAAU,GAAV,qFACC,EAAG,iBADJ,UAGE,eAFjB,EADe,QAGT,OAHS,sBAIb,IAAI,EAA6B,qBAAsB,GAJ1C,gCAOd,EAAQ,SAPM,2CAAH,sDAeP,E,WAaT,SAAF,EAAY,GAA+B,UACrC,KAAC,UAAYC,EACjB,KAAK,WAAa,EAAS,WAC3B,KAAK,SAAW,IAAI,2BAAyB,GAC7C,KAAK,KAAO,IAAI,wBAAsB,KAAK,U,kCAwD7C,WACE,OAAO,I,mCAIT,SAAsB,GACpB,OAAO,KAAK,UAAU,sBAAsB,K,0CAI9C,SACE,EACA,GAEA,OAAO,KAAK,UAAU,6BAA6B,EAAS,K,sBAI9D,SAAS,EAAkB,GACnB,OAAC,KAAK,UAAU,SAAS,EAAS,K,+BAI1C,SAAkB,GAChB,OAAO,KAAK,UAAU,kBAAkB,K,sBAI1C,SAAS,GACP,OAAO,KAAK,UAAU,SAAS,K,4BAIjC,SAAe,GACb,OAAO,KAAK,UAAU,eAAe,K,6BAIvC,SAAgB,GACd,OAAO,KAAK,UAAU,gBAAgB,K,sBAIxC,SAAS,GACP,OAAO,KAAK,UAAU,SAAS,K,iCAIjC,SAAoB,EAAkB,GACpC,OAAO,KAAK,UAAU,oBAAoB,EAAS,K,iDAIrD,SAAoC,GAClC,OAAO,KAAK,UAAU,oCAAoC,K,oCAI5D,SAAuB,GACrB,OAAO,KAAK,UAAU,uBAAuB,K,4BAI/C,SAAe,EAAkB,GAC/B,OAAO,KAAK,UAAU,eAAe,EAAS,K,4BAIhD,SAAe,EAAkB,GAC/B,OAAO,KAAK,UAAU,eAAe,EAAS,K,gCAIhD,SAAmB,EAAkB,GACnC,OAAO,KAAK,UAAU,mBAAmB,EAAS,K,kCAIpD,SAAqB,EAAkB,GACrC,OAAO,KAAK,UAAU,qBAAqB,EAAS,K,8DAItD,SACE,GAEA,OAAO,KAAK,UAAU,iDAAiD,K,mDAIzE,SAAsC,GACpC,OAAO,KAAK,UAAU,sCAAsC,K,qCAI9D,SAAwB,EAAkB,GACxC,OAAO,KAAK,UAAU,wBAAwB,EAAS,K,qCAIzD,SAAwB,GACtB,OAAO,KAAK,UAAU,wBAAwB,K,0CAIhD,SAA6B,EAAkB,GAC7C,OAAO,KAAK,UAAU,6BAA6B,EAAS,K,yCAI9D,SAA4B,EAAkB,GAC5C,OAAO,KAAK,UAAU,4BAA4B,EAAS,K,uBAY7D,SAAU,EAA4B,GACpC,OAAO,KAAK,UAAU,UAAU,EAAQ,K,gCAI1C,SAAmB,GACjB,OAAO,KAAK,UAAU,mBAAmB,K,6BAI3C,SACE,GAEA,OAAO,KAAK,UAAU,gBAAgB,K,qBAIxC,SAAQ,GACN,OAAO,KAAK,UAAU,QAAQ,K,0BAIhC,SAAa,EAAkB,GAC7B,OAAO,KAAK,UAAU,aAAa,EAAS,K,gCAI9C,SAAmB,GACjB,OAAO,KAAK,UAAU,mBAAmB,K,+BAI3C,SAAkB,EAAkB,GAClC,OAAO,KAAK,UAAU,kBAAkB,EAASF,K,uBAUnD,SACE,EACA,EACA,GAEA,OAAO,KAAK,KACT,UAAU,EAAQ,EAAkC,GACpD,KAAK,K,wBAUV,SAAW,GACT,OAAO,KAAK,KAAK,WAAW,GAAW,KAAK,K,yBAU9C,SACE,EACA,EACA,GAEA,OAAO,KAAK,KACT,YAAY,EAAQ,EAAkC,GACtD,KAAK,K,+BAUV,SACE,EACA,GAEA,OAAO,KAAK,KAAK,kBAAkB,EAAQ,GAAW,KAAK,K,gCAU7D,SACE,EACA,GAEA,OAAO,KAAK,KAAK,mBAAmB,EAAQ,GAAW,KAAK,K,wBAU9D,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,WAAW,EAAQ,EAAkB,GAAW,KAAK,K,uBAUxE,SACE,EACA,GAEA,OAAO,KAAK,KAAK,UAAU,EAAQ,GAAW,KAAK,K,sBAIrD,SAAS,EAAmB,GAC1B,OAAO,KAAK,KAAK,SAAS,EAAO,GAAW,KAAK,K,uBAUnD,SACE,EACA,GAEA,OAAO,KAAK,KAAK,UAAU,EAAS,GAAW,KAAK,K,2BAUtD,SACE,EACA,GAEA,OAAO,KAAK,KAAK,cAAc,EAAkC,GAAW,KAAK,K,wCAUnF,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,2BAA2B,EAAQ,EAAa,GAAW,KAAK,K,2CAUnF,SACE,EACA,GAEA,OAAO,KAAK,KAAK,8BAA8B,EAAQ,GAAW,KAAK,K,4CAUzE,SACE,GAEA,OAAO,KAAK,KAAK,+BAA+B,GAAW,KAAK,K,2CAUlE,SACE,GAEA,OAAO,KAAK,KAAK,8BAA8B,GAAW,KAAK,K,sBAUjE,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,SAAS,EAAW,EAAQ,GAAW,KAAK,K,sBAU/D,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,SAAS,EAAW,EAAQ,GAAW,KAAK,K,wBAU/D,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,WAAW,EAAQ,EAAmB,GAAW,KAAK,K,oCAUzE,SAAuB,GACrB,OAAO,KAAK,KAAK,uBAAuB,GAAW,KAAK,K,uBAU1D,SAAU,EAAoB,GAC5B,OAAO,KAAK,KAAK,UAAU,EAAQ,GAAW,KAAK,K,yBAUrD,SAAY,EAAoB,GAC9B,OAAO,KAAK,KAAK,YAAY,EAAQ,GAAW,KAAK,K,sCAUvD,SAAyB,GACvB,OAAO,KAAK,KAAK,yBAAyB,GAAW,KAAK,K,8BAU5D,SAAiB,EAA0B,GACzC,OAAO,KAAK,KAAK,iBAAiB,EAAc,GAAW,KAAK,K,2BAIlE,SACE,EACA,EACA,GAEA,OAAO,KAAK,KAAK,cAAc,EAAQ,EAAS,GAAW,KAAK,K,8BAUlE,SAAiB,EAAwB,GACvC,OAAO,KAAK,KAAK,iBAAiB,EAAW,GAAW,KAAK,K,4BAU/D,SAAe,EAAoB,GACjC,OAAO,KAAK,KAAK,eAAe,EAAQ,GAAW,KAAK,K,8BAU1D,SAAiB,EAAoB,GACnC,OAAO,KAAK,KAAK,iBAAiB,EAAQ,GAAW,KAAK,K,mDAU5D,SAAsC,GACpC,OAAO,KAAK,KAAK,sCAAsC,GAAW,KAAK,K,iCAUzE,SAAoB,GAClB,OAAO,KAAK,KAAK,oBAAoB,GAAW,KAAK,M,oBA1iBvD,SAAa,GACX,OAAI,cAAY,GACP,IAAI,EAAwB,wBAAsB,MAAM,IAExD,IAAI,EAAc,wBAAsB,MAAM,M,gDAsBzD,WACE,EACA,GAFF,2EAIS,EAJT,SAImC,WAAS,EAAkB,GAJ9D,iDAIuB,MAJvB,4D,gEAvDF,kB,IAslBM,E,8BAKJ,WAAY,GAA2C,wBACrD,cAAM,IAED,MAAQ,EAAS,MAH+B,E,kCAMvD,SAAS,GACP,YAAiB,IAAV,GAAuB,IAAU,KAAK,WAAW,a,GAXlD,I,oICzqBV,WAIA,SACA,SASa,oBAAoB,SAC/B,EACA,GAEE,IAAI,EAAQ,oBACR,EAAW,SAAO,GAClB,EAAQ,SAAO,EAAK,EAAM,QAHoB,EAI/B,cAAW,iBAAO,KAAK,IAAnC,EAJ2C,UAM9C,EAAW,eACf,SAAC,GACC,IAAM,EAAW,EAAO,EAAM,QAAS,GAElC,SAAO,EAAU,EAAM,WAC1B,EAAM,QAAU,EAChB,OAGJ,CAAC,IAaH,OAVA,aAAU,kBAAM,EAAM,WAAU,YAAM,OAAI,EAAQ,GAAG,KAAM,eAAkB,SAAY,CACvF,EACA,IAGE,EAAS,UAAY,IACvB,EAAM,QAAU,EAAK,EAAM,OAC3B,EAAS,QAAU,GAGd,CAAC,EAAM,QAAS,K,sHC7CzB,WAIA,SACA,SAEa,qBAAqB,SAAO,GACrC,IAAI,EAAQ,oBAD0E,EAEnE,cAAW,iBAAO,KAAK,IAAnC,EAF+E,UAcxF,OAVE,EAAF,WACE,WAAI,OACF,EAAM,WAAU,YAA2B,IAAxB,EAAwB,EAAxB,SAAU,EAAc,EAAd,SACtB,SAAO,EAAO,GAAW,EAAO,KACnC,SAGN,CAAC,EAAO,IAGH,EAAO,EAAM,S,0KCnBTG,EAAb,2JACE,WACMC,KAAKC,QACPD,KAAKE,UAAUF,KAAKG,gBAAgBC,SAH1C,oBAOE,WACMJ,KAAKC,QACPD,KAAKE,UAAUF,KAAKG,gBAAgBE,YAT1C,G,OAAsCC,GCIzBC,EAAW,IAAIC,IAAkB,CAC5CC,kBAAmB,CAAC,GAAI,UAGbC,EAAU,IAAIX,EAAiB,CAC1CY,KAAM,CAAEC,OAAQ,+CAChBC,gBARuB,MCClB,SAASC,IACd,IAAMC,EAAUC,cACVC,EAAiBD,YAAiB,WAExC,OAAOD,EAAQd,OAASc,EAAUE,E,WCHrB,SAASC,EAAT,GAAyC,IAAbC,EAAY,EAAZA,SACjClB,EAAWa,cAAXb,OAD6C,EAE6Ba,YAAa,WAA/EM,EAFqC,EAE7CnB,OAA8BoB,EAFe,EAEtBC,MAA+BC,EAFT,EAEDC,SAG9CC,EDCD,WAA4B,IAAD,EACHT,cAArBQ,EADwB,EACxBA,SAAUvB,EADc,EACdA,OADc,EAGNyB,oBAAS,GAHH,mBAGzBC,EAHyB,KAGlBC,EAHkB,KAwBhC,OAnBAC,qBAAU,WACRtB,EAASuB,eAAeC,MAAK,SAAAD,GACvBA,EACFN,EAASjB,OAAUyB,GAAW,GAAMC,OAAM,WACxCL,GAAS,MAGXA,GAAS,QAGZ,CAACJ,IAGJK,qBAAU,WACJ5B,GACF2B,GAAS,KAEV,CAAC3B,IAEG0B,ECzBYO,GAInBL,qBAAU,YACJJ,GAAeL,GAAkBC,GAAiBpB,GACpDsB,EAAgBb,KAEjB,CAACe,EAAYL,EAAeC,EAAcE,EAAiBtB,IDwBzD,WAAgD,IAAnBkC,EAAkB,0DAChBnB,cAA5Bf,EAD4C,EAC5CA,OAAQqB,EADoC,EACpCA,MAAOE,EAD6B,EAC7BA,SAEvBK,qBAAU,WAAO,IACPO,EAAaC,OAAbD,SAER,GAAIA,GAAYA,EAASE,KAAOrC,IAAWqB,IAAUa,EAAU,CAC7D,IAAMI,EAAuB,WAE3Bf,EAASjB,OAAUyB,GAAW,GAAMC,OAAM,gBAGtCO,EAAwB,SAAAC,GACxBA,EAASC,OAAS,GAEpBlB,EAASjB,OAAUyB,GAAW,GAAMC,OAAM,gBAO9C,OAHAG,EAASE,GAAG,iBAAkBC,GAC9BH,EAASE,GAAG,kBAAmBE,GAExB,WACLJ,EAASO,eAAe,iBAAkBJ,GAC1CH,EAASO,eAAe,kBAAmBH,IAI/C,OAAO,eACN,CAACvC,EAAQqB,EAAOa,EAAUX,IClD7BoB,EAAqBnB,GAhBgC,MAmBjBC,oBAAS,GAnBQ,mBAmB9CmB,EAnB8C,KAmBlCC,EAnBkC,KA+BrD,OAXAjB,qBAAU,WACR,IAAMkB,EAAUC,YAAW,WACzBF,GAAc,KACb,KAEH,OAAO,WACLG,aAAaF,MAEd,IAGEtB,GAKAxB,GAAUoB,EAET,4BAAI,kBAAoBA,IAKzBpB,GAAWmB,EAMTD,EALE0B,EACL,4BAAI,YACF,KAdG,K,8FC7BLK,EAAuC,CAC3CC,YAAaC,KAGf,SAASC,EAAyBC,EAAWC,GAC3C,OAAOA,KAAKD,EAGd,IAAME,EAAc,SAACC,GACnB,IAAMC,EAAM,eAAQR,GAEpB,GAAoB,kBAATO,GAA8B,OAATA,EAAe,CAC7C,GAAIJ,EAAOI,EAAM,gBAAuC,KAArBA,EAAKN,YAAoB,CAAC,IACnDA,EAAgBM,EAAhBN,YAEmB,kBAAhBA,GAA4BQ,oBAAUR,GAC/CO,EAAOP,YAAcS,qBAAWT,IAEhCU,QAAQvC,MAAM,0BACduC,QAAQC,IAAIX,IAIhB,GAAIE,EAAOI,EAAM,iBAAyC,KAAtBA,EAAKM,aAAqB,CAAC,IACrDA,EAAiBN,EAAjBM,aAEoB,kBAAjBA,EACTL,EAAOK,aAAeA,GAEtBF,QAAQvC,MAAM,2BACduC,QAAQC,IAAIC,IAIhB,GAAIV,EAAOI,EAAM,eAAgB,CAAC,IACxBO,EAAgBP,EAAhBO,YAEmB,mBAAhBA,EACTN,EAAOM,YAAcA,GAErBH,QAAQvC,MAAM,0BACduC,QAAQC,IAAIE,UAIhBH,QAAQvC,MAAM,qBACduC,QAAQC,IAAIL,GAGd,OAAOC,GAGLO,OAA4DjC,EAE1DkC,EAAW,uCAAG,4BAAArE,EAAA,+EAEOsE,MAAM,eAFb,WAEVC,EAFU,QAIFC,GAJE,sBAKR,IAAIC,MAAJ,8CAAiDF,EAASG,OAA1D,MALQ,mBAQTf,EARS,SAQSY,EAASX,OARlB,qGAUhBI,QAAQvC,MAAR,MAVgB,iCAWJ4B,IAXI,0DAAH,qDAeJsB,EAAY,WAKvB,OAJKP,IACHA,EAAgBC,KAGXD,GC7DHQ,EAAiBC,6BAA+C1C,GAahE2C,EAA+C,CACjDC,SAAU,CAAEC,QAAS,OAAQC,KAAM,aAgCjCC,EAA0B,CAAC,IAC3BC,EAA6B,CAAC,YAIvBC,EAAkD,SAAC,GAKzD,IAJL9D,EAII,EAJJA,SACA+D,EAGI,EAHJA,OACAC,EAEI,EAFJA,2BACAC,EACI,EADJA,2BACI,EAC4CtE,IAA/BuE,EADb,EACIC,QAAmBC,EADvB,EACuBA,QAASV,EADhC,EACgCA,QADhC,EAEwBnD,qBAFxB,mBAEGgC,EAFH,KAEW8B,EAFX,KAIJ3B,QAAQC,IAAI,CAACuB,WAAUE,UAASV,YAEhC,IAAMY,EAAaC,mBAAQ,WACzB,GAAIhC,GAAU2B,GAAYR,EAAS,CACjC,IAAIc,EAAcJ,GAAW,6CAC7B,IACE,OAAOK,4BAAkBP,EAAUA,EAASQ,UAAUF,GAAcd,EAAS,CAC3EiB,YAAaH,EACbxC,YAAaO,EAAOP,YACpB4C,SAAU,gBAEZ,cAEH,CAACrC,EAAQ2B,EAAUE,EAASV,IAoC/B,GAlCAhD,qBAAU,WACR2C,IAAYzC,KAAKyD,KAChB,IAEH3D,qBAAU,WACR,GAAI6B,GAAU+B,EAAY,CAAC,IACjBJ,EAAsBI,EAAtBJ,SAAUR,EAAYY,EAAZZ,QAMlB,GAJImB,4BAAkBX,IAAaA,EAASR,UAAYA,IACtDQ,EAASR,QAAUA,GAGjBoB,uCAA6BZ,GAAW,CAC1C,IAAM3E,EAvEK,SAACA,GAChB,GAAwB,kBAAbA,EAAuB,CAC9B,IAAMwF,EAAWC,OAAOC,OAAOzB,GAAiB0B,MAAK,SAACC,GAAD,OAAkBA,EAAIzB,UAAYnE,KACvF,GAAIwF,EACA,MAAO,CACHpB,KAAMoB,EAASpB,KACfD,QAASqB,EAASrB,QAClB0B,WAAaL,EAASK,iBAAcvE,EACpCwE,iBAAmBN,EAASM,uBAAoBxE,GAI5D,GAAwB,kBAAbtB,EAAuB,CAC9B,IAAMwF,EAAWvB,EAAgBjE,GACjC,GAAIwF,EACA,MAAO,CACHpB,KAAMoB,EAASpB,KACfD,QAASqB,EAASrB,QAClB0B,WAAaL,EAASK,iBAAcvE,EACpCwE,iBAAmBN,EAASM,uBAAoBxE,GAK5D,OAAOyE,YAAiB/F,GA+CJgG,CAAW7B,GAc3B,OAXEnE,EAAQoE,MACRC,EAAwB4B,SAASjG,EAAQoE,OACzCpB,EAAOK,aAEPsB,EAASuB,cAAT,MAAAvB,EAAQ,YAvFD,SAAC3E,EAAiBqD,GAAlB,MAA6D,CAAC,SAAD,OACvD,cAAZrD,EAA0B,UAAYA,EAD6B,4BACFqD,GAC1ErD,GAqFkCmG,CAASnG,EAAQoE,KAAMpB,EAAOK,gBAC/CiB,EAA2B2B,SAASjG,EAAQoE,MACrDO,EAASuB,cAAT,4CAAoE/B,GAC3DY,EAAWqB,QACpBzB,EAASuB,cAAT,eAA+BvE,OAAO0E,SAASC,SAA/C,SAAgEnC,GAG3D,WACLQ,EAAS4B,sBAId,CAACvD,EAAQ+B,KAEP/B,IAAW2B,IAAaR,EAC3B,OAAO,mCAAGK,IAGZ,GAAIxB,EAAOM,aAA2B,IAAZa,EACxB,OAAO,mCAAGO,IAGZ,IAAKK,EACH,OAAON,EAA6B,mCAAGA,EAA2BN,KAAe,KAGnF,IAAMqC,EAAUC,gBAAcC,MAAM3B,GAGpC,OAFAyB,EAAQG,MAAMC,SAAU,EAGtB,cAAC7C,EAAe8C,SAAhB,CAAyBC,MAAO,CAAE9D,SAAQ6B,UAASF,WAAU6B,WAA7D,SACG/F,KAKMsG,EAAa,WACxB,IAAMC,EAAiBC,qBAAWlD,GAElC,IAAKiD,EACH,MAAM,IAAIpD,MAAM,yDAGlB,OAAOoD,G,4EC9HTpC,IAAQsC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGF,IAAMC,GAAU,SAAC5E,GACf,OAAQA,GACN,IAAK,YACH,MAAO,CAAC,MAAO,aACjB,IAAK,kBACH,MAAO,CAAC,MAAO,mBACjB,QACE,OAAOA,IAQA6E,GAA4B,SAAC,GAAD,IAAG7E,EAAH,EAAGA,KAAM8E,EAAT,EAASA,MAAUC,EAAnB,uCACvC,cAAC,IAAD,aAAiBD,MAAOA,EAAOE,KAAMJ,GAAQ5E,IAAW+E,K,UCjEnD,SAASE,GAAT,GAIc,IAHnB5I,EAGkB,EAHlBA,SACA6I,EAEkB,EAFlBA,QAEkB,IADlBC,iBACkB,MADN,MACM,EACZC,EAAQC,mBADI,EAEMzI,oBAAS,GAFf,mBAEX0I,EAFW,KAELC,EAFK,OAG8B3I,qBAH9B,mBAGX4I,EAHW,KAGOC,EAHP,OAIwB7I,qBAJxB,mBAIX8I,EAJW,KAIIC,EAJJ,OAMaC,aAAUJ,EAAkBE,EAAe,CAAEP,cAApEU,EANU,EAMVA,OAAQC,EANE,EAMFA,WAEhB,OACE,qCACGC,IAAMC,aAAaD,IAAME,SAASC,KAAQ7J,GAAW,CAIpD8J,YAAa,WACXf,EAAMgB,QAAU,OAEXd,GACHC,GAAQ,IAIZc,WAAY,WACVjB,EAAMgB,QAAU,MAEhBlI,YAAW,WACa,QAAlBkH,EAAMgB,SACRb,GAAQ,KAET,IAGLe,IAAKb,IAGNH,GACC,cAAC,IAAD,yBAAMiB,QAAQ,UAAUD,IAAKX,EAAkBb,MAAOe,EAAOW,QAAYV,EAAWU,QAApF,aACGtB,QCzCX,IAEMuB,GAA2B,CAC/BC,cAAe,OACfC,UAAW,QACXC,WAAY,6BAGRC,GAAe,CACnBC,YATkB,GAUlBjB,OAAQkB,YAAY,2BACfN,IADc,IAEjBO,uBAAwB,OAItBC,GAAe,CACnBH,YAjBkB,GAkBlBjB,OAAQkB,YAAY,2BACfN,IADc,IAEjBO,uBAAwB,QAiDtBE,GAAqBnB,IAAMnG,mBAE/B1C,GAEWiK,GAAgC,SAAC,GAAkB,IAAhB9K,EAAe,EAAfA,SACxC+K,EAAmBxK,mBAA2B,CAAEyK,KAAM,SAC5D,OACE,cAACH,GAAmBzE,SAApB,CAA6BC,MAAO0E,EAApC,SAAuD/K,KAIrDiL,GAAsB,WAC1B,IAAMF,EAAmBvE,qBAAWqE,IAEpC,IAAKE,EACH,MAAM,IAAI5H,MAAM,iEAGlB,OAAO4H,GAGIG,GAAwB,SAACC,GAA6C,IAAD,EACrDF,KAApBF,EADyE,oBAGhF,MAAiC,SAA1BA,EAAiBC,OACL,kBAATG,EAAoBJ,EAAiBK,KAAOD,EAAOJ,EAAiBK,GAAGC,MAAMF,IACnFJ,EACA,CAAEC,KAAM,SAkCDM,GAAyB,SACpCF,EACAG,GACgF,IAAD,EAC/BN,KAD+B,mBACxEF,EADwE,KACtDS,EADsD,KA6B/E,MAAO,CA1BiBC,sBAAW,sBAAC,4BAAA/M,EAAA,6DAClC8M,EAAoB,CAAER,KAAM,qBAAsBI,OADhB,kBAIfG,IAJe,OAI1BG,EAJ0B,OAMhCF,EAAoB,CAClBR,KAAM,yBACNI,KACAM,OAT8B,gDApCnB,kBADCvL,EAiDC,EAAD,KA/CR,OAAVA,GACA,YAAaA,GACsC,kBAA3CA,EAA+B0I,SA6CV,KAAMA,QAAQrD,SAAS,qCAC9CgG,EAAoB,CAAER,KAAM,YAAaI,QAEzC1I,QAAQvC,MAAR,MAEAqL,EAAoB,CAClBR,KAAM,SACNI,KACAjL,MAAO,IAAIgD,MAAM,6CApBW,kCArCnB,IAAChD,IAqCkB,oBAwBjC,CAACoL,EAAMH,EAAII,IAEWT,IAGpB,SAASY,GAAT,GAQkB,IAAD,EAPtBP,EAOsB,EAPtBA,GACAQ,EAMsB,EANtBA,QACAC,EAKsB,EALtBA,iBACAC,EAIsB,EAJtBA,YACAC,EAGsB,EAHtBA,SACAR,EAEsB,EAFtBA,KACAvL,EACsB,EADtBA,SACsB,EACsBsL,GAAuBF,EAAIG,GADjD,mBACfS,EADe,KACEjB,EADF,KAEhBkB,EAAUvC,IAAME,SAASC,KAAQ7J,GAEjCkM,GAAkBH,GAAY,IACjCI,QAAO,0CACPC,KAAI,0CAGqB,uBAA1BrB,EAAiBC,MACS,2BAA1BD,EAAiBC,MAEjBkB,EAAeG,KAAK,kCAMtB,IAAMC,EACY,iBAJlBR,EACEI,EAAe3K,OAAS,EAAxB,UAA4BuK,SAA5B,QAA4CF,EAAU,YAAc,mBAAiB/K,GAIjF6I,IAAMC,aACJsC,EACA,CACEM,UAAU,EACVrC,QAAS,UAEXgC,EAAe,IAED,cAAhBJ,EACApC,IAAMC,aAAasC,EAAS,CAAEM,UAAU,IACxC7C,IAAMC,aAAasC,EAAS,CAAEO,QAASR,IAM7C,MAJoB,cAAhBF,IACFF,EAAUM,EAAe,IAGpBN,EACL,mCACE,cAAChD,GAAD,CAASC,QAAS+C,EAAS9C,UAAW+C,GAAoB,QAA1D,SACGS,MAILA,EAMJ,IAAMG,GAAoB,uCAAG,WAAOvI,EAAoBwH,GAA3B,eAAAhN,EAAA,+EAEJwF,EAASwI,KAAKhB,EAAIA,EAAGiB,aAFjB,UAEnBC,EAFmB,OAIrBC,wBAAcD,GAAU,KAAO,GAAoC,eAA/BE,uBAAaF,EAAQ,EAAG,GAJvC,yCAKfG,IAAgBC,OAAO,CAAC,UAAWF,uBAAaF,EAAQ,IAAiB,IAL1D,qFAQlB/L,GARkB,yDAAH,wDAYpBoM,GAAQvD,IAAMwD,KAClBC,KACA,uBAAG9G,QAAH,EAAoBA,SAOhB+G,GAAoE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAC7D9M,mBAAS,GADoD,mBAChF8F,EADgF,KACzEiH,EADyE,KAYvF,OARA5M,qBAAU,WACM,cAAV2M,EACFxL,YAAW,kBAAMyL,EAJJ,KAIwB,IAErCzL,YAAW,kBAAMyL,EAASC,OAAkB,MAE7C,CAACF,IAEa,cAAVA,EACL,cAACJ,GAAD,wCAAa5G,QAAOkH,SAXL,GAWkB3C,KAAjC,aACE,cAAC,GAAD,CAAMjH,KAAK,QAAQ6J,MAAM,QAAQC,KAAK,UAE5B,WAAVJ,GAAgC,cAAVA,EACxB,cAACJ,GAAD,yBAAO5G,MAAO,GAAd,aAAuBkH,SAfR,GAeqB3C,KAApC,aACE,cAAC,GAAD,CAAMjH,KAAK,QAAQ6J,MAAM,QAAQC,KAAK,UAGxC,cAACR,GAAD,wCAAa5G,QAAOkH,SAnBL,GAmBkB/C,KAAjC,aACE,cAAC,GAAD,CAAM7G,KAAK,MAAM6J,MAAM,QAAQC,KAAK,KAAKC,MAAI,QAKtCC,GAA+B,WAAO,IACzCzJ,EAAaoC,IAAbpC,SADwC,EAEA+G,KAFA,mBAEzCF,EAFyC,KAEvBS,EAFuB,KAI1CJ,EAA+B,SAA1BL,EAAiBC,KAAkBD,EAAiBK,QAAKvK,EAC9D6K,EAA+B,2BAA1BX,EAAiBC,KAAoCD,EAAiBW,QAAK7K,EA2GtF,OAzGAH,qBAAU,WACR,GAAI0K,GAAMM,EAAI,CACZ,IAAIkC,GAAY,EACZC,GAAW,EAETC,EAASpC,EAAGqC,mBAAmBC,KAE/BC,EAAmB,uCAAG,kCAAAvP,EAAA,+EAEFgN,EAAGwC,iBAFD,UAElBC,EAFkB,QAIpBP,EAJoB,oDAQhBQ,EAAkBD,EAAQE,WAA1BD,cACFzB,EAAcwB,EAAQE,WAAW1B,YAAcyB,EAAgB,EACrE1L,QAAQC,IAAR,iBAAsBgK,EAAtB,YAAqCyB,EAArC,wBAAkEN,IAClEpL,QAAQC,IAAR,+BAAoCmL,IACpCD,GAAW,EAEY,cAAnBM,EAAQ/K,OAdY,iBAetBV,QAAQC,IAAR,UAAewL,IAEf3C,EAAoB,CAClBR,KAAM,mBACNI,OAnBoB,yCAsBDqB,GAAqBvI,EAAUiK,EAAQE,YAtBtC,WAsBhBC,EAtBgB,QAwBlBV,EAxBkB,mDA4BtBlL,QAAQvC,MAAR,aAAoB2N,EAApB,YACIQ,GACF5L,QAAQvC,MAAR,yBAAgCmO,IAGlC9C,EAAoB,CAClBR,KAAM,SACNI,KACAjL,MAAO,IAAIgD,MAAMmL,EAAM,oBAAgBA,GAAW,YApC9B,8DAwCpBV,EAxCoB,mDA4CxBC,GAAW,EAEP,gBAAoBU,mCACtB7L,QAAQC,IAAR,uBAA4BmL,IAC5BtC,EAAoB,CAAER,KAAM,YAAaI,SAEzC1I,QAAQvC,MAAR,uCAA8C2N,IAC9CpL,QAAQvC,MAAR,MAEAqL,EAAoB,CAClBR,KAAM,SACNI,KACAjL,MAAO,IAAIgD,MAAM,aAxDG,0DAAH,qDAiEzB,OAHAT,QAAQC,IAAR,8BAAmCmL,IACnCG,IAEO,WACAJ,IACHrC,EAAoB,CAAER,KAAM,SAC5BtI,QAAQC,IAAR,+BAAoCmL,IACpCF,GAAY,OAIjB,CAAC1J,EAAUkH,EAAIM,EAAIF,IAEtB9K,qBAAU,WACR,GAA8B,qBAA1BqK,EAAiBC,MAA+BI,EAElDI,EAAoB,CAAER,KAAM,YAAaI,YACpC,GACqB,cAA1BL,EAAiBC,MACS,WAA1BD,EAAiBC,MACS,cAA1BD,EAAiBC,KACjB,CACA,IAAI4C,GAAY,EAQhB,OANA/L,YAAW,WACJ+L,GACHpC,EAAoB,CAAER,KAAM,WAE7B,KAEI,WACL4C,GAAY,MAGf,CAAC7C,EAAiBC,KAAMQ,EAAqBJ,IAElB,SAA1BL,EAAiBC,MAA6C,uBAA1BD,EAAiBC,KAChD,KAIP,eAAC,IAAD,CACEwD,GAAI,CACFC,WAAY,SACZC,GAC4B,cAA1B3D,EAAiBC,KACb,UAC0B,cAA1BD,EAAiBC,KACjB,UAC0B,WAA1BD,EAAiBC,KACjB,SACA,UACN2D,EAAG,EACHC,GAAI,EACJC,SAAU,QACVC,MAAO,QACPC,OAAQ,EACRC,SAAU,UAhBd,UAmBE,cAAC,IAAD,CAAKR,GAAI,CAAES,GAAI,EAAGH,MAAO,OAAQI,OAAQ,QAAzC,SACE,cAAC,GAAD,CAA0B7B,MAAOtC,EAAiBC,SAGpD,cAAC,IAAD,CAAMwD,GAAI,CAAEW,SAAU,EAAG3B,MAAO,SAAhC,SAC6B,2BAA1BzC,EAAiBC,KACd,2BAC0B,cAA1BD,EAAiBC,KACjB,YAC0B,WAA1BD,EAAiBC,KACjBD,EAAiB5K,MAAM0I,QACvB,kBChbNuG,GACI,UASJC,GAAS,CACXC,QAASF,GACTG,UAVQ,UAWRC,OAAQJ,GAERK,QAXO,UAYPC,QAXQ,UAYRC,OAXK,UAYLC,YAXU,UAYVC,KAAMT,GACNU,QAAS,OAETC,KAAM,UACNC,WAAY,UACZC,MAAO,WAGLC,GAA4B,CAC9BC,OAAQ,EACRC,aAAc,GACdzB,EAAG,EACH0B,GAAI,EACJlB,SAAU,EACVmB,WAAY,QAGVC,GAAiC,CACnCC,QAAS,OACT/B,WAAY,SACZgC,eAAgB,SAEhB,WAAY,CAAEC,OAAQ,YAGpBC,GAA0B,2BACzBJ,IADyB,IAG5BF,GAAI,OACJO,GAAI,OAEJpD,MAAO,QACP2C,OAAQ,EACRC,aAAc,GAEdE,WAAY,OAEZ,YAAa,CACTO,QAAS,MAIXC,GAAgB,SAACtD,EAAeuD,GAAhB,MAA4D,CAC9EvD,QACAwD,YAAaxD,EACbwC,WAAY,OAEZ,iBAAkB,CACdxC,MAAO,aACPkB,GAAIqC,EACJC,YAAaD,KAIfE,GAA8B,2BAC7BV,IAD6B,IAGhCW,QAAS,EACTpC,MAAO,OACPI,OAAQ,OAERc,WAAY,OAEZ,YAAa,CACTxC,MAAO,OACPqD,QAAS,OAIXM,GAAsB,QAEtBC,GAAW,CAAC,EAAG,EAAG,GAGlBC,GAA2B,CAC7BxC,SAAU,WACVyC,GAJa,EAKbC,GALa,EAMbP,YAAa,aACbZ,aAAc,GACdoB,UAAW,yBAGTC,GAA4B,2BAC3BJ,IAD2B,IAG9BH,QAAS,EACTM,UAAW,sBAEXE,gBAAiB,UAEjBC,GAAI,CACAJ,GAAI,EACJpC,SAAUgC,MAIZS,GAA+B,CACjCpB,QAAS,QACT1B,MAAO,OACP+C,WAAY,EACZX,QAAS,EACT/B,SAAU,GAGR2C,GAA4B,2BAC3BF,IAD2B,IAG9BlD,GAAI,aACJyB,OAAQ,EACRa,YAAa,QACbZ,aAAc,KAaZ2B,GAAmC,CACrClD,SAAU,QAEVmD,KAAM,EACNC,IAAK,EAEL/C,OAAQ,SAmaGgD,GAhaM,CACjBC,YAAa,CAAC,OAAQ,OAAQ,QAE9BC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAEvCC,MAAO,CACHC,KAAM,WACNC,QAAS,UACTC,UAAW,oBAGfC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAE5CC,YAAa,CACTJ,KAAM,IACNC,QAAS,IAETI,MAAO,IACPC,OAAQ,IACRC,KAAM,KAGVC,YAAa,CACTR,KAAM,IACNC,QAAS,MAGblD,UAEA0D,QAAS,CAAC,EAAG,YAAa,aAE1BC,QAAS,CAAC,IAAK,oCAAqC,sCAEpDjD,KAAM,CACFvR,QAAS,CACLyU,WAAY,YACZ9D,SAAU,IAIlB+D,OAAQ,CACJjD,MAAM,2BACCC,IADF,IAGDwB,gBAAiB,QACjBlE,MAAO,SAGX6B,OAAO,2BACAa,IADD,IAGF1C,MAAO,QACPkE,gBAAiB,UACjB1B,WAAY,qDAGhBmD,QAAQ,2BACDjD,IADA,IAGHC,OAAQ,EACR3C,MAAO,SACPkE,gBAAiB,iBAKzB0B,QAAS,CACL9D,QAAQ,2BACDqB,IADA,IAGHjC,GAAI,UACJsC,YAAa,UAEb,iBAAkB,CACdtC,GAAI,YACJsC,YAAa,eAIrBmC,QAAQ,2BACDxC,IACAG,GAAc,UAAW,cAGhCuC,cAAc,2BACP1C,IACAG,GAAc,SAAU,cAG/BwC,OAAO,uCACA3C,IACAG,GAAc,OAAQ,SAFvB,IAIFD,QAAS,KAGblB,OAAO,2BACAgB,IADD,IAGFjC,GAAI,SACJsC,YAAa,SAEb,iBAAkB,CACdtC,GAAI,cACJsC,YAAa,iBAIrBuC,MAAM,2BACC5C,IACAG,GAAc,SAAU,WAG/BnI,KAAK,2BACEsI,IADH,IAEAzD,MAAO,UACP,iBAAkB,CAAEA,MAAO,YAG/BgG,WAAW,2BACJvC,IADG,IAENzD,MAAO,SACP,iBAAkB,CAAEA,MAAO,iBAG/BiG,UAAU,2BACHxC,IADE,IAELzD,MAAO,OACP,iBAAkB,CAAEA,MAAO,aAG/B6B,OAAO,2BACAsB,IADD,IAGFnD,MAAO,QACPkE,gBAAiB,UACjB1B,WAAY,mDACZ0D,WAAY,eAEZ,iBAAkB,CACdvD,OAAQ,EACRa,YAAa,aAKzB2C,MAAO,CACHrE,QAAQ,2BACD+B,IADA,IAGHH,QAAS,EAETF,YAAa,QACbtC,GAAI,QAEJ,OAAQ,CACJ8B,QAAS,OACTC,eAAgB,gBAChBhC,WAAY,SAEZS,OAAQ,OAERN,GAAI,EACJgC,GAAI,EACJgD,GAAI,EAIJzE,SAAUgC,MAIlBtB,KAAK,2BACE4B,IADH,IAGAtB,OAAQ,EACR3C,MAAO,WAKXqG,UAAU,2BACHpC,IADE,IAGL5C,SAAU,QACVoD,IAAK,EACL6B,MAAO,EACP9B,KAAM,EACNV,GAAI,OACJpC,OAAQ,MACR6E,UAAW,WAGfnI,QAAS,CACLsF,QAAS,EAETf,OAAQ,EACRa,YAAa,QACbZ,aAAc,MACd1B,GAAI,aACJ8C,UAAW,EAEXrC,SAAU,EACV3B,MAAO,OACP8C,WAAY,OACZ0D,OAAQ,GAGZC,YAAa,CACT/C,QAAS,EACTd,aAAc,OACdoB,UAAW,EACX9C,GAAI,UACJlB,MAAO,SAEPwG,OAAQ,GAGZE,iBAAiB,2BACV7C,IADS,IAGZC,GAAI,EACJJ,QAAS,EACTxC,GAAI,QACJyB,OAAQ,KAIhBgE,MAAO,CACHC,MAAM,eACCxC,IAGPyC,KAAK,2BACEvC,IADH,IAGAwC,UAAW,SACXnE,OAAQ,EACRzB,GAAI,SAIR6F,MAAM,2BACCzC,IADF,IAGD0C,KAAM,IAGVC,OAAQ,IAGZC,OAAQ,CACJC,OAAQ,CACJnE,QAAS,OACTC,eAAgB,gBAChBhC,WAAY,UAEZI,SAAU,CAAC,QAAS,YAEpBoD,IAAK,EACL+B,OAAQ,EAER3D,GAAI,CAAC,EAAG,OAAQ,OAAQ,GACxBO,GAAI,CAAC,EAAG,OAAQ,SAMpBgE,OAAQ,CACJpE,QAAS,OACT/B,WAAY,SACZgC,eAAgB,SAEhBa,GA/UK,EAgVLjB,GAAI,EACJwE,UAAW,OAEXnG,GAAI,SAGRoG,KAAM,CACFhG,MAAO,OACPiG,SAAU,QACVC,GAAI,OACJ1D,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACblB,GAAIe,IAGR6D,QAAS,CACLzE,QAAS,OACT0E,SAAU,OACVC,aAAc,SACdxG,EAAG,CAAC,EAAG,IAGXyG,OAAQ,CACJtG,MAAO,CAAC,OAAQ,QAGpBkD,KAAM,CACF4B,GAAIxC,GACJtC,MAAO,CAAC,OAAQ,QAGpBgF,MAAO,CACHhF,MAAO,CAAC,OAAQ,QAGpBuG,QAAS,CACL5E,eAAgB,WAChBa,GAAI,EAEJX,OAAQ,CACJ2E,GAAI,IAIZC,gBAAgB,2BAjVY,CAChC1G,SAAU,WAEVmD,KAAM,EACNC,IAAK,EACLnD,MAAO,OACPI,OAAQ,SA2UW,IAGXR,GAAI,6BAGR8G,YAAY,2BACLzD,IADI,IAGPvB,QAAS,OACT0E,SAAU,OACVzE,eAAgB,SAChBhC,WAAY,SACZE,EAAG,CAAC,EAAG,KAGX8G,WAAY,CACR5G,SAAU,QACVmD,KAAM,EACNC,IAAK,EACL+B,OAAQ,EACRlF,MAAO,OACPI,OAAQ,OACRc,WAAY,2BACZ0F,eAAgB,YAChBC,cAAe,QAGnBC,MAAO,CACH1E,QAAS,EACTpC,MAAO,CAAC,OAAQ,SAGpB+G,YAAY,2BACL9D,IADI,IAGPvB,QAAS,CAAC,QAAS,QAEnB9B,GAAI,6BAGRoH,YAAa,CACTtF,QAAS,OACTC,eAAgB,SAChBsF,EAAG,EACHtH,WAAY,SACZuH,SAAU,SAGdC,QAAS,CACLzF,QAAS,CAAC,OAAQ,QAClB0F,cAAe,SACfvH,EAAG,EACHoH,EAAG,EACH/E,YAAa,QACb/B,GAAI,OACJC,OAAQ,SAMhB1F,OAAQ,CACJ2M,KAAM,CACFlD,WAAY,OACZmD,WAAY,OACZ9F,WAAY,OAEZpB,OAAQ,OAER,QAAS,CACLA,OAAQ,SAIhBxQ,EAAG,CACC8O,MAAO,UACP,SAAU,CAAEA,MAAO,UACnB6I,eAAgB,OAChB/F,WAAY,SAIpBgG,MAAO,CACHC,IAAK,CACDlG,GAAI,EACJO,GAAI,EACJN,WAAY,SACZnB,SAAU,EACVqH,cAAe,YACfC,cAAe,MACf3H,MAAO,CAAC,OAAQ,QAChBwC,GAAI,CAAC,EAAG,W,uDC9iBPoF,GAA0C,SAAC,GAAD,IAAGxH,EAAH,EAAGA,OAAWyH,EAAd,iCACnD,cAAC,IAAD,yBAAKnI,GAAI,CAAE4H,WAAY,IAASO,GAAhC,aACI,cAAC,IAAD,CAAOC,IAAI,oBAAoBpI,GAAI,CAAEU,gBCJvC2H,GAAqC,SAAAC,GACzC,OAAO,cAAC,KAAD,aAAYC,OAAK,GAAKD,KAGlBE,GAAgC,SAAAF,GAC3C,OAAO,cAAC,IAAD,2BAAoBA,GAApB,IAA2BG,GAAIJ,OCP3BK,GAAgB,WAC3B,OACE,cAAC,IAAD,CAAKD,GAAG,MAAMzI,GAAI,CAAEgC,QAAS,CAAC,OAAQ,QAAS/B,WAAY,SAAUgC,eAAgB,SAAU+D,KAAM,GAArG,SACE,eAAC,IAAD,CAAMhG,GAAI,CAAEiC,eAAgB,eAA5B,UACE,cAAC,GAAD,CAAM0G,GAAG,IAAT,oBACA,cAAC,GAAD,CAAMA,GAAG,QAAT,kBACA,cAAC,GAAD,CAAMA,GAAG,aAAT,6BCFKC,GAAoB,WAAO,IAAD,EACD7W,oBAAS,GADR,mBAC5B8W,EAD4B,KACjBC,EADiB,KAE7BC,EAAUvO,iBAAuB,MAEjCwO,EAAsB,WACxB,OACI,cAAC,IAAD,CAAQhJ,GAAI,CAAEgC,QAAS,CAAC,OAAQ,SAAWtG,QAAQ,OAAOsC,QAAS,kBAAM8K,GAAa,IAAtF,SACI,cAAC,GAAD,CAAM3T,KAAK,OAAO8J,KAAK,UAK7BgK,EAAqB,WACvB,OACI,eAAC,IAAD,CAAMvN,QAAQ,iBAAd,UACI,cAAC,IAAD,CACIsE,GAAI,CAAEK,SAAU,QAASiF,MAAO,EAAGiC,EAAG,EAAG/B,OAAQ,IACjD9J,QAAQ,OACRsC,QAAS,kBAAM8K,GAAa,IAHhC,SAKI,cAAC,GAAD,CAAM3T,KAAK,QAAQ8J,KAAK,SAE5B,cAAC,GAAD,CAAayB,OAvBV,OAuB8BP,EAAG,EAAGH,GAAI,CAACwF,OAAQ,MACpD,eAAC,IAAD,CAAKiD,GAAG,MAAMzI,GAAI,CAAEuH,EAAG,EAAGzE,GAAI,EAAG3C,EAAG,EAAGqF,OAAQ,IAAKxH,QAAS,kBAAM8K,GAAa,IAAhF,UACI,cAAC,GAAD,CAAMH,GAAG,IAAT,uBACA,cAAC,GAAD,CAAMA,GAAG,QAAT,kBACA,cAAC,GAAD,CAAMA,GAAG,aAAT,8BAOhB,OACI,qCACI,cAACK,EAAD,IACCH,GACG,eAAC,IAAD,CACInN,QAAQ,cACRD,IAAKsN,EACL/K,QAAS,SAAAkL,GACDA,EAAEC,SAAWJ,EAAQxN,SACrBuN,GAAa,IALzB,UASI,cAACG,EAAD,IACA,cAAC,IAAD,CAAWvN,QAAQ,sBC5CjC0N,GAAQ,uCAAG,WAAOrE,GAAP,eAAA7U,EAAA,sDACb,IACI,QAAC,EAAAwC,OAAeD,gBAAhB,SAA0B4W,QAAQ,CAC9BC,OAAQ,oBACRC,OAAQ,CACJ/M,KAAM,QACNgN,QAAS,CACLxZ,QAAS+U,EAAM/U,QACfyZ,OAAQ1E,EAAM0E,OACdC,SAAU,OAIxB,MAAOR,GACLhV,QAAQC,IAAI+U,GAdH,2CAAH,sDAkBRS,GAA2B,WAAO,IACHC,EAAkB9R,IAA3CP,QAAWzB,WAAc8T,UAE3BC,EAAyB,CAC3B,CAAEJ,OAAQ,OAAQzZ,QAAS4Z,EAAS,WACpC,CAAEH,OAAQ,OAAQzZ,QAAS4Z,EAAS,YAGxC,OACI,cAAC,IAAD,CAAM5J,GAAI,CAAEiC,eAAgB,SAAUyF,cAAe,SAAUzH,WAAY,UAAW6J,IAAK,GAA3F,SACI,cAAC,IAAD,CAAM9J,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,UAAlD,SAEQ4H,EAAOjM,KAAI,SAACmH,GAAD,OACP,cAAC,IAAD,CACIrJ,QAAQ,QACRsC,QAAS,WAAQoL,GAASrE,IAC1B/E,GAAI,CAAEoC,GAAI,EAAGP,GAAI,EAAG2E,GAAI,EAAG7F,SAAU,EAAGgB,OAAQ,GAHpD,SAIKoD,EAAM0E,iBAc7BM,GAAkB,SAAC,GAAD,MAAsE,CAC1FC,eADoB,EAAGA,eAEvBC,YAFoB,EAAmBA,YAGvCC,YAHoB,EAAgCA,cAMlDC,GAA0B,WAAO,IAAD,EACmBC,8BAAmBL,IAElEF,EAAyB,CAC3B,CAAEJ,OAAQ,MAAOY,QAJa,EAC1BL,gBAIJ,CAAEP,OAAQ,OAAQY,QALY,EACVJ,aAKpB,CAAER,OAAQ,OAAQY,QANY,EACGH,cASrC,OACI,mCACI,eAAC,IAAD,CAAMlK,GAAI,CACNiC,eAAgB,SAChBa,GAAI,EACJC,GAAI,EACJ5C,EAAG,EACHyB,aAAc,GACdD,OAAQ,EACRa,YAAa,QACbkF,cAAe,UARnB,UAUI,cAAC,IAAD,CAAM1H,GAAI,CAAEW,SAAU,GAAtB,uBAEIkJ,EAAOjM,KAAI,SAACmH,EAAOuF,GAAR,OACP,eAAC,IAAD,CAActK,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,gBAAiBsI,GAAI,GAA/E,UACI,cAAC,IAAD,CAAMvK,GAAI,CAAEW,SAAU,EAAGmB,WAAY,QAArC,SAAgDiD,EAAM0E,SACtD,cAAC,IAAD,CAAMzJ,GAAI,CAAEW,SAAU,GAAtB,SAA4BoE,EAAMsF,QAAQG,eAFnCF,YAU7BG,GAAyB,WAAO,IAC1B7U,EAAYkC,IAAZlC,QACR,OACI,cAAC,IAAD,CAAMoK,GAAI,CACNiC,eAAgB,SAChBuE,GAAI,EACJ+D,GAAI,GAHR,SAKI,cAAC,IAAD,CAAO7O,QAAQ,UAAUsE,GAAI,CACzB6B,GAAI,EACJO,GAAI,EACJ5B,SAAU,SACVkK,aAAc,WACdC,WAAY,UALhB,SAOI,cAAC,IAAD,UACK/U,SAQfgV,GAAoB,SAAC,GAAD,MAAyD,CAC/EC,iBADsB,EAAGA,iBAEzBC,UAFsB,EAAqBA,YAMzCC,GAA6B,WAAO,IAAD,EACGX,8BAAmBQ,IAAnDC,EAD6B,EAC7BA,iBAAkBC,EADW,EACXA,UAE1B,OACI,eAAC,IAAD,CAAM9K,GAAI,CACNiC,eAAgB,SAChBa,GAAI,EACJC,GAAI,EACJ5C,EAAG,EACHyB,aAAc,GACdD,OAAQ,EACRa,YAAa,QACbkF,cAAe,UARnB,UAUI,cAAC,IAAD,CAAM1H,GAAI,CAAEW,SAAU,GAAtB,oBACA,eAAC,IAAD,CAAMX,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,gBAAiBsI,GAAI,GAAvE,UACI,cAAC,IAAD,CAAMvK,GAAI,CAAEW,SAAU,EAAGmB,WAAY,QAArC,kBACA,cAAC,IAAD,UAAO+I,EAAiBG,YAAYR,gBAExC,eAAC,IAAD,CAAMxK,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,gBAAiBsI,GAAI,GAAvE,UACI,cAAC,IAAD,CAAMvK,GAAI,CAAEW,SAAU,EAAGmB,WAAY,QAArC,kBACA,cAAC,IAAD,UAAOgJ,EAAUG,WAAWT,oBAM/BU,GAAwB,WAEjC,OACI,mCACI,eAAC,IAAD,CAAMxP,QAAQ,mBAAmBsE,GAAI,CAAEiC,eAAgB,SAAUO,YAAa,SAA9E,UACI,cAAC,IAAD,CAASxC,GAAI,CAAEW,SAAU,GAAzB,qBACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,UCtKHwK,GAAiB,SAACnb,GAAD,OAAqBA,EAAQob,OAAO,EAAG,GAAK,MAAQpb,EAAQob,QAAQ,I,UCUrFC,GAAoC,SAAC,GAAmD,IAAD,IAAhD/Q,iBAAgD,MAApC,QAAoC,EAA3B8C,EAA2B,EAA3BA,QAA2B,IAAlB6B,YAAkB,MAAX,KAAW,EAClG,OACE,cAAC,KAAD,CAAOqM,aAAa,EAAMhR,UAAWA,EAAWiR,QAASnO,EAASmJ,SAAS,QAA3E,SACE,wCAEE,cAAC,GAAD,CAAMpR,KAAK,kBAAkB8J,KAAMA,UCJrCuM,GAAc,SAAC,GAAD,SAAGC,OAIVC,GAAyB,WAAO,IAAD,EAMpC5T,IAJAP,QACUA,EAH0B,EAGhCwF,KACmC4O,EAJH,EAIhC7V,WAAc8V,oBAIhBH,EAAQrB,8BAAmBoB,IARO,EASFzZ,mBAAS0Z,EAAMI,SAAS,IATtB,mBASjCC,EATiC,KASpBC,EAToB,KAexC,OAJA7Z,qBAAU,WACN6Z,EAAeN,EAAMI,SAAS,MAC/B,CAACJ,IAEGE,EACH,eAAC,IAAD,CAAM3L,GAAI,CACN2B,OAAQ,EACRqK,YAAa,SACbxJ,YAAa,SACbtC,GAAI,WAJR,UAMI,eAAC,IAAD,CAAMF,GAAI,CAAE8C,GAAI,EAAG0D,GAAI,EAAGvG,WAAY,UAAtC,UACI,cAAC,IAAD,CAASD,GAAI,CAAEW,SAAU,GAAzB,2BACA,cAAC,GAAD,CAAU1B,KAAK,KAAK7B,QAAS,cAAC,IAAD,CAAM1B,QAAQ,UAAd,SA1BhC,6DA+BD,cAAC,IAAD,CAAKsE,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACI,eAAC,IAAD,CAAMH,GAAI,CAAEC,WAAY,WAAxB,UACI,cAAC,IAAD,kBACA,cAAC,IAAD,gBACA,cAAC,IAAD,CAAOvE,QAAQ,OAAf,eAEA,cAAC,IAAD,CACIc,KAAMmP,EAAc,SAAW,OAC/BM,KAAK,MACLpU,MAAOiU,EACPI,SAAU,SAAAhD,GAAC,OAAI6C,EAAe7C,EAAEC,OAAOtR,QACvCkG,UAAW4N,IAGf,cAAC,IAAD,CAAM3L,GAAI,CAAE8G,GAAI,EAAG7G,WAAY,UAA/B,SACI,cAAC9C,GAAD,CACIP,GAAG,YACHQ,QAAQ,MACRC,iBAAiB,SACjBN,KAAM,SAAA9M,GACF,IAAK6b,EACD,MAAM,IAAInX,MAAM,iBAEpB,OAAO4C,EAAQ4U,SAASC,WAAQC,KAAKP,GAAc7b,IAR3D,SAWI,cAAC,IAAD,CAAQyL,QAAQ,gBAAhB,6BAQnB,8BC9EI4Q,GAAO,OACPC,GAAK,OACLC,GAAK,SCSLC,I,OAAyC,SAAC,GAAmD,IAAD,IAAhD/Q,eAAgD,MAAtC,OAAsC,EAA9BvG,EAA8B,EAA9BA,KAAMiI,EAAwB,EAAxBA,QAAS5L,EAAe,EAAfA,SAEtF,OACI,cAAC,KAAD,CAAOkb,MAAO,IAAMpB,aAAa,EAAMhR,UAAU,SAASqS,UAAU,QAAQC,OAAO,EAAMrB,QAAS,cAAC,IAAD,CAAM7P,QAAQ,cAAd,SAA6B0B,IAAiBmJ,SAAS,QAAzJ,SACI,eAAC,IAAD,CAAY7K,UACRsE,GAAI,CACAuH,EAAG,EACHvB,KAAM,CAAC,UAAW,YAH1B,UAKI,cAAC,IAAD,CAAMhG,GAAI,CACNgC,QAAS,OACTC,eAAgB,UAFpB,SAGI9M,IACJ,cAAC,IAAD,CAAM6K,GAAI,CACNW,SAAU,UACVmB,WAAY,OACZE,QAAS,OACTC,eAAgB,SAChBhC,WAAY,UALhB,SAMIzO,WCNdqb,GAAS,SAAC,GAAD,MAWW,CACtBC,eAZW,EACXA,eAYArB,MAbW,EAEXA,MAYAsB,MAdW,EAGXA,MAYAC,oBAfW,EAIXA,oBAYAC,cAhBW,EAKXA,cAYAC,eAjBW,EAMXA,eAYAC,gBAlBW,EAOXA,gBAYAnD,eAnBW,EAQXA,eAYAC,YApBW,EASXA,YAYAC,YArBW,EAUXA,cAcEkD,GAA8C,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAajEjD,8BAAmByC,IAVnBC,EAHiE,EAGjEA,eACArB,EAJiE,EAIjEA,MACAuB,EALiE,EAKjEA,oBACAD,EANiE,EAMjEA,MACAE,EAPiE,EAOjEA,cACAC,EARiE,EAQjEA,eACAC,EATiE,EASjEA,gBACAnD,EAViE,EAUjEA,eACAC,EAXiE,EAWjEA,YACAC,EAZiE,EAYjEA,YAGEoD,EACFP,EAAMQ,KAAKC,SAAW,IAAIC,WAAQT,EAAoBU,IAAIX,EAAMQ,OAC9DI,EAA0B,IAAIF,WAAQV,EAAMa,gBAAgBnC,IAC5DoC,EAAkB,IAAIJ,WAAQR,GAC9Ba,EAAmB,IAAIL,WAAQP,GA6FrC,OACI,0CAEQG,QAFR,IAEQA,OAFR,EAEQA,EAAazP,KAAI,SAACmQ,GACd,IAAMC,EA3FD,SAACA,GAClB,OAAQA,GACJ,IAAK,aACD,MAAO,CACH,KAAQ,gBACR,QAAW,sMAEX,KAAQH,EAAgBhC,SAAS,IAEzC,IAAK,aACD,MAAO,CACH,KAAQ,iBACR,QAAW,8JACX,KAAQiC,EAAiBjC,SAAS,IAE1C,IAAK,MACD,MAAO,CACH,KAAQ,MACR,QAAW,mHACX,KAAQ,qCAAGkB,EAAMkB,WAAWC,UAApB,IAA+B,cAAC,IAAD,CAAMlO,GAAI,CAAEW,SAAU,GAAtB,yBAE/C,IAAK,SACD,MAAO,CACH,KAAQ,gBACR,QAAW,mDACX,KAAQyL,WAAQC,KAAKS,GAAgBtC,SAAS,IAEtD,IAAK,cACD,MAAO,CACH,KAAQ,cACR,QAAW,iDACX,KAAQuC,EAAMQ,KAAKW,WAE3B,IAAK,UACD,MAAO,CACH,KAAQ,yBACR,QAAW,iHACX,KAAQ,qCAAGlB,EAAoBkB,UAAU,eAAC,IAAD,CAAMlO,GAAI,CAAEW,SAAU,GAAtB,yBAAmC2M,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAwBzB,SAAS,GAApE,WAEjD,IAAK,cACD,MAAO,CACH,KAAQ,cACR,QAAW,mEACX,KAAQsB,EAAgBe,WAEhC,IAAK,MACD,MAAO,CACH,KAAQ,MACR,QAAW,yHACX,KAAQP,EAAwBnD,YAExC,IAAK,WACD,MAAO,CACH,KAAQ,gBACR,QAAW,2UACX,KAAQ,mCAAGuC,EAAMoB,+BAA+B1C,GAAS,cAAC,IAAD,CAAKzM,MAAM,SAAX,iBAAgC,QAEjG,IAAK,cACD,MAAO,CACH,KAAQ,MACR,KAAQgL,EAAeQ,SAAS,IAExC,IAAK,eACD,MAAO,CACH,KAAQ8B,GACR,KAAQrC,EAAYO,YAE5B,IAAK,eACD,MAAO,CACH,KAAQ+B,GACR,KAAQrC,EAAYM,YAE5B,IAAK,YACD,MAAO,CACH,KAAQ,MACR,KAAQ,qCAAGiB,EAAMjB,WAAW,cAAC,IAAD,CAAMxK,GAAI,CAAEW,SAAU,GAAtB,yBAEpC,IAAK,aACD,MAAO,CACH,KAAQ,OACR,KAAQ,4CAAM,cAAC,IAAD,CAAMX,GAAI,CAAEW,SAAU,GAAtB,yBAEtB,QACI,MAAO,CAAE,KAAQ,OAAQ,KAAQ,+BAQhByN,CAAaL,GAC1B,OAAQ,cAAC,GAAD,CAAc5Y,KAAM6Y,EAAK7Y,KAAMiI,QAAS4Q,EAAK5Q,QAA7C,SAAuD4Q,EAAKlK,aAe3EuK,GAA6C,SAAC,GAClC,IAAnBhB,EAAkB,EAAlBA,YAuBF,OACI,mCAbA,cAAC,IAAD,CAAKrN,GAAI,CACLgC,QAAS,OACTsM,SAAU,mBACVrM,eAAgB,gBAChBsM,SAAU,EACVzE,IAAK,EACL1H,GAAI,GANR,SAQI,cAAC,GAAD,CAAeiL,YAAaA,SC5LlCmB,GAAsB,WACxB,OACI,eAAC,IAAD,CAAW9S,QAAQ,SAASsE,GAAI,CAC5BwF,OAAQ,GACRe,SAAU,CAAC,OAAQ,SAFvB,UAII,cAAC,GAAD,CAAgB8G,YAAa,CAAC,YAAa,gBAC3C,cAAC,GAAD,IACA,cAAC,GAAD,QAYNoB,GAA8C,SAAAnG,GAChD,OhBsC8B1S,EgBtCR0S,EAAM1S,UhBsCgE,+CAAZA,EgB1BzE,cAAC,IAAD,CACHoI,QAAS,kBAAMsK,EAAMoG,oBAAoBpG,EAAMqG,gBAC/CjT,QAAQ,SACRsE,GAAI,CAAE6B,GAAI,EAAGO,GAAI,GAHd,SAIH,cAAC,IAAD,CAAMpC,GAAI,CAAE0H,cAAe,UAA3B,SACI,cAAC,IAAD,CAAMe,GAAG,OAAOzI,GAAI,CAAEW,SAAU,GAAhC,SACK2H,EAAM1S,SAAWuV,GAAe7C,EAAM1S,eAjBxC,cAAC,IAAD,CACHoI,QAAS,kBAAMsK,EAAMzW,SAASjB,IAC9B8K,QAAQ,SACRsE,GAAI,CAAE6B,GAAI,EAAGO,GAAI,GAHd,SAIH,cAAC,IAAD,CAAMpC,GAAI,CAAE0H,cAAe,UAA3B,SACI,cAAC,IAAD,CAAMe,GAAG,OAAOzI,GAAI,CAAEW,SAAU,GAAhC,6ChBgCiB,IAAC/K,GgBdrBgZ,GAAwB,WAAO,IAChChZ,EAAYkC,IAAZlC,QACFiZ,EAAsBrU,iBAAuB,MAFZ,EAGKzI,oBAAS,GAHd,mBAGhC4c,EAHgC,KAGjBD,EAHiB,KAI/B7c,EAAaV,IAAbU,SAEFid,EAAa,uCAAG,WAAOC,GAAP,SAAA7e,EAAA,sDAClB6e,GACEld,EAASkd,OAAW1c,GAAW,GAAMC,OAAM,SAAAX,GACrCA,aAAiBqd,IACnBnd,EAASkd,GAET7a,QAAQvC,MAAMA,MANF,2CAAH,sDAWnB,OACI,qCACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAMqO,GAAI,CAAEwG,GAAI,EAAGvG,WAAY,UAA/B,SAEI,cAAC,GAAD,CACIrK,QAAWA,EACX8Y,mBAAsBA,EACtBC,cAAiBA,EACjB9c,SAAUid,QAKrBH,GACG,eAAC,IAAD,CACIjT,QAAQ,cACRsE,GAAI,GAGJvE,IAAKoT,EACL7Q,QAAS,SAAAkL,GACDA,EAAEC,SAAW0F,EAAoBtT,SACjCmT,GAAmB,IAR/B,UAYI,cAAC,GAAD,IACA,cAAC,IAAD,CAAWhT,QAAQ,sBC3F1BuT,GAAmB,WAE5B,OACI,cAAC,IAAD,CAAWvT,QAAQ,SAAnB,SACI,eAAC,IAAD,CAAMsE,GAAI,CACNC,WAAY,SACZgC,eAAgB,gBAChB+D,KAAM,GAHV,UAKI,cAAC,IAAD,CAAMhG,GAAI,CAAEkP,UAAW,CAAC,MAAO,QAA/B,SACI,cAAC,GAAD,CAAaxO,OAZd,WAcH,cAAC,GAAD,IACA,eAAC,IAAD,CAAMV,GAAI,CACNkP,UAAW,CAAC,MAAO,OACnBjN,eAAgB,YAFpB,UAII,cAAC,GAAD,IACA,cAAC,GAAD,aCzBPkN,GAA8B,SAAC,GAAD,IAAG3d,EAAH,EAAGA,SAAH,OACzC,cAAC,IAAD,CACEwO,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBc,GAAI,CAAC,EAAG,GACR5C,EAAG,EAEHwB,OAAQ,EACRC,aAAc,GACdY,YAAa,SAEbtC,GAAI,WAbR,SAgBE,eAAC,IAAD,CAAMF,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,GAAD,CAAM9K,KAAK,cAAc8J,KAAK,OAC9B,cAAC,IAAD,CAAMe,GAAI,CAAE8G,GAAI,GAAhB,SAAsBtV,UAKf4d,GAAmB,SAAC,GAAD,IAAG5d,EAAH,EAAGA,SAAH,OAC9B,cAAC,IAAD,CAAMwO,GAAI,CAAE8B,WAAY,OAAQ6I,WAAY,UAA5C,SAAyDnZ,KCjB9C6d,GAA0B,SAAC,GAA0D,IAAxDrP,EAAuD,EAAvDA,GAAI4F,EAAmD,EAAnDA,MAAO0J,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,SAAU/d,EAAyB,EAAzBA,SAAUge,EAAe,EAAfA,SAChF,OACE,eAAC,IAAD,CAAMxP,GAAE,aAAIC,WAAY,WAAcD,GAAtC,UACE,cAAC,IAAD,CACEpD,GAAI0S,EACJG,QAASF,EACTvP,GAAI,CACFG,EAAG,EACHC,GAAI,EACJsP,GAAI,OACJrP,SAAU,WAEVM,SAAU,EACVgB,OAAQ,EACRa,YAAa,eAXjB,SAcE,eAAC,IAAD,CAAMxC,GAAI,CAAEC,WAAY,UAAxB,UACG2F,EACA4J,GAAYA,OAGhBhe,MASDme,GAAuD,SAAC,GAAD,IAAG3P,EAAH,EAAGA,GAAInI,EAAP,EAAOA,MAAP,OAC3D,eAAC,IAAD,CAAYmI,KAAZ,cAEa,OAAVnI,EACC,cAAC,GAAD,CAAM1C,KAAK,oBACC,OAAV0C,EACF,cAAC,GAAD,CAAM1C,KAAK,uBACJ,OAAL0C,QAAK,IAALA,OAAA,EAAAA,EAAO+X,WAAW,MACpB,qCACE,cAAC,GAAD,CAAMza,KAAK,aADb,IAC4B0C,EAAMuT,OAAO,OAElC,OAALvT,QAAK,IAALA,OAAA,EAAAA,EAAO+X,WAAW,MACpB,qCACE,cAAC,GAAD,CAAMza,KAAK,eADb,IAC8B0C,EAAMuT,OAAO,MAG3CvT,EAfJ,QAgCWgY,GAAuD,SAAC,GAW9D,IAVL7P,EAUI,EAVJA,GACA8P,EASI,EATJA,QACAC,EAQI,EARJA,WACAC,EAOI,EAPJA,OACAnK,EAMI,EANJA,KACA7G,EAKI,EALJA,MACAiR,EAII,EAJJA,cACAC,EAGI,EAHJA,aACAlS,EAEI,EAFJA,QACAxM,EACI,EADJA,SAEA,OACE,eAAC,IAAD,CACEoL,GAAIkT,EACJK,kBAAiBJ,EACX/R,UACNgC,GAAE,qCACAiC,eAAgB,gBAChBhC,WAAY,UAERjC,EAAU,CAAEkE,OAAQ,QAAW,IAEhCkO,IACApQ,GAXP,UAcE,eAAC,IAAD,CAAMA,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,IAAD,CAAMD,GAAI,CAAEhB,QAAO8C,WAAY,UAA/B,SAA4CkO,IAE3CnK,GACC,4CAEE,cAAC,IAAD,CAAM7F,GAAI,CAAE8B,WAAY,QAASO,QAAS,IAA1C,SAAkDwD,OAIrDoK,GACC,4CAEE,cAAC,GAAD,CACEjQ,GAAI,CAAEhB,MAAOkR,EAAc7N,QAAS,GAAK1B,SAAU,WACnD9I,MAAOoY,UAMdze,MAKD4e,GAAoC,CACxC7B,SAAU,EAEVxL,GAAI,EACJ3C,GAAI,EACJgF,GAAI,OACJiL,GAAI,EACJX,GAAI,OAEJ/O,SAAU,EAEVgB,OAAQ,EACRa,YAAa,eAGT8N,GAAsC,CAC1C/B,SAAU,EAEVxL,GAAI,CAAC,EAAG,GACR3C,GAAI,EACJgF,GAAI,OACJiL,GAAI,EACJX,GAAI,OAEJ/O,SAAU,EAIViB,aAAc,GACdY,YAAa,SAKF+N,GAAsC,SAAC,GAAD,IACjD3K,EADiD,EACjDA,MACA0J,EAFiD,EAEjDA,QACAC,EAHiD,EAGjDA,SACAC,EAJiD,EAIjDA,SACGlH,EAL8C,gEAOjD,cAAC,GAAD,CAAW1C,QAAO0J,UAASC,WAAUC,WAAYxP,GAAI,CAAE8C,GAAI,EAAE,GAAI,GAAIuN,GAAI,CAAC,EAAG,IAA7E,SACE,cAAC,GAAD,eAAmB/H,OAQVkI,GAA0D,SAAC,GAAD,IACrEV,EADqE,EACrEA,QACAlK,EAFqE,EAErEA,MACAC,EAHqE,EAGrEA,KACAmK,EAJqE,EAIrEA,OACAhR,EALqE,EAKrEA,MACAiR,EANqE,EAMrEA,cACAC,EAPqE,EAOrEA,aAPqE,OASrE,cAAC,GAAD,CAAKZ,QAAO,UAAKQ,EAAL,UAA4BlK,QAAOC,OAA/C,SACE,cAAC,GAAD,CACE7F,GAAE,2BAAOsQ,IAAP,IAAsBtN,UAAW,IACnC+M,WAAU,UAAKD,EAAL,UACJA,UAASE,SAAQnK,OAAM7G,QAAOiR,gBAAeC,oBAa5CO,GAA0C,SAAC,GAajD,IAZL7K,EAYI,EAZJA,MACAkK,EAWI,EAXJA,QACAjK,EAUI,EAVJA,KACAmK,EASI,EATJA,OACAhR,EAQI,EARJA,MACAiR,EAOI,EAPJA,cACAC,EAMI,EANJA,aACAQ,EAKI,EALJA,aACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,UACAC,EACI,EADJA,SACI,cAC0BJ,EAD1B,GACGK,EADH,KACYC,EADZ,OAE0Bjf,oBAAS,GAFnC,mBAEGuP,EAFH,KAEY2P,EAFZ,KAIJ,OAAOF,IAAYjB,EACjB,cAAC,GAAD,CAAWlK,QAAO2J,SAAUO,EAASjK,OAArC,SACE,cAAC,IAAD,CACEqL,WAAS,EACTtU,GAAIkT,EACJtT,KAAK,SACLyP,KAAK,MACLkF,aAAcR,EACRrP,UACN4K,SAAU,SAAAhD,GACR,IACE0H,EAAgB1H,EAAEC,OAAOtR,OACzBoZ,GAAW,GACX,SACAA,GAAW,KAGfG,OAAQ,WACNJ,OAAW3e,GACX4e,GAAW,IAEbvV,QAAQ,SACRsE,GAAE,2BACGsQ,IADH,IAEAxO,WAAY,SACZ5B,GAAIoB,EAAU,UAAY,mBAKhC,cAAC,GAAD,CAAKgO,QAAO,UAAKQ,EAAL,UAA4BlK,QAAOC,OAA/C,SACE,cAAC,GAAD,CACE7F,GAAE,2BACGsQ,IADH,IAEApQ,GAAIoB,EAAU,UAAY,eAE5ByO,WAAU,UAAKD,EAAL,UACV9R,QAAS,kBAAMgT,EAAWlB,IACpBA,UAASE,SAAQnK,OAAM7G,QAAOiR,gBAAeC,eAAc5O,UAPnE,SASGuP,GACC,cAAC,IAAD,CACE7Q,GAAI,CAAEW,SAAU,EAAGR,EAAG,EAAG0B,GAAI,GAC7B7D,QAAS,SAAAzD,GACPqW,EAAgBC,GAChBtW,EAAM8W,mBAERtT,SAAU+S,EANZ,sBCpQGQ,GAA2B,kBACtC,cAAC,IAAD,CACE5V,QAAQ,kBACRsE,GAAI,CAAEG,EAAG,OAAQ6B,QAAS,OAAQC,eAAgB,YAFpD,SAIE,cAAC,IAAD,CAAShD,KAAK,OAAOe,GAAI,CAAEhB,MAAO,aCQzBuS,GAAkD,SAAC,GAAuB,IAAD,UAApB1Z,EAAoB,EAApBA,MAAO2Z,EAAa,EAAbA,OACjEC,EAAqB,IAAIhE,WAAJ,OAAY5V,QAAZ,IAAYA,IAAS,CAAEgU,SAAU,iBAAM,SAC5D6F,EAAYF,GAAU,IAAI/D,WAAQ+D,GACxC,OACE,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKxR,GAAI,CAAE8C,GAAI,CAAC,EAAG,GAAIgE,GAAI,EAAGrG,IAAK,EAAGE,SAAU,QAAhD,SACE,cAAC,GAAD,CAAMxL,KAAK,gBAGb,cAAC,GAAD,CACEyQ,MAAM,mBACNkK,QAAQ,yBACRE,OAAQyB,EAAmBjH,WAC3BxL,OACO,OAALnH,QAAK,IAALA,OAAA,EAAAA,EAAO8Z,GAAGC,+BACN,WACK,OAAL/Z,QAAK,IAALA,OAAA,EAAAA,EAAO8Z,GAAG,MACV,WACK,OAAL9Z,QAAK,IAALA,OAAA,EAAAA,EAAOga,IAAI,MACX,SACA,QAEN5B,eACQ,OAANuB,QAAM,IAANA,GAAA,UAAAA,EAAQM,gBAAR,mBAAkBC,qBAAlB,eAAiCJ,GAAG,KAChC,MACM,OAANH,QAAM,IAANA,GAAA,UAAAA,EAAQQ,gBAAR,mBAAkBD,qBAAlB,eAAiCJ,GAAG,KACpC,KADA,OAEAD,QAFA,IAEAA,GAFA,UAEAA,EAAWO,WAAW,UAFtB,aAEA,EAA0BzH,WAEhC0F,cAAoB,OAANsB,QAAM,IAANA,OAAA,EAAAA,EAAQM,UAAW,UAAY,SAC7CtC,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,gXAYJ,OAALzI,QAAK,IAALA,OAAA,EAAAA,EAAOqa,GAAG,OACT,cAAC,GAAD,6FC/BFrF,GAAS,SAAC,GAAD,MAAmC,CAAEpB,MAArC,EAAGA,QAEL0G,GAA0C,SAAC,GAOjD,IANL3gB,EAMI,EANJA,SACA4gB,EAKI,EALJA,SACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,IACArF,EAEI,EAFJA,cACAsF,EACI,EADJA,cAEQ9G,EAAUrB,8BAAmByC,IAA7BpB,MAEF+G,EAAS,IAAI/E,WAAQR,GAErBwF,EAA2BL,EAASM,aAA4CrgB,EAAlC+f,EAASxE,gBAAgBnC,GACvEmC,EAAmByE,EAAOK,aAA0CrgB,EAAhCggB,EAAOzE,gBAAgBnC,GAC3DkH,EAAwBC,cAAWC,QAAQjF,EAAiB6E,GAElE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,oBAEA,eAAC,IAAD,CAAKzS,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,aACNkK,QAAQ,mBACRE,OAAQqC,EAAOpE,WAAWzD,SAAS,GACnC3E,KAAK,QAGP,cAAC,GAAD,CAAWD,MAAM,OAAOkK,QAAQ,aAAaE,OAAQqC,EAAO9E,KAAK/C,WAAY3E,KAAMyG,KAElF8F,EAASM,SACR,cAAC,GAAD,CACE9M,MAAM,sBACNkK,QAAQ,4BACRE,OAAM,UAAK8C,6BACXjN,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6NAWV,cAAC,GAAD,CACEsF,MAAM,gBACNkK,QAAQ,sBACRE,OAAQsC,EAAIzG,SAAS,GACrBoE,cAAeuC,EAAO3G,SAAS,GAC/BhG,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6JASR,cAAC,GAAD,CAAiBzI,MAAO+V,EAAiB4D,OAAQmB,IAEhDnhB,KAGF+gB,GAAiB,cAAC,GAAD,QC7FXQ,GAA0C,SAAC,GAMjD,IALLvhB,EAKI,EALJA,SACAwhB,EAII,EAJJA,cACAxB,EAGI,EAHJA,OACAyB,EAEI,EAFJA,iBACAC,EACI,EADJA,kCAEQ3b,EAAYO,IAAZP,QADJ,EAGsBuF,GACxBkW,EACgB,aAAhBxB,EAAOhV,KACHjF,EAAQwF,KAAKoW,UAAUC,KAAK7b,EAAQwF,KAAMyU,EAAOjI,OAAQ,CACvD0J,mBACAC,sCAEc,YAAhB1B,EAAOhV,KACPjF,EAAQwF,KAAKsW,WAAWD,KAAK7b,EAAQwF,MACrCxF,EAAQwF,KAAKuW,YAAYF,KAAK7b,EAAQwF,KAAMyU,EAAOjI,OAAQ,CACzD0J,mBACAC,uCAXD1V,EAHH,oBAkBJ,OAAO,cAAC,IAAD,CAAQQ,QAASR,EAAjB,SAAmChM,KC9B/B+hB,GAAmBxe,wBAA2C,MAE9Dye,GAAe,WAC1B,IAAMpiB,EAAuC4G,qBAAWub,IAExD,GAAgB,OAAZniB,EACF,MAAM,IAAIuD,MAAM,0DAGlB,OAAOvD,GCbIqiB,GAA6B,SAAC,GAAD,IAAGjiB,EAAH,EAAGA,SAAH,OACxC,cAAC,IAAD,CACEwO,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBc,GAAI,CAAC,EAAG,GACR5C,EAAG,EAEHwB,OAAQ,EACRC,aAAc,GACdY,YAAa,SACbQ,UAAW,EACX9C,GAAI,2BAbR,SAgBE,eAAC,IAAD,CAAMF,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,GAAD,CAAM9K,KAAK,uBAAuB8J,KAAK,OACvC,cAAC,IAAD,CAAMe,GAAI,CAAE8G,GAAI,GAAhB,SAAsBtV,UCHtBkiB,GAAa,IAAIjG,WAAQkG,6BAA0B9H,SAAS,GAC5D+H,GAAa,IAAInG,WAAQmE,8BAA2B/F,SAAS,GAM7DgI,GAAqE,SAAC,GAAD,IAAGtK,EAAH,EAAGA,OAAH,OACzE,eAAC,GAAD,WACGA,EAAOuK,mBAAqBvK,EAAOwK,WAClC,yDACmB,eAAC,GAAD,WAASxK,EAAOuK,kBAAkBtJ,WAAlC,UADnB,eAC0F,IACxF,eAAC,GAAD,WACGjB,EAAOwK,WAAWvJ,WADrB,IACkC8B,SAGlC/C,EAAOyK,WAAazK,EAAO0K,mBAC7B,oDACe,IACb,eAAC,GAAD,WACG1K,EAAOyK,UAAUxJ,WADpB,IACiC8B,MACvB,IAJZ,eAKc,eAAC,GAAD,WAAS/C,EAAO0K,mBAAmBzJ,WAAnC,aAEZjB,EAAOuK,mBAAqBvK,EAAOyK,UACrC,yDACmB,eAAC,GAAD,WAASzK,EAAOuK,kBAAkBtJ,WAAlC,UADnB,WACsF,IACpF,eAAC,GAAD,WACGjB,EAAOyK,UAAUxJ,WADpB,IACiC8B,SAGjC/C,EAAOwK,YAAcxK,EAAO0K,mBAC9B,yDACmB,eAAC,GAAD,WAAS1K,EAAO0K,mBAAmBzJ,WAAnC,UADnB,OACmF,IACjF,eAAC,GAAD,WACGjB,EAAOwK,WAAWvJ,WADrB,IACkC8B,SAGlC/C,EAAOuK,kBACT,yDACmB,eAAC,GAAD,WAASvK,EAAOuK,kBAAkBtJ,WAAlC,aAEjBjB,EAAO0K,mBACT,yDACmB,eAAC,GAAD,WAAS1K,EAAO0K,mBAAmBzJ,WAAnC,aAEjBjB,EAAOwK,WACT,wDACmB,IACjB,eAAC,GAAD,WACGxK,EAAOwK,WAAWvJ,WADrB,IACkC8B,SAIpC,oDACe,IACb,eAAC,GAAD,WACG/C,EAAOyK,UAAUxJ,WADpB,IACiC8B,SAjDvC,QAyDW4H,GAAiC,SAAC,GAAD,MAMpB,CAAEzI,MANkB,EAC5CA,MAKiCsB,MANW,EAE5CA,MAIwC/C,eANI,EAG5CA,eAGwDC,YANZ,EAI5CA,YAEqE6C,eANzB,EAK5CA,iBAYWqH,GAAsB,SACjCC,EACAC,EACApH,EACAqH,GAII,IACIvH,EAAiBuH,EAAjBvH,MAAOtB,EAAU6I,EAAV7I,MACT+F,EAAS4C,EAAcG,YAAYF,EAAepH,GAExD,IAAKuE,EACH,MAAO,MAACnf,OAAWA,GAKrB,IAAMmiB,EAAiBJ,EAAcK,MAAMjD,EAAQvE,GAC7CyH,EAAe3H,EAAMoB,+BAA+B1C,GACpDkJ,EAA2B5H,EAC9B6H,SAASR,GACTnc,IAAIuc,GACJrG,+BAA+B1C,GAE5Bra,EAAqC,2BACtCkjB,GADsC,IAEzCF,gBACAI,iBACAE,eACAC,6BAGF,GAAoB,oBAAhBnD,EAAOhV,KAET,MAAO,MACLnK,EACA,eAAC,GAAD,yCAC8B,IAC5B,eAAC,GAAD,WACGwiB,qBAAkBhJ,WADrB,IACkCS,MAHpC,QAUJ,IAAMwI,EACY,aAAhBtD,EAAOhV,KACHuY,GAAsBvD,EAAOjI,OAAQnY,GACrB,YAAhBogB,EAAOhV,KACPwY,GAAqBxD,EAAOjI,OAAQnY,GACpC6jB,GAAwBzD,EAAOjI,OAAQnY,GAE7C,OAAI0jB,EACK,MAACziB,EAAWyiB,GAGd,CAACtD,EAAQ,cAAC,GAAD,CAAwBjI,OAAQiI,EAAOjI,WAGnDwL,GAAwB,SAAC,EAAD,GASJ,IARtBjB,EAQqB,EARrBA,kBAAmBC,EAQE,EARFA,WAEnBS,EAMqB,EANrBA,eACAE,EAKqB,EALrBA,aACAC,EAIqB,EAJrBA,yBACA3K,EAGqB,EAHrBA,eACAyB,EAEqB,EAFrBA,MAGF,GAAIsI,EAAW7B,GAAGgD,0BAChB,OACE,eAAC,GAAD,sCAC2B,IACzB,eAAC,GAAD,WACGA,yBAAsBrJ,WADzB,IACsCS,MAHxC,OAUJ,GAAIoI,GACF,IAAKF,EAAeW,yBAAyB1J,GAC3C,OACE,eAAC,GAAD,gEACoD,cAAC,GAAD,UAASmI,KAD7D,gGAMC,CACL,GAAIY,EAAeY,8BAA8B3J,GAC/C,OACE,eAAC,GAAD,gDACoC,cAAC,GAAD,UAASiI,KAD7C,OAMJ,GAAIiB,EACF,OACE,eAAC,GAAD,2GAEQ,cAAC,GAAD,UAASf,KAFjB,sDAQN,OAAIE,EAAkBnC,GAAG3H,GAErB,eAAC,GAAD,yEAC8D,IAC5D,eAAC,GAAD,WAAS8J,EAAkBuB,IAAIrL,GAAgBQ,WAA/C,UAFF,OAOG,MAGHyK,GAA0B,SAAC,EAAD,GAWN,IAVtBnB,EAUqB,EAVrBA,kBAAmBG,EAUE,EAVFA,mBAAoBF,EAUlB,EAVkBA,WAAYC,EAU9B,EAV8BA,UAEnDI,EAQqB,EARrBA,cACAI,EAOqB,EAPrBA,eACAE,EAMqB,EANrBA,aACAC,EAKqB,EALrBA,yBACAlJ,EAIqB,EAJrBA,MACAzB,EAGqB,EAHrBA,eACAC,EAEqB,EAFrBA,YAGF,GAAIyK,EAAc,CAChB,GAAIT,EACF,OACE,cAAC,GAAD,8EAMJ,GAAIF,EAAY,CACd,GAAIS,EAAerG,+BAA+B1C,GAChD,OACE,eAAC,GAAD,qDACyC,cAAC,GAAD,UAASmI,KADlD,4EAOJ,GAAIY,EAAe5G,gBAAgBnC,GAAOyG,GAAGkC,EAAcxG,gBAAgBnC,IACzE,OACE,cAAC,GAAD,8FAMD,CACL,GAAI+I,EAAeY,8BAA8B3J,GAC/C,OACE,eAAC,GAAD,gDACoC,cAAC,GAAD,UAASiI,KAD7C,OAMJ,GAAIiB,EACF,OACE,eAAC,GAAD,uGAC4F,IAC1F,cAAC,GAAD,UAASf,KAFX,sDAQN,GAAII,EAAW,CACb,GAAIQ,EAAejH,KAAK2E,GAAG2C,sBACzB,OACE,eAAC,GAAD,yCAC8B,IAC5B,eAAC,GAAD,WACGA,qBAAkBhJ,WADrB,IACkCS,MAHpC,OAUJ,GAAI0H,EAAUrC,GAAG1H,GACf,OACE,eAAC,GAAD,uEAC4D,IAC1D,eAAC,GAAD,WACG+J,EAAUqB,IAAIpL,GAAaO,WAD9B,IAC2C8B,MAH7C,OAWN,cAAIwH,QAAJ,IAAIA,OAAJ,EAAIA,EAAmBnC,GAAG3H,IAEtB,eAAC,GAAD,yEAC8D,IAC5D,eAAC,GAAD,WAAS8J,EAAkBuB,IAAIrL,GAAgBQ,WAA/C,UAFF,OAOG,MAGHwK,GAAuB,SAAC,EAAD,GAQH,IAPtBhB,EAOqB,EAPrBA,UAEAU,EAKqB,EALrBA,aACAC,EAIqB,EAJrBA,yBACA7H,EAGqB,EAHrBA,eACA7C,EAEqB,EAFrBA,YAGF,OAAuB,IAAnB6C,EAEA,cAAC,GAAD,mGAMA4H,EAEA,cAAC,GAAD,4EAMJ,OAAIV,QAAJ,IAAIA,OAAJ,EAAIA,EAAWrC,GAAG1H,IAEd,eAAC,GAAD,sBACW,IACT,eAAC,GAAD,WACG+J,EAAUqB,IAAIpL,GAAaO,WAD9B,IAC2C8B,MACjC,IAJZ,+BAUAqI,EAEA,eAAC,GAAD,oHAEa,cAAC,GAAD,UAASf,KAFtB,+DAQG,MC7VH0B,GAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAmC,CAC9CnD,SAAUmD,EACVlD,OAAQ,IAAImD,SAAMD,EAAMtH,WAAYsH,EAAMhI,MAC1CgF,eAAe,EACfkD,WAAW,EACXC,kBAAkB,IASdC,GAAa,SAACC,GAAD,OAAgC,SAAC/W,GAAD,OACjDgX,GAAOhX,EAAO+W,KAEVE,GAAiBH,GAAW,CAAEnZ,KAAM,mBACpCuZ,GAAoBJ,GAAW,CAAEnZ,KAAM,sBACvCwZ,GAAeL,GAAW,CAAEnZ,KAAM,iBAClCyZ,GAASN,GAAW,CAAEnZ,KAAM,WAE5BqZ,GAAS,SAAChX,EAA0B+W,GAAkD,IAIlFxD,EAAiEvT,EAAjEuT,SAAUC,EAAuDxT,EAAvDwT,OAAQE,EAA+C1T,EAA/C0T,cAAekD,EAAgC5W,EAAhC4W,UAAWC,EAAqB7W,EAArB6W,iBAEpD,OAAQE,EAAOpZ,MACb,IAAK,cAEH,OADAtI,QAAQC,IAAI,mBACL,2BAAK0K,GAAZ,IAAmB0T,eAAe,IAGpC,IAAK,eACH,OAAO,2BAAK1T,GAAZ,IAAmB0T,eAAe,IAEpC,IAAK,gBACH,IAAM2D,EAAgB9J,WAAQC,KAAKuJ,EAAOO,UAEpCC,EAAQ,2BACTvX,GADS,IAEZwT,OAAQA,EAAOgE,cAAcH,KAG/B,IAAKT,EAAW,CACd,GAAIpD,EAAOK,SAAWwD,EAAc1I,QAClC,OAAOsI,GAAeM,GAExB,GAAIV,GAAoBQ,EAAcI,OACpC,OAAOP,GAAkBK,GAI7B,OAAOA,EAGT,IAAK,UACH,OAAO,2BACFvX,GADL,IAEEwT,OAAQA,EAAOkE,QAAQX,EAAOO,UAC9BV,WAAW,IAGf,IAAK,iBACH,OAAO,2BACF5W,GADL,IAEEwT,OAAQA,EAAOkE,QAAQ1B,sBACvBa,kBAAkB,IAGtB,IAAK,oBACH,OAAO,2BACF7W,GADL,IAEEwT,OAAQA,EAAOkE,QAAQ,GACvBb,kBAAkB,IAGtB,IAAK,SACH,OAAO,2BACF7W,GADL,IAEEwT,OAAQ,IAAImD,SAAMpD,EAASnE,WAAYmE,EAAS7E,MAChDkI,WAAW,EACXC,kBAAkB,IAGtB,IAAK,cAAgB,IAELH,EAEVK,EAFFQ,SAAYb,MAC8BiB,EACxCZ,EADFa,YAAeC,0BAGXN,EAAQ,2BACTvX,GADS,IAEZuT,SAAUmD,IAGZ,GAAIhD,GAAiBiE,EACnB,OAAOR,GAAaC,GAAOG,IAG7B,IAAM5E,EAASY,EAASmC,YAAYlC,EAAQ,GAE5C,MACoB,cAAX,OAANb,QAAM,IAANA,OAAA,EAAAA,EAAQhV,QAAwB+Y,EAAM7C,SACrB,aAAX,OAANlB,QAAM,IAANA,OAAA,EAAAA,EAAQhV,OAAsB+Y,EAAM7C,QAE9BuD,GAAOG,GAGT,2BAAKA,GAAZ,IAAsB/D,OAAQkD,EAAMd,MAAMjD,EAAQ,OAKlDmF,GAAU,SAACvE,EAAiBC,EAAepF,GAC/C,IAAMuE,EAASY,EAASmC,YAAYlC,EAAQpF,GAE5C,OAAIuE,GAA0B,oBAAhBA,EAAOhV,MAA8BgV,EAAOjI,OAAOwK,WACxDvC,EAAOjI,OAAOwK,WAAW6C,IAAI3J,GAE7Bb,WAAQyK,MAIbhK,GAAS,SAAChO,GAAD,MAA+B,CAC5CiY,KAAMjY,EAAMiY,KACZC,kBAAmB7C,GAA+BrV,KAG9CmY,GAAsB,SACtBC,GAAuB,IAAIC,OAAJ,WAAeF,KAO/BG,GAA4C,SAAC,GAA0B,IAAxBlJ,EAAuB,EAAvBA,WAAYV,EAAW,EAAXA,KAAW,EACzB6J,6BAAkBvB,GAAQP,IADD,0BACxElD,EADwE,EACxEA,SAAUC,EAD8D,EAC9DA,OAAQE,EADsD,EACtDA,cAAiB8E,EADqC,OAE7CjN,8BAAmByC,IAA/CiK,EAFyE,EAEzEA,KAAMC,EAFmE,EAEnEA,kBAEd7kB,qBAAU,gBACWG,IAAf4b,GACFoJ,EAAS,CAAE7a,KAAM,gBAAiB2Z,SAAUlI,SAEjC5b,IAATkb,GACF8J,EAAS,CAAE7a,KAAM,UAAW2Z,SAAU5I,MAEvC,CAACU,EAAYV,EAAM8J,IAEtB,IAAMpK,EAAgB6J,EAAK7J,gBACrBgG,EAAmBhG,EAAchV,IAAI,MAdsC,EAgB9Ckc,GACjC/B,EACAC,EACApF,EACA8J,GApB+E,mBAgB1EO,EAhB0E,KAgB7DC,EAhB6D,KAuBzEC,EAAkBhE,KAAlBgE,cAEFC,EAAexa,uBAAY,WAC/Bua,EAAc,iCACb,CAACA,IAEEE,EAAkBtF,EAASM,QAE3BiF,EAAqBjb,GAAsBua,IAmBjD,OAjBA/kB,qBAAU,WAEsB,uBAA5BylB,EAAmBnb,MACS,2BAA5Bmb,EAAmBnb,KAEnB6a,EAAS,CAAE7a,KAAM,gBACoB,WAA5Bmb,EAAmBnb,MAAiD,cAA5Bmb,EAAmBnb,KACpE6a,EAAS,CAAE7a,KAAM,iBACoB,qBAA5Bmb,EAAmBnb,OACxBmb,EAAmB/a,KAAnB,UAA6Boa,GAA7B,WACFQ,EAAc,gBAEdA,EAAc,qBAGjB,CAACG,EAAoBN,EAAUG,IAGhC,eAAC,GAAD,CACEpF,SAAUA,EACVC,OAAQA,EACRC,IAAKqE,GAAQvE,EAAUC,EAAQpF,GAC/BA,cAAeA,EACfsF,cAAeA,EACf8E,SAAUA,EANZ,iBAQGE,QARH,IAQGA,IACEG,EACC,cAAC,GAAD,uFAIA,cAAC,GAAD,4EAKJ,eAAC,IAAD,CAAMhc,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASyZ,EAAlC,oBAICH,EACC,cAAC,GAAD,CACEtE,cAAa,UAAKgE,IAAL,OAA2BM,EAAY9a,MACpDgV,OAAQ8F,EACRrE,iBAAkBA,EAClBC,kCAAmC,GAJrC,qBASA,cAAC,IAAD,CAAQnV,UAAQ,EAAhB,4BCxOJ8O,GAAS,SAAC,GAAD,MAA0C,CAAE0I,MAA5C,EAAGA,MAAgD9J,MAAnD,EAAUA,QAEZmM,GAA0B,WAAO,IACpCJ,EAAkBhE,KAAlBgE,cACFK,EAAoB5a,uBAAY,WACpCua,EAAc,0BACb,CAACA,IACEM,EAAmB7a,uBAAY,WACnCua,EAAc,yBACb,CAACA,IAPuC,EASlBpN,8BAAmByC,IAApC0I,EATmC,EASnCA,MAAO9J,EAT4B,EAS5BA,MAGf,OACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,eAAC,IAAD,CAAKzL,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,eAAC,IAAD,WACE,cAAC,GAAD,CACEyF,MAAM,aACNkK,QAAQ,mBACRE,OAAQuF,EAAMtH,WAAWzD,SAAS,GAClC3E,KAAK,QAGP,cAAC,GAAD,CACED,MAAM,OACNkK,QAAQ,aACRE,OAAQuF,EAAMhI,KAAK/C,WACnB3E,KAAMyG,KAGR,cAAC,GAAD,CAAiBzU,MAAO0d,EAAM3H,gBAAgBnC,QAGhD,eAAC,IAAD,CAAM/P,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,UAAUsC,QAAS8Z,EAAnC,yBAGA,eAAC,IAAD,CAAQ9Z,QAAS6Z,EAAjB,UACE,cAAC,GAAD,CAAM1iB,KAAK,MAAM8J,KAAK,OADxB,0BCzCG8Y,GAA0C,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOxmB,EAAV,EAAUA,SAAU2I,EAApB,EAAoBA,KAApB,OACrD,eAAC,IAAD,CAAK6F,GAAI,CAAEwG,GAAI,EAAGzD,GAAI,GAAtB,UACE,eAAC,IAAD,CAAM/C,GAAI,CAAEC,WAAY,SAAU8C,GAAI,QAAtC,UACE,cAAC,IAAD,CAAK/C,GAAI,CAAES,GAAI,OAAQE,SAAU,QAAjC,SAA4CxG,GAAQ,cAAC,GAAD,CAAMhF,KAAK,kBAE/D,cAAC,IAAD,CAASsT,GAAG,KAAZ,SAAkBuP,OAGpB,cAAC,IAAD,CAAMhY,GAAI,CAAEW,SAAU,GAAtB,SAA4BnP,QCZnBymB,GAAoB,SAAA3P,GAAU,IACjCkP,EAAkBhE,KAAlBgE,cAEFU,EAAkBjb,uBAAY,WAClCua,EAAc,wBACb,CAACA,IAEJ,OACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,eAAC,IAAD,CAAKxX,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CAAa6X,MAAM,qCAAnB,qDAIA,cAAC,IAAD,CAAMtc,QAAQ,iBAAd,SACE,cAAC,IAAD,CAAQsC,QAASka,EAAjB,iCChBJC,GAAW,SAACjoB,EAAakoB,GAAd,OAA+BloB,GAAKkoB,EAAIloB,EAAEmoB,GAAGD,IAAMloB,IAAMkoB,GAY7DE,GAAuB,SAClCC,GACkC,IAAD,EACiBxmB,mBAASwmB,GAD1B,mBAC1BC,EAD0B,KACPC,EADO,KAWjC,OARAvmB,qBAAU,WAfG,IAAChC,EAAqBkoB,IAgB3BI,MAAwBD,EAC5BE,EAAqBF,IACZC,IAAqBD,IAlBCH,EAkByCG,GAlB9DroB,EAkB2CsoB,GAhBrDhc,OAAS4b,EAAE5b,MACb2b,GAASjoB,EAAEqZ,OAAOwK,WAAYqE,EAAE7O,OAAOwK,aACvCoE,GAASjoB,EAAEqZ,OAAOyK,UAAWoE,EAAE7O,OAAOyK,YACtCmE,GAASjoB,EAAEqZ,OAAOuK,kBAAmBsE,EAAE7O,OAAOuK,oBAC9CqE,GAASjoB,EAAEqZ,OAAO0K,mBAAoBmE,EAAE7O,OAAO0K,sBAa7CwE,EAAqBF,KAEtB,CAACC,EAAmBD,IAEhBC,GC1BIE,GAAoB,SAAC,GAAD,IAAGlnB,EAAH,EAAGA,SAAH,OAC/B,cAAC,IAAD,CACEwO,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBc,GAAI,CAAC,EAAG,GACR5C,EAAG,EAEHwB,OAAQ,EACRC,aAAc,GACdY,YAAa,UACbQ,UAAW,GAZf,SAgBE,eAAC,IAAD,CAAMhD,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,GAAD,CAAM9K,KAAK,uBAAuB8J,KAAK,OACvC,cAAC,IAAD,CAAMe,GAAI,CAAE8G,GAAI,GAAhB,SAAsBtV,UCHfmnB,GAA2E,SAAC,GAMlF,IALLJ,EAKI,EALJA,YACAtF,EAII,EAJJA,iBACAC,EAGI,EAHJA,kCACA0F,EAEI,EAFJA,mBACAC,EACI,EADJA,sBAEQthB,EAAYO,IAAZP,QAsCR,OApCArF,qBAAU,WACR,GAAIqmB,GAAoC,YAArBA,EAAY/b,KAAoB,CACjDqc,EAAsB,CAAErc,KAAM,eAE9B,IAAI4C,GAAY,EAEV0Z,EAAYzlB,WAAU,sBAAC,4BAAAnD,EAAA,sEACqB,aAArBqoB,EAAY/b,KACnCjF,EAAQwhB,SAAS5F,UAAUoF,EAAYhP,OAAQ,CAC7C0J,mBACAC,sCAEF3b,EAAQwhB,SAASzF,YAAYiF,EAAYhP,OAAQ,CAC/C0J,mBACAC,sCARqB,OACrB8F,EADqB,OAWtB5Z,IACHyZ,EAAsB,CAAErc,KAAM,WAAYwc,gBAC1C9kB,QAAQC,IACN,sBACEiY,WAAQC,KAAR,UAAgB2M,EAAYC,wBAAwBC,WAAY1O,SAAS,KAfpD,2CAkB1B,KAEH,OAAO,WACLlX,aAAawlB,GACb1Z,GAAY,GAGdyZ,EAAsB,CAAErc,KAAM,WAG/B,CAAC+b,IAGFA,GAC4B,aAA5BK,EAAmBpc,WAC4BnK,IAA/CumB,EAAmBI,YAAYG,aAC/BP,EAAmBI,YAAYG,aAAe,IAElB,aAArBZ,EAAY/b,KACjB,cAAC,GAAD,oJAKA,cAAC,GAAD,wJAOG,MCvDH4c,GAAW,SAACva,GAEhB,MAAO,CACLiY,KAFsCjY,EAAhCiY,KAGNrL,MAHsC5M,EAA1B4M,MAIZzB,eAJsCnL,EAAnBmL,eAKnB+M,kBAAmB7C,GAA+BrV,KAIhDwa,GAAc,IAAI7D,SAAMpJ,WAAQyK,KAAMzK,WAAQyK,MAC9CyC,GAAiB,iBACjBC,GAAenN,WAAQC,KAAK,IAErBmN,GAAoB,WAAO,IAC9BhC,EAAkBhE,KAAlBgE,cAD6B,EAEsBpN,8BAAmBgP,IAAtEtC,EAF6B,EAE7BA,KAAMrL,EAFuB,EAEvBA,MAAOzB,EAFgB,EAEhBA,eAAgB+M,EAFA,EAEAA,kBAC/B9J,EAAgB6J,EAAK7J,gBACrByD,EAAe3e,qBAJgB,EAMDA,mBAAkBqa,WAAQyK,MANzB,mBAM9B5I,EAN8B,KAMlBoI,EANkB,OAOGtkB,mBAAkBqa,WAAQyK,MAP7B,mBAO9B4C,EAP8B,KAOhBC,EAPgB,KAS/BzG,EAAmBhG,EAAchV,IAAI,MAErCqa,EAAMmH,EAAa7C,IAAI3J,GACvBuF,EAAS,IAAI/E,WAAQR,GACrB0M,EAAYF,EAAaxhB,IAAI6a,6BAA0B7a,IAAIqa,GAC3DsH,GAAW3L,EAAWqI,SAAWmD,EAAanD,OAC9Cf,EAAQqE,EAAU,IAAIpE,SAAMvH,EAAY0L,GAAaN,GACrDQ,EAAgB7P,EAAe2H,GAAG4H,IACpCvP,EAAeqL,IAAIkE,IACnBnN,WAAQyK,KACNiD,EAAqB7L,EAAWoK,GAAGwB,GACnCjM,EACHK,EAAWqI,QAAWmD,EAAanD,YAAwCjkB,EAA/BkjB,EAAM3H,gBAAgBnC,GArBhC,EAuBF0I,GACjCkF,GACA9D,EACAtI,EACA8J,GA3BmC,mBAuB9BwB,EAvB8B,KAuBjBhB,EAvBiB,KA8B/BiB,EAAoBF,GAAqBC,GA9BV,EA+BexmB,mBAA6B,CAAEyK,KAAM,SA/BpD,mBA+B9Boc,EA/B8B,KA+BVC,EA/BU,KAiC/Btc,EAAmBG,GAAsB4c,IACzCS,EACsB,uBAA1Bxd,EAAiBC,MACS,2BAA1BD,EAAiBC,KAEbwd,EAAsB/c,uBAAY,WACtCua,EAAc,iCACb,CAACA,IAEEyC,EAAQhd,uBAAY,WACxBoZ,EAAcjK,WAAQyK,MACtB6C,EAAgBtN,WAAQyK,QACvB,IAQH,OANA3kB,qBAAU,YACH+b,EAAWqI,QAAUmD,EAAanD,QACrCoD,EAAgBxE,4BAEjB,CAACjH,EAAYwL,IAGd,eAAC,IAAD,WACE,eAAC,IAAD,mBAEGG,IAAYG,GACX,cAAC,IAAD,CAAQre,QAAQ,YAAYsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WAAchB,QAASic,EAApF,SACE,cAAC,GAAD,CAAM9kB,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,aACNkK,QAAQ,mBACRE,OAAQ/B,EAAWzD,SAAS,GAC5BqG,UAAWgJ,EAAchO,WACzBiF,SAAUgJ,EACVpJ,aAAcA,EACd7K,KAAK,MACL8K,aAAc1C,EAAWpC,SAAS,GAClC+E,gBAAiB,SAACZ,GAAD,OAAoBqG,EAAcjK,WAAQC,KAAK2D,OAGlE,cAAC,GAAD,CACEpK,MAAM,SACNkK,QAAQ,sBACRE,OAAQyJ,EAAajP,WACrB3E,KAAMyG,GACNoE,aAAcA,EACdC,aAAc8I,EAAa5N,SAAS,GACpC+E,gBAAiB,SAACZ,GAAD,OAAoB0J,EAAgBtN,WAAQC,KAAK2D,OAGpE,cAAC,GAAD,CACEpK,MAAM,sBACNkK,QAAQ,4BACRE,OAAM,UAAK8C,6BACXjN,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6NAUR,cAAC,GAAD,CACEsF,MAAM,gBACNkK,QAAQ,sBACRE,OAAQsC,EAAI9H,SAAS,GACrByF,cAAeuC,EAAO3G,SAAS,GAC/BhG,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6JASR,cAAC,GAAD,CACEsF,MAAM,aACNkK,QAAQ,mBACRE,OAAQ2J,EAAUnP,SAAS,GAC3B3E,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,eAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,2DACiD,IAC9CsZ,GACC,+DAC0BD,EAAUtE,IAAIvC,6BAA0BtI,SAAS,GAAI,IAD/E,oCAEoCsI,4BAAyBjH,WAF7D,iDAYZ,cAAC,GAAD,CAAiBhU,MAAO+V,IAlF1B,OAoFG2J,QApFH,IAoFGA,IACC,cAAC,GAAD,uFAKF,cAAC,GAAD,CACEgB,YAAaC,EACbvF,iBAAkBA,EAClBC,kCAAmC,GACnC0F,mBAAoBA,EACpBC,sBAAuBA,IAGzB,eAAC,IAAD,CAAMnd,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASgc,EAAlC,oBAI6B,eAA5BpB,EAAmBpc,KAClB,cAAC,IAAD,CAAQuB,UAAQ,EAAhB,SACE,cAAC,IAAD,CAASkB,KAAK,OAAOe,GAAI,CAAEhB,MAAO,kBAElCwZ,EACF,cAAC,GAAD,CACExF,cAAesG,GACf9H,OAAQgH,EACRvF,iBAAkBA,EAClBC,kCAAmC,GAJrC,qBASA,cAAC,IAAD,CAAQnV,UAAQ,EAAhB,2BAILgc,GAAwB,cAAC,GAAD,QCvMzBX,GAAW,SAACva,GAEhB,MAAO,CACL0W,MAF6C1W,EAAvC0W,MAGNuB,KAH6CjY,EAAhCiY,KAIbrL,MAJ6C5M,EAA1B4M,MAKnBzB,eAL6CnL,EAAnBmL,eAM1B+M,kBAAmB7C,GAA+BrV,KAIhDya,GAAiB,mBACjBC,GAAenN,WAAQC,KAAK,IA0CrB6N,GAAsB,WAAO,IAChC1C,EAAkBhE,KAAlBgE,cAD+B,EAE2BpN,8BAAmBgP,IAA7E7D,EAF+B,EAE/BA,MAAOuB,EAFwB,EAExBA,KAAMrL,EAFkB,EAElBA,MAAOzB,EAFW,EAEXA,eAAgB+M,EAFL,EAEKA,kBACtCrG,EAAe3e,qBACfooB,EAAgB3f,iBAAc+a,GAJG,EAKHxjB,mBAAkBwjB,EAAMtH,YALrB,mBAKhCA,EALgC,KAKpBoI,EALoB,OAMTtkB,mBAAkBwjB,EAAM6E,SANf,mBAMhCA,EANgC,KAMvBC,EANuB,KAQjC9d,EAAmBG,GAAsB4c,IACzCrM,EAAgB6J,EAAK7J,gBAE3B/a,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,oBAEf,CAACjb,EAAiBC,KAAMgb,IAE3BtlB,qBAAU,WACR,IAAKioB,EAAc5e,QAAQ0S,WAAWoK,GAAG9C,EAAMtH,YAAa,CAC1D,IACMqM,EAlD0B,SAACC,EAA4BhF,GACjE,OAAIgF,EAAexI,cACbwI,EAAezI,SACVyD,EAAMtH,WAAWhW,IAAIsiB,EAAexI,eAEzCwI,EAAevI,UACbuI,EAAexI,cAAcG,GAAGqD,EAAMtH,YACjCsH,EAAMtH,WAAWoH,IAAIkF,EAAexI,eAGxCwD,EAAMtH,WAERsH,EAAMtH,WAsCcuM,CADA5H,cAAWC,QAAQ5E,EAAYkM,EAAc5e,QAAQ0S,YACPsH,GACrEc,EAAciE,GAEhB,IAAKH,EAAc5e,QAAQ6e,QAAQ/B,GAAG9C,EAAM6E,SAAU,CACpD,IACMK,EAxCuB,SAACF,EAA4BhF,GAC9D,OAAIgF,EAAexI,cACbwI,EAAezI,SACVyD,EAAM6E,QAAQniB,IAAIsiB,EAAexI,eAEtCwI,EAAevI,UACbuI,EAAexI,cAAcG,GAAGqD,EAAM6E,SACjC7E,EAAM6E,QAAQ/E,IAAIkF,EAAexI,eAGrCwD,EAAM6E,QAER7E,EAAM6E,QA4BWM,CADG9H,cAAWC,QAAQuH,EAASD,EAAc5e,QAAQ6e,SACV7E,GAC/D8E,EAAWI,GAEbN,EAAc5e,QAAUga,IACvB,CAACA,EAAOtH,EAAYmM,IAEvB,IAAMJ,EAAsB/c,uBAAY,WACtCua,EAAc,iCACb,CAACA,IAEEyC,EAAQhd,uBAAY,WACxBoZ,EAAcd,EAAMtH,YACpBoM,EAAW9E,EAAM6E,WAChB,CAAC7E,EAAMtH,WAAYsH,EAAM6E,UAEtBR,GAAW3L,EAAWoK,GAAG9C,EAAMtH,cAAgBmM,EAAQ/B,GAAG9C,EAAM6E,SAChEO,EAAiBP,EAAQzI,GAAG4D,EAAM6E,SAClCQ,EAAqBD,EAAiBP,EAAQ/E,IAAIE,EAAM6E,SAAWhO,WAAQyK,KAE3EvE,EAAMqI,EApFE,SAACvI,EAAiBC,EAAepF,GAC/C,IAAMuE,EAASY,EAASmC,YAAYlC,EAAQpF,GAE5C,OAAIuE,GAA0B,oBAAhBA,EAAOhV,MAA8BgV,EAAOjI,OAAOwK,WACxDvC,EAAOjI,OAAOwK,WAAW6C,IAAI3J,GAE7Bb,WAAQyK,KA+EbF,CAAQpB,EAAO,IAAIC,SAAMD,EAAMtH,WAAYsH,EAAMhI,KAAKtV,IAAI2iB,IAAsB3N,GAChFb,WAAQyK,KACN8C,EAAYS,EAAQniB,IAAI6a,6BAA0B7a,IAAIqa,GACtDW,EAAmBhG,EAAchV,IAAI,MACrC4iB,EAAejB,EAAU,IAAIpE,SAAMvH,EAAY0L,GAAapE,EAC5D/C,EAAS,IAAI/E,WAAQR,GACrB6N,EAAe9Q,EAAe2H,GAAG4H,IACnCvP,EAAeqL,IAAIkE,IACnBnN,WAAQyK,KACNgD,EAAgBtE,EAAMtH,WAAWhW,IAAI6iB,GACrChB,EAAqB7L,EAAWoK,GAAGwB,GACnCjM,EACHK,EAAWqI,QAAW8D,EAAQ9D,YAA+CjkB,EAAtCwoB,EAAajN,gBAAgBnC,GACjEkH,EAAwBC,cAAWC,QAAQjF,EAAiB2H,EAAM3H,gBAAgBnC,IA1DjD,EA4DJ0I,GACjCoB,EACAsF,EACA5N,EACA8J,GAhEqC,mBA4DhCwB,EA5DgC,KA4DnBhB,EA5DmB,KAmEjCiB,EAAoBF,GAAqBC,GAnER,EAoEaxmB,mBAA6B,CAAEyK,KAAM,SApElD,mBAoEhCoc,EApEgC,KAoEZC,EApEY,KAsEjCkB,EACsB,uBAA1Bxd,EAAiBC,MACS,2BAA1BD,EAAiBC,KAEnB,MAAqB,SAAjB+Y,EAAM3gB,OACD,KAIP,eAAC,IAAD,WACE,eAAC,IAAD,mBAEGglB,IAAYG,GACX,cAAC,IAAD,CAAQre,QAAQ,YAAYsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WAAchB,QAASic,EAApF,SACE,cAAC,GAAD,CAAM9kB,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,aACNkK,QAAQ,mBACRE,OAAQ/B,EAAWzD,SAAS,GAC5BqG,UAAWgJ,EAAchO,WACzBiF,SAAUgJ,EACVpJ,aAAcA,EACd7K,KAAK,MACL8K,aAAc1C,EAAWpC,SAAS,GAClC+E,gBAAiB,SAACZ,GAAD,OAAoBqG,EAAcjK,WAAQC,KAAK2D,OAGlE,cAAC,GAAD,CACEpK,MAAM,WACNkK,QAAQ,wBACRE,OAAQoK,EAAQ5P,WAChB3E,KAAMyG,GACNoE,aAAcA,EACdC,aAAcyJ,EAAQvO,SAAS,GAC/B+E,gBAAiB,SAACZ,GAAD,OAAoBqK,EAAWjO,WAAQC,KAAK2D,OAG/D,cAAC,GAAD,CACEpK,MAAM,sBACNkK,QAAQ,4BACRE,OAAM,UAAK8C,6BACXjN,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6NAUR,cAAC,GAAD,CACEsF,MAAM,gBACNkK,QAAQ,sBACRE,OAAQsC,EAAI9H,SAAS,GACrByF,cAAeuC,EAAO3G,SAAS,GAC/BhG,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,6JASR,cAAC,GAAD,CACEsF,MAAM,aACNkK,QAAQ,mBACRE,OAAQ2J,EAAUnP,SAAS,GAC3B3E,KAAMyG,GACNkD,SACE,cAAC,GAAD,CACEpS,QACE,eAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,2DACiD,IAC9CsZ,GACC,+DAC0BD,EAAUtE,IAAIvC,6BAA0BtI,SAAS,GAAI,IAD/E,oCAEoCsI,4BAAyBjH,WAF7D,iDAYZ,cAAC,GAAD,CAAiBhU,MAAO+V,EAAiB4D,OAAQmB,IAlFnD,OAoFG4E,QApFH,IAoFGA,IACC,cAAC,GAAD,4EAKF,cAAC,GAAD,CACEgB,YAAaC,EACbvF,iBAAkBA,EAClBC,kCAAmC,GACnC0F,mBAAoBA,EACpBC,sBAAuBA,IAGzB,eAAC,IAAD,CAAMnd,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASgc,EAAlC,oBAICxB,EACC,cAAC,GAAD,CACExF,cAAesG,GACf9H,OAAQgH,EACRvF,iBAAkBA,EAClBC,kCAAmC,GAJrC,qBASA,cAAC,IAAD,CAAQnV,UAAQ,EAAhB,2BAILgc,GAAwB,cAAC,GAAD,QCtRzBlN,GAAS,SAAC,GAAD,MAAsD,CACnEkO,yBADa,EAAGA,2BAILC,GAAoC,WAAO,IAC9CD,EAA6B3Q,8BAAmByC,IAAhDkO,yBAEWxjB,EACfO,IADFP,QAAWwF,KAGPke,EAAkB,qBAClBtD,EAAqBjb,GAAsBue,GAEzCzD,EAAkBhE,KAAlBgE,cAQR,OANAtlB,qBAAU,WACwB,qBAA5BylB,EAAmBnb,MACrBgb,EAAc,sCAEf,CAACG,EAAmBnb,KAAMgb,IAEM,uBAA5BG,EAAmBnb,KACxB,cAAC,IAAD,CAAMd,QAAQ,iBAAd,SACE,eAAC,IAAD,CAAQqC,UAAQ,EAACiC,GAAI,CAAEwG,GAAI,GAA3B,UACE,cAAC,IAAD,CAASxG,GAAI,CAAES,GAAI,EAAGzB,MAAO,SAAWC,KAAK,SAD/C,iCAK4B,2BAA5B0Y,EAAmBnb,MACO,cAA5Bmb,EAAmBnb,KACnB,cAAC,IAAD,CAAMd,QAAQ,iBAAd,SACE,cAACyB,GAAD,CACEP,GAAIqe,EACJle,KAAMxF,EAAQ2jB,uBAAuB9H,KAAK7b,OAASlF,GAFrD,SAIE,eAAC,IAAD,CAAQ2N,GAAI,CAAEwG,GAAI,GAAlB,mBAA8BuU,EAAyBvQ,WAAvD,cAGF,MCzCAqC,GAAS,SAAC,GAAD,MAAsD,CACnEsO,sBADa,EAAGJ,yBACgCzE,SAGrC8E,GAA0B,WAAO,IACpCD,EAAyB/Q,8BAAmByC,IAA5CsO,qBACA3D,EAAkBhE,KAAlBgE,cAEFU,EAAkBjb,uBAAY,WAClCua,EAAc,wBACb,CAACA,IAEJ,OACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,eAAC,IAAD,CAAKxX,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CAAa6X,MAAM,gCAAnB,SACGmD,EACG,uEACA,4CAGN,eAAC,IAAD,CAAMzf,QAAQ,iBAAd,UACGyf,GAAwB,cAAC,GAAD,KACvBA,GAAwB,cAAC,IAAD,CAAQnd,QAASka,EAAjB,kCCxB9BrL,GAAS,SAAC,GAAD,MAAsD,CACnEsO,sBADa,EAAGJ,yBACgCzE,SAGrC+E,GAA4B,WAAO,IACtCF,EAAyB/Q,8BAAmByC,IAA5CsO,qBACA3D,EAAkBhE,KAAlBgE,cAEFU,EAAkBjb,uBAAY,WAClCua,EAAc,wBACb,CAACA,IAEJ,OACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,eAAC,IAAD,CAAKxX,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CAAa6X,MAAM,kCAAnB,SACGmD,EACG,uEACA,4CAGN,eAAC,IAAD,CAAMzf,QAAQ,iBAAd,UACGyf,GAAwB,cAAC,GAAD,KACvBA,GAAwB,cAAC,IAAD,CAAQnd,QAASka,EAAjB,kCCrBvB1C,GAAkB,SAAAlN,GAG7B,OAFiBkL,KAAT8H,MAIN,IAAK,SACH,OAAO,cAAC,GAAD,eAAmBhT,IAE5B,IAAK,YACH,OAAO,cAAC,GAAD,eAAeA,IAExB,IAAK,UACH,OAAO,cAAC,GAAD,2BAAkBA,GAAlB,IAAyB2F,WAAY7B,WAAQyK,KAAMtJ,KAAMnB,WAAQyK,QAE1E,IAAK,UACH,OAAO,cAAC,GAAD,eAAavO,IAEtB,IAAK,aACH,OAAO,cAAC,GAAD,eAAqBA,IAE9B,IAAK,WACH,OAAO,cAAC,GAAD,eAAmBA,IAE5B,IAAK,OACH,OAAO,cAAC,GAAD,eAAaA,MC1BbiT,GAAsC,SAAC,GAAiC,IAA/BpmB,EAA8B,EAA9BA,KAAMiI,EAAwB,EAAxBA,QAAS5L,EAAe,EAAfA,SACnE,OACE,eAAC,IAAD,CAAMwO,GAAI,CAAEuK,GAAI,QAAhB,UACE,eAAC,IAAD,CAAMvK,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,aAAc+D,KAAM,IAAKlE,WAAY,KAAvF,UACE,cAAC,IAAD,UAAO3M,IACNiI,GAAW,cAAC,GAAD,CAAU6B,KAAK,KAAK7B,QAAS,cAAC,IAAD,CAAM1B,QAAQ,UAAd,SAAyB0B,SAEpE,cAAC,IAAD,CAAM4C,GAAI,CAAEiC,eAAgB,WAAY+D,KAAM,GAAK/F,WAAY,UAA/D,SAA4EzO,QCT5EgqB,GAAiB,SAAC,GAAD,MAAsE,CACzFxR,eADmB,EAAGA,eAEtBC,YAFmB,EAAmBA,YAGtCC,YAHmB,EAAgCA,cAMjDuR,GAAqB,WAAO,IAAD,EACwBrR,8BAAmBoR,IAAhExR,EADqB,EACrBA,eAAgBC,EADK,EACLA,YAAaC,EADR,EACQA,YAErC,OACI,eAAC,IAAD,CAAKlK,GAAI,CAAE+C,GAAI,GAAf,UACI,cAAC,IAAD,kCACA,eAAC,GAAD,CAAW5N,KAAK,MAAhB,cAAwB6U,EAAeQ,SAAS,MAChD,eAAC,GAAD,CAAWrV,KAAMmX,GAAjB,cAAyBrC,EAAYO,cACrC,cAAC,GAAD,CAAWrV,KAAMoX,GAAjB,SAAsBrC,EAAYM,iBAKxCgB,GAAc,SAAC,GAAD,SAAGC,OAEjBiQ,GAAsB,WACxB,IAAMjQ,EAAQrB,8BAAmBoB,IAEjC,OACI,eAAC,IAAD,WACI,cAAC,IAAD,yBACA,eAAC,GAAD,CAAWrW,KAAK,MAAhB,cAAwBsW,EAAMjB,kBAgBpCqC,GAAS,SAAC,GAAD,MAQW,CACtBC,eATW,EACXA,eASArB,MAVW,EAEXA,MASAsB,MAXW,EAGXA,MASAC,oBAZW,EAIXA,oBASAC,cAbW,EAKXA,cASAC,eAdW,EAMXA,eASAC,gBAfW,EAOXA,kBAWEC,GAA8C,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAUjEjD,8BAAmByC,IAPnBC,EAHiE,EAGjEA,eACArB,EAJiE,EAIjEA,MACAuB,EALiE,EAKjEA,oBACAD,EANiE,EAMjEA,MACAE,EAPiE,EAOjEA,cACAC,EARiE,EAQjEA,eACAC,EATiE,EASjEA,gBAGEG,EACFP,EAAMQ,KAAKC,SAAW,IAAIC,WAAQT,EAAoBU,IAAIX,EAAMQ,OAC9DI,EAA0B,IAAIF,WAAQV,EAAMa,gBAAgBnC,IAC5DoC,EAAkB,IAAIJ,WAAQR,GAC9Ba,EAAmB,IAAIL,WAAQP,GAE/ByO,EAAW,SAACC,GACd,OAAOvO,GAAcA,EAAYrW,SAAS4kB,IAG9C,OACI,eAAC,IAAD,CAAK5b,GAAI,CAAE+C,GAAI,GAAf,UACI,cAAC,IAAD,iCAEC4Y,EAAS,eACN,cAAC,GAAD,CACIxmB,KAAK,gBACLiI,QAAQ,sMAFZ,SAIKyQ,EAAgBhC,SAAS,KAGjC8P,EAAS,eACN,cAAC,GAAD,CACIxmB,KAAK,iBACLiI,QAAQ,8JAFZ,SAIK0Q,EAAiBjC,SAAS,KAGlC8P,EAAS,QACN,eAAC,GAAD,CACIxmB,KAAK,MACLiI,QAAQ,mHAFZ,UAIK2P,EAAMkB,WAAWC,UAJtB,IAIiC,cAAC,IAAD,CAAMlO,GAAI,CAAEW,SAAU,GAAtB,qBAC7B,eAAC,IAAD,CAAMX,GAAI,CAAEW,SAAU,GAAtB,mBACayL,WAAQC,KAAKU,EAAMkB,WAAW2I,IAAInL,IAAQyC,UADvD,UAKPyN,EAAS,WACN,cAAC,GAAD,CAAWxmB,KAAK,SAASiI,QAAQ,mDAAjC,SACKgP,WAAQC,KAAKS,GAAgBtC,SAAS,KAG9CmR,EAAS,gBACN,cAAC,GAAD,CAAWxmB,KAAK,cAAciI,QAAQ,iDAAtC,SACK2P,EAAMQ,KAAKW,YAGnByN,EAAS,YAAcrO,GACpB,eAAC,GAAD,CACInY,KAAK,yBACLiI,QAAQ,kHAFZ,UAKK4P,EAAoBkB,UACrB,eAAC,IAAD,CAAMlO,GAAI,CAAEW,SAAU,GAAtB,kBAAmC2M,EAAuBzB,SAAS,GAAnE,UAGP8P,EAAS,gBACN,cAAC,GAAD,CACIxmB,KAAK,cACLiI,QAAQ,mEAFZ,SAIK+P,EAAgBe,YAGxByN,EAAS,QACN,cAAC,GAAD,CACIxmB,KAAK,yBACLiI,QAAQ,yHAFZ,SAIKuQ,EAAwBnD,aAGhCmR,EAAS,aACN,cAAC,GAAD,CACIxmB,KAAK,gBACLiI,QAAQ,2UAFZ,SAIK2P,EAAMoB,+BAA+B1C,GAAS,cAAC,IAAD,CAAKzM,MAAM,SAAX,iBAAgC,WAgBtF6c,GAA0C,SAAC,GAC8B,IAAD,IAA/EngB,eAA+E,MAArE,OAAqE,EAA7DogB,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,cAAe3O,EAAkB,EAAlBA,YAAkB,EAEpDtb,oBAAS,GAF2C,mBAE1EkqB,EAF0E,KAE/DvhB,EAF+D,KAmBjF,OACI,eAAC,IAAD,CAAYgB,UAAZ,UACI,cAAC,IAAD,CACIsC,QAAS,WAAOtD,GAASuhB,IACzBjc,GAAI,CACAgC,QAAS,OACTC,eAAgB,SAChBjD,MAAO,SACPkD,OAAQ,WANhB,SASI,cAAC,IAAD,6BAEH+Z,GApBL,qCACKH,GAAgB,cAAC,GAAD,IAChBC,GAAgB,cAAC,GAAD,CAAe1O,YAAaA,IAC5C2O,GAAiB,cAAC,GAAD,WCxLjBE,GAAwD,SAAC,GAAD,IACnEC,EADmE,EACnEA,aACAC,EAFmE,EAEnEA,WAFmE,OAInE,eAAC,IAAD,WACE,cAAC,IAAD,qBAEA,cAAC,IAAD,CAAKpc,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACE,eAAC,GAAD,CACE6X,MAAM,iCACN7d,KACE,cAAC,IAAD,CAAK6F,GAAI,CAAEhB,MAAO,WAAlB,SACE,cAAC,GAAD,CAAM7J,KAAK,2BAJjB,UAQE,eAAC,IAAD,wDAC6CgnB,EAD7C,yBAIA,eAAC,IAAD,CAAWnc,GAAI,CAAE8C,GAAI,GAArB,mCACyB,IACvB,cAAC,IAAD,CAAM9C,GAAI,CAAE8B,WAAY,UAAxB,SAAqCsa,EAAWC,mBAFlD,gBChBKC,GAAoD,SAAC,GAK3D,IAJLtJ,EAII,EAJJA,cACAjV,EAGI,EAHJA,SACAwe,EAEI,EAFJA,WACAC,EACI,EADJA,kBAGmBjlB,EACfO,IADFP,QAAWwF,KAFT,EAKsBD,GACxBkW,EACAzb,EAAQklB,WAAWrJ,KAAK7b,EAASglB,EAAYC,IAFxChf,EALH,oBAUJ,OACE,cAAC,IAAD,CAAQO,SAAUA,EAAUC,QAASR,EAArC,sBCZEkW,GAAa,IAAIjG,WAAQkG,6BAA0B9H,SAAS,GAE5DgB,GAAS,SAAC,GAAD,MAA6D,CAC1EpB,MADa,EAAGA,MAEhBqL,KAFa,EAAUA,KAGvB/J,MAHa,EAAgBA,MAI7B9C,YAJa,EAAuBA,cAOhC+I,GAAgB,aAET0J,GAA8B,WAAO,IAAD,EACHtS,8BAAmByC,IAAvDpB,EADuC,EACvCA,MAAOqL,EADgC,EAChCA,KAAM/J,EAD0B,EAC1BA,MAAO9C,EADmB,EACnBA,YADmB,EAEXlY,mBAASqa,WAAQyK,MAFN,mBAExC0F,EAFwC,KAE5BI,EAF4B,OAGL5qB,oBAAS,GAHJ,mBAGxCwgB,EAHwC,KAGzBqK,EAHyB,KAIzClM,EAAe3e,qBAEf8qB,GAASN,EAAWjG,OACpBwG,EAAYP,EAAW7O,IAAIjC,GAC3ByB,EAAiB4J,EAAK5J,eAAeqP,EAAW7O,IAAIX,EAAMQ,OAC1DiF,EAAS,IAAI/E,WAAQP,GACrB6P,EAASD,EAAUlG,IAAI1J,GACvBsP,EAAoBtP,EAAejV,IAAI,MAEvC0f,EAAqBjb,GAAsBsW,IAEjD9gB,qBAAU,WAEsB,uBAA5BylB,EAAmBnb,MACS,2BAA5Bmb,EAAmBnb,KAEnBogB,GAAiB,GACoB,WAA5BjF,EAAmBnb,MAAiD,cAA5Bmb,EAAmBnb,KACpEogB,GAAiB,GACoB,cAA5BjF,EAAmBnb,OAC5BmgB,EAAcvQ,WAAQyK,MACtB+F,GAAiB,MAElB,CAACjF,EAAmBnb,KAAMogB,EAAkBD,IA3BA,MA6Bd5P,EAAMqI,8BAA8B3J,GACjE,EACE,EACA,eAAC,GAAD,gFACqE,IACnE,cAAC,GAAD,UAASiI,KAFX,gCAKF6I,EAAW5K,GAAG1H,GACd,EACE,EACA,eAAC,GAAD,wEAC6D,IAC3D,eAAC,GAAD,WACGsS,EAAWlH,IAAIpL,GAAaO,WAD/B,IAC4C8B,MAH9C,QAQF,EACE,EACA,eAAC,GAAD,+BACmB,eAAC,GAAD,WAASwQ,EAAUzH,IAAI0H,GAAQvS,SAAS,GAAxC,UADnB,mBAC4F,IAC1F,eAAC,GAAD,WACG+R,EAAW/R,WADd,IAC2B8B,MAH7B,QAlDyC,mBA6BxC0Q,EA7BwC,KA6B7BzF,EA7B6B,KA2D/C,OACE,eAAC,IAAD,WACE,eAAC,IAAD,oBAEGsF,IAAUtK,GACT,cAAC,IAAD,CACE7W,QAAQ,YACRsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WACjChB,QAAS,kBAAM2e,EAAcvQ,WAAQyK,OAHvC,SAKE,cAAC,GAAD,CAAM1hB,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,SACNkK,QAAQ,cACRE,OAAQuM,EAAW/R,WACnBqG,UAAW5G,EAAY4B,WACvBiF,SAAUyL,EAAWlE,GAAGpO,GACxBpE,KAAMyG,GACAoE,eACNC,aAAc4L,EAAW1Q,SAAS,GAClC+E,gBAAiB,SAAAZ,GAAM,OAAI2M,EAAcvQ,WAAQC,KAAK2D,OAGxD,cAAC,GAAD,CACEpK,MAAM,iBACNkK,QAAQ,aACRE,OAAQ+M,EAAOlR,SAAS,GACxBoE,cAAeuC,EAAO3G,SAAS,GAC/BhG,KAAK,MACL2J,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEwH,SAAU,SAAxC,mKASLqV,IAAUG,IAAczF,GACzB,eAAC,GAAD,kCAAwCjL,GAAxC,4BAGF,cAAC,IAAD,CAAM5Q,QAAQ,iBAAd,SACE,cAAC,GAAD,CACEsX,cAAeA,GACfjV,UAAW8e,IAAUG,EACrBT,WAAYA,EACZC,kBAAmBA,SAKxBjK,GAAiB,cAAC,GAAD,QC3IlB0K,GAAuB,SAAC,GAAD,SAAGC,gBAEnBC,GAAuB,WAAO,IAAD,EAKpCrlB,IAHFP,QACEzB,WAAcsnB,EAHsB,EAGtBA,eAAgBC,EAHM,EAGNA,gBAI5BH,EAAiB9S,8BAAmB6S,IAEpCK,EAAsBC,KAAKC,MAAMH,EAbd,OAenBI,EADiBL,EAAeM,UAAY,IACRL,EACpCM,EAAmB,IAAIC,KAAwB,IAAnBH,GAGlC,OAF2BP,EAAiBO,EAGnC,cAAC,GAAD,CAAoBtB,aAAcmB,EAAqBlB,WAAYuB,IAGrE,cAAC,GAAD,KCvBIE,GAAsB,kBACjC,cAAC,IAAD,CAAWniB,QAAQ,UAAnB,SACE,eAAC,IAAD,CAAWA,QAAQ,SAAnB,UACE,cAAC,GAAD,CAAgB2R,YAAa,CAAC,MAAO,cAAe,SACpD,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAa0O,cAAY,EAACC,eAAa,UCPhC8B,GAAiC,WAAO,IAEvCtqB,EACRsE,IADF/D,OAAUP,YAGZ,OACE,eAAC,IAAD,CACEwM,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBsF,EAAG,EACHpH,EAAG,EACHoG,SAAU,QAEV5E,OAAQ,EACRC,aAAc,MACdY,YAAa,UACbQ,UAAW,GAbf,UAgBE,eAAC,IAAD,CAAMhD,GAAI,CAAEC,WAAY,SAAUuG,GAAI,EAAGzD,GAAI,GAA7C,UACE,cAAC,GAAD,CAAM5N,KAAK,uBAAuB8J,KAAK,OACvC,cAAC,IAAD,CAASe,GAAI,CAAE8G,GAAI,EAAGnG,SAAU,QAAhC,4CAGF,eAAC,IAAD,CAAWX,GAAI,CAAEW,SAAU,GAA3B,oEACyD,4BAAIwK,GAAe3X,KAAkB,IAD9F,0DCnBAuqB,GAAwE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAE5DzmB,EACfO,IADFP,QAAWwF,KAGPke,EAAkB,oBAClBtD,EAAqBjb,GAAsBue,GAEjD,MAAmC,uBAA5BtD,EAAmBnb,KACxB,eAAC,IAAD,CAAQuB,UAAQ,EAAhB,UACE,cAAC,IAAD,CAASiC,GAAI,CAAES,GAAI,EAAGzB,MAAO,SAAWC,KAAK,SAD/C,+BAI8B,2BAA5B0Y,EAAmBnb,MACO,cAA5Bmb,EAAmBnb,KACnB,cAACW,GAAD,CAAaP,GAAIqe,EAAiBle,KAAMxF,EAAQ0mB,iBAAiB7K,KAAK7b,EAASymB,GAA/E,SACE,cAAC,IAAD,yBAEA,MAGOE,GAAiC,WAAO,IAC3CtoB,EAAYkC,IAAZlC,QAD0C,EAGV7D,mBAASqa,WAAQC,KAAK,KAHZ,mBAG3C2R,EAH2C,KAG7BG,EAH6B,OAI5BpsB,mBAASqa,WAAQC,KAAK,KAJM,mBAI3C+R,EAJ2C,KAItCC,EAJsC,OAKEtsB,mBAAS,MALX,mBAK3CusB,EAL2C,KAKvBC,EALuB,KAOlD,OACE,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,qCAEA,cAAC,IAAD,CAAKve,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,4BACA,cAAC,IAAD,CAAOzE,QAAQ,OAAf,eAEA,cAAC,IAAD,CACEsE,GAAI,CAAEuG,SAAU,SAChB/J,KAAK,SACLyP,KAAK,MACLpU,MAAOymB,EACPpS,SAAU,SAAAhD,GACRqV,EAAsBrV,EAAEC,OAAOtR,OAC/B,IACE,IAAM2mB,EAAkBpS,WAAQC,KAAKnD,EAAEC,OAAOtR,OAAS,GAAG6V,IAAI,KACxD+Q,EAASrS,WAAQsS,IAAIrJ,IAAImJ,GAE/BL,EAAgBK,GAChBH,EAAOI,GACP,YAEJrN,OAAQ,WACNmN,EAAsBP,EAAapH,IAAI,KAAK/K,uBAOtD,eAAC,IAAD,CACE7L,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBsF,EAAG,EACHzE,GAAI,CAAC,EAAG,KAAM,GACdC,GAAI,EACJ5C,EAAG,EACHoG,SAAU,QAEV5E,OAAQ,EACRC,aAAc,MACdY,YAAa,SACbQ,UAAW,GAff,UAkBE,eAAC,IAAD,CAAMhD,GAAI,CAAEC,WAAY,SAAUuG,GAAI,EAAG7F,SAAU,GAAnD,UACE,cAAC,GAAD,CAAMxL,KAAK,eACX,cAAC,IAAD,CAAS6K,GAAI,CAAE8G,GAAI,EAAGnG,SAAU,QAAhC,mCAGF,eAAC,IAAD,CAAWX,GAAI,CAAEW,SAAU,EAAGmC,GAAI,GAAlC,uCAC4B,4BAAIlN,GAAWuV,GAAevV,KAD1D,cACmF,IACjF,8BAAIwoB,EAAIxH,IAAI,KAAK/K,WAAjB,OAFF,wDAKA,cAAC,IAAD,CAAW7L,GAAI,CAAEW,SAAU,EAAGmC,GAAI,EAAGhB,WAAY,QAAjD,sFAIA,cAAC,IAAD,CAAW9B,GAAI,CAAEW,SAAU,EAAGmC,GAAI,GAAlC,kJAMF,cAAC,GAAD,CAAkCkb,qBCzG3BW,GAA0E,SAAC,GAAD,IACrFC,EADqF,EACrFA,UADqF,OAGrF,qCACE,eAAC,IAAD,CACE5e,GAAI,CACFgC,QAAS,OACT0F,cAAe,SACfzF,eAAgB,eAEhBsF,EAAG,EACHzE,GAAI,EACJC,GAAI,EACJ5C,EAAG,EACHoG,SAAU,QAEVrG,GAAI,2BACJlB,MAAO,UAEP2C,OAAQ,EACRC,aAAc,MACdY,YAAa,UACbQ,UAAW,GAlBf,UAqBE,eAAC,IAAD,CAAMhD,GAAI,CAAEC,WAAY,SAAUuG,GAAI,EAAGzD,GAAI,EAAGpC,SAAU,GAA1D,UACE,cAAC,GAAD,CAAMxL,KAAK,UACX,cAAC,IAAD,CAAS6K,GAAI,CAAE8G,GAAI,EAAGnG,SAAU,GAAhC,yBAGF,cAAC,IAAD,CAAWX,GAAI,CAAEW,SAAU,GAA3B,oEAGF,cAAC,IAAD,CAAQ3C,QAAS4gB,EAAjB,iCC5BEC,GAAiB,SAAC,GAAD,SAAGC,UAEbC,GAAyB,WAAO,IAAD,EAItCjnB,IAFFlC,EAFwC,EAExCA,QACUpC,EAH8B,EAGxCO,OAAUP,YAGNsrB,EAAW1U,8BAAmByU,IAC9BG,EAAexrB,IAAgBC,KAAmC,iBAApBqrB,EAASlqB,OAPnB,EASJ7C,oBAAS,GATL,mBASnCktB,EATmC,KAStBC,EATsB,KAiB1C,OANAhtB,qBAAU,WACJ8sB,GACFE,GAAe,KAEhB,CAACF,IAEAC,GAAeD,EACO,eAApBF,EAASlqB,OACJ,cAAC,GAAD,CAA6BgqB,UAAW,kBAAMM,GAAe,MAC3DtpB,IAAYpC,EACd,cAAC,GAAD,IAEA,cAAC,GAAD,IAGF,cAAC,GAAD,KCjCE2rB,GAAkBpqB,wBAA0C,MAE5DqqB,GAAc,WACzB,IAAMhuB,EAAsC4G,qBAAWmnB,IAEvD,GAAgB,OAAZ/tB,EACF,MAAM,IAAIuD,MAAM,yDAGlB,OAAOvD,GCXHgoB,GAAW,SAAC,GAAD,MAAgE,CAC/EiG,mCADe,EAAGA,qCAIPC,GAA0B,WAAO,IACpCD,EAAuCjV,8BAAmBgP,IAA1DiG,mCAER,OACE,eAAC,IAAD,CAAMrf,GAAI,CAAES,GAAI,EAAGE,SAAU,EAAGmB,WAAY,UAA5C,UACGud,EAAmC7U,SAAS,GAD/C,sBCIE+U,GAAe,SAACC,EAA0BC,GAA3B,gCACND,EAAiBE,cADX,0FAOPD,EAAgBC,cAPT,kDAad,SAAeC,GAAtB,qC,8CAAO,WAA2BH,EAA0BC,GAArD,mCAAAvvB,EAAA,sEACkBwC,OAAO8B,MAAM,6DAA8D,CAChG8U,OAAQ,OACRsW,QAAS,CACP,eAAgB,oBAElB9b,KAAM+b,KAAKC,UAAU,CACnBC,MAAOR,GAAaC,EAAkBC,GACtCO,UAAW,SARV,WACCvrB,EADD,QAYSC,GAZT,yCAaIurB,QAAQC,OAAO,iDAbnB,uBAgB2CzrB,EAASX,OAhBpD,mBAgBGqsB,EAhBH,EAgBGA,OAAMC,EAhBT,EAgBSA,QAhBT,0CAmBIH,QAAQC,OAAOE,IAnBnB,WAuBgC,kBAAnC,OAAOD,QAAP,IAAOA,GAAP,UAAOA,EAAMpb,aAAb,aAAO,EAAasb,aACc,kBAAlC,OAAOF,QAAP,IAAOA,GAAP,UAAOA,EAAMG,YAAb,aAAO,EAAYC,aACgB,kBAAnC,OAAOJ,QAAP,IAAOA,GAAP,UAAOA,EAAMG,YAAb,aAAO,EAAYE,cACe,kBAAlC,OAAOL,QAAP,IAAOA,GAAP,UAAOA,EAAMM,cAAb,aAAO,EAAcC,UA1BlB,wBA4BGC,EAAcvU,WAAQC,KAAK8T,EAAKM,OAAOC,UACvCE,EAAexU,WAAQC,KAAK8T,EAAKpb,MAAMsb,YAAYzJ,IAAI+J,GACvDE,EAAgBzU,WAAQC,KAAK8T,EAAKG,KAAKC,YAAY7S,IACvDtB,WAAQC,KAAK8T,EAAKG,KAAKE,cA/BtB,kBAkCI,CAAEI,eAAcC,kBAlCpB,iCAqCEZ,QAAQC,OAAO,8DArCjB,6C,sBCvBP,I,GAAM9G,GAAW,SAAC,GAAD,MAGS,CACxBiG,mCAJe,EACfA,mCAIAyB,qBALe,EAEfA,uBAMWC,GAAkB,WAAO,IAAD,EAK/BjpB,IAHFP,QACEzB,WAAc8T,EAHiB,EAGjBA,UAAWoX,EAHM,EAGNA,8BAHM,EAOkC5W,8BAAmBgP,IAAhFiG,EAP2B,EAO3BA,mCAAoCyB,EAPT,EAOSA,qBAPT,EAQD/uB,wBAA8BM,GAR7B,mBAQ5B4uB,EAR4B,KAQjBC,EARiB,OASCnvB,wBAA8BM,GAT/B,mBAS5B8uB,EAT4B,KAShBC,EATgB,KAU7BC,EAAehC,EAAmC/I,QAAUwK,EAAqBxK,OACjFkJ,EAAmB5V,EAAS,UAC5B6V,EAAkB7V,EAAS,SAE3B0X,EADmBjC,EAAmC3R,IAAIsT,GACzBtT,IAAI,OAc3C,GAZAxb,qBAAU,WACR,sBAAC,gCAAAhC,EAAA,+EAEiDyvB,GAAYH,EAAkBC,GAF/E,gBAEWmB,EAFX,EAEWA,aAAcC,EAFzB,EAEyBA,cACtBK,EAAaN,GACbQ,EAAcP,GAJjB,kDAMG3sB,QAAQvC,MAAR,MANH,yDAAD,KASC,CAAC6tB,EAAkBC,IAElB4B,QAA8BhvB,IAAd4uB,QAA0C5uB,IAAf8uB,EAA0B,OAAO,KAEhF,IAAMI,EAAqBlC,EAAmCzI,IAAIqK,GAC5DO,EAAwBV,EAAqBlK,IAAIuK,GACjDM,EAAkBF,EAAmB7T,IAAI8T,GAAuB5K,IAAI,KAE1E,OAAI6K,EAAgBnL,OAAe,KAGjC,eAAC,IAAD,CAAO5a,QAAQ,QAAf,UACE,eAAC,IAAD,kBACG4lB,QADH,IACGA,OADH,EACGA,EAAe9W,SAAS,GAD3B,cAC0CiX,EAAgB5V,SAAS,GADnE,OAGA,cAAC,GAAD,CACEzO,QACE,eAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEwH,SAAU,CAAC,OAAQ,UAAjD,UACE,eAAC,IAAD,iBACK,cAAC,IAAD,CAAMxH,GAAI,CAAE8B,WAAY,QAAxB,sBADL,+HAIA,eAAC,IAAD,CAAW9B,GAAI,CAAEW,SAAU,OAAQ8D,WAAY,YAAa3B,GAAI,GAAhE,qDAC2C,IACzC,cAAC,IAAD,CAAM9C,GAAI,CAAE8B,WAAY,QAAxB,uBAEF,eAAC,IAAD,CAAW9B,GAAI,CAAEW,SAAU,OAAQ8D,WAAY,aAA/C,eAEG8c,EAAmBrT,UAFtB,OAEqCsT,EAAsBtT,UAF3D,YAGE,eAAC,IAAD,CAAMlO,GAAI,CAAE8B,WAAY,QAAxB,cAAoC2f,EAAgB5V,SAAS,GAA7D,mBC5DD6V,GAAqB,WAAO,IAFxBC,EAGPnK,EAAkB4H,KAAlB5H,cAIU5N,EAEd9R,IAHFP,QACEzB,WAAc8T,UAIZgY,EAAqB3kB,uBAAY,WACrCua,EAAc,mBACb,CAACA,IAEJ,OACE,eAAC,IAAD,WACE,eAAC,IAAD,oCAEE,cAAC,IAAD,CAAMxX,GAAI,CAAEiC,eAAgB,YAA5B,SACE,cAAC,GAAD,SAGJ,eAAC,IAAD,CAAKjC,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,eAAC,GAAD,CAAa6X,MAAM,2BAAnB,UACE,cAAC,IAAD,4EAEA,eAAC,IAAD,CAAWhY,GAAI,CAAE8C,GAAI,GAArB,gEACsD,IACpD,eAAC,IAAD,CAAM+e,MA7BDF,EA6Be/X,EAAS,UA7BzB,4CAA8D+X,IA6BrBxY,OAAO,SAApD,uCAC4B,cAAC,GAAD,CAAMhU,KAAK,oBAAoB8J,KAAK,gBAKpE,eAAC,IAAD,CAAMvD,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAMsE,GAAI,CAAEiC,eAAgB,aAAchC,WAAY,SAAU+F,KAAM,GAAtE,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAQhI,QAAS4jB,EAAjB,6BC7CJxI,GAAW,SAAC,GAAD,MAIS,CACxB0I,gBALe,EACfA,gBAKAC,kBANe,EAEfA,kBAKAC,qBAPe,EAGfA,uBAiBWC,GAAqB,SAACjS,GAA0C,IAAD,EACL5F,8BAAmBgP,IAAhF0I,EADkE,EAClEA,gBAAiBC,EADiD,EACjDA,kBAAmBC,EAD8B,EAC9BA,qBACtCE,EAAgBF,EAAqBrQ,GAAG3B,GACxCmS,EAAgBD,EAClBF,EAAqB3M,IAAIrF,GACzB5D,WAAQC,KAAK2D,GAAQqF,IAAI2M,GACvBI,EAAeJ,EAAqB/pB,IAAI6pB,GACxCO,EAAqBrS,EAAOqI,GAAG+J,GAErC,GAAIF,EACF,MAAO,CACLI,SAAS,EACTC,aAAa,EACbC,mBAAmB,EACnBN,gBACAC,gBACAC,eACAC,sBAIJ,IAAME,GAAeR,EAAkBzL,QAAUyL,EAAkBU,IAAIN,GACjEK,GAAqBV,EAAgBxL,QAAUwL,EAAgBW,IAAIN,GAEzE,MAAO,CACLG,QAASC,GAAeC,EACxBD,cACAC,oBACAN,gBACAC,gBACAC,eACAC,uBC1CErP,GAAgB,eAET0P,GAAkC,SAAC,GAAgB,IAAd1S,EAAa,EAAbA,OACxCwH,EAAkB4H,KAAlB5H,cAEWjgB,EACfO,IADFP,QAAWwF,KAGPR,EAAmBG,GAAsBsW,IANc,EAOXiP,GAAmBjS,GAA7DsS,EAPqD,EAOrDA,QAASJ,EAP4C,EAO5CA,cAAeC,EAP6B,EAO7BA,cAE1BQ,EAAoBT,EACtB3qB,EAAQqrB,iBAAiBxP,KAAK7b,EAAS4qB,GACvC5qB,EAAQsrB,eAAezP,KAAK7b,EAAS4qB,GAEnCW,EAAgBX,EAAc7L,SAAWgM,EAQ/C,OANApwB,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,qBAEf,CAACjb,EAAiBC,KAAMgb,IAGzB,cAACra,GAAD,CACEP,GAAIoW,GACJjW,KAAM4lB,EACNrlB,YAAY,YACZD,iBAAiB,SAJnB,SAME,cAAC,IAAD,CAAQU,SAAU+kB,EAAlB,wBC7BA9P,GAAgB,aAET+P,GAA0C,SAAC,GAAgB,IAAd/S,EAAa,EAAbA,OAErCzY,EACfO,IADFP,QAAWwF,KAFwD,EAINklB,GAAmBjS,GAA1EsS,EAJ6D,EAI7DA,QAASC,EAJoD,EAIpDA,YAAaL,EAJuC,EAIvCA,cAAeC,EAJwB,EAIxBA,cAE7C,OAAKI,GAQAD,GAAWH,EAAc7L,OACrB,KAIP,eAAC,GAAD,WACG4L,GACC,cAAC/kB,GAAD,CAAaP,GAAIoW,GAAejW,KAAMxF,EAAQqrB,iBAAiBxP,KAAK7b,EAAS4qB,GAA7E,SACE,eAAC,IAAD,gCACqBA,EAAc3X,SAAS,GAD5C,IACiDgC,SAInD0V,GACA,cAAC/kB,GAAD,CAAaP,GAAIoW,GAAejW,KAAMxF,EAAQsrB,eAAezP,KAAK7b,EAAS4qB,GAA3E,SACE,eAAC,IAAD,8BACmBA,EAAc3X,SAAS,GAD1C,IAC+CgC,WAtBnD,cAAC,GAAD,UACE,eAAC,IAAD,4BAAqBA,GAArB,gECZFwG,GAAgB,eAETgQ,GAAkC,SAAC,GAAgB,IAAdhT,EAAa,EAAbA,OACxCwH,EAAkB4H,KAAlB5H,cAEWjgB,EACfO,IADFP,QAAWwF,KAGLwlB,EAAgBN,GAAmBjS,GAAnCuS,YACFhmB,EAAmBG,GAAsBsW,IAQ/C,OANA9gB,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,oBAEf,CAACjb,EAAiBC,KAAMgb,IAEvB+K,EACK,KAIP,cAACplB,GAAD,CACEP,GAAIoW,GACJjW,KAAMxF,EAAQ0rB,iBAAiB7P,KAAK7b,OAASlF,GAC7CiL,YAAY,YACZD,iBAAiB,SAJnB,SAME,cAAC,IAAD,CAAQ2C,GAAI,CAAEM,MAAO,OAArB,+BC9BO4iB,GAAwC,SAAC,GAAgB,IAAdlT,EAAa,EAAbA,OAAa,EACfiS,GAAmBjS,GAA/DsS,EAD2D,EAC3DA,QAASC,EADkD,EAClDA,YAAaC,EADqC,EACrCA,kBAE9B,OAAIF,EACK,KAGJC,EAIAC,EAIE,KAHE,eAAC,GAAD,oCAAyChW,MAJzC,eAAC,GAAD,0CAA+CA,OCFpDwG,GAAgB,QAChBoG,GAAW,SAAC,GAAD,MAAkD,CAAE0H,qBAApD,EAAGA,uBAEPqC,GAAoB,WAAO,IAC9B3L,EAAkB4H,KAAlB5H,cACAsJ,EAAyB1W,8BAAmBgP,IAA5C0H,qBAF6B,EAIT/uB,mBAAkBqa,WAAQC,KAAK,IAJtB,mBAI9B2D,EAJ8B,KAItBoT,EAJsB,KAK/B1S,EAAe3e,qBACf6nB,GAAW5J,EAAOsG,OANa,EAQQ2L,GAAmBjS,GAAxDoS,EAR6B,EAQ7BA,aAAcC,EARe,EAQfA,mBAEhB9lB,EAAmBG,GAAsBsW,IACzC+G,EACsB,uBAA1Bxd,EAAiBC,MACS,2BAA1BD,EAAiBC,KAEbwd,EAAsB/c,uBAAY,WACtCua,EAAc,oBACb,CAACA,IAEE6L,EAA2BvC,EAAqB7oB,IAAI+X,GAEpDsT,EAAYtT,EAAOuT,OAAO,IAAKF,GAErC,OACE,eAAC,IAAD,WACE,eAAC,IAAD,oCAEGzJ,IAAYG,GACX,cAAC,IAAD,CACEre,QAAQ,YACRsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WACjChB,QAAS,kBAAMolB,EAAUhX,WAAQC,KAAK,KAHxC,SAKE,cAAC,GAAD,CAAMlX,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,QACNkK,QAAQ,YACRE,OAAQA,EAAOxF,SAAS,GACxB3E,KAAM2G,GACNkE,aAAcA,EACdC,aAAcX,EAAOnE,SAAS,GAC9B+E,gBAAiB,SAAAZ,GAAM,OAAIoT,EAAUhX,WAAQC,KAAK2D,KAClDa,UAAWuR,EAAavW,WACxBiF,SAAUuR,IAGXiB,EAAUE,SACT,cAAC,GAAD,CAAW5d,MAAM,aAAakK,QAAQ,aAAaE,OAAO,QAE1D,cAAC,GAAD,CACEpK,MAAM,aACNkK,QAAQ,aACRE,OAAQsT,EAAU9Y,SAAS,GAC3B3E,KAAK,MAIR+T,GAAW,cAAC,GAAD,CAAY5J,OAAQA,IAChC,cAAC,GAAD,CAAaA,OAAQA,IAErB,eAAC,IAAD,CAAMtU,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASgc,EAAlC,oBAGA,cAAC,GAAD,CAAShK,OAAQA,IACjB,cAAC,GAAD,CAASA,OAAQA,UAGpB+J,GAAwB,cAAC,GAAD,QC5EzBX,GAAW,SAAC,GAAD,MAKS,CACxB4I,qBANe,EACfA,qBAMAyB,0BAPe,EAEfA,0BAMA3B,gBARe,EAGfA,gBAMAhB,qBATe,EAIfA,uBAQI9N,GAAgB,QAETkH,GAAsB,WAAO,IAChC1C,EAAkB4H,KAAlB5H,cAD+B,EAOnCpN,8BAAmBgP,IAJrB4I,EAHqC,EAGrCA,qBACAyB,EAJqC,EAIrCA,0BACA3B,EALqC,EAKrCA,gBACAhB,EANqC,EAMrCA,qBANqC,EAQX/uB,mBAAkBiwB,GARP,mBAQhChS,EARgC,KAQxBoT,EARwB,KASjC1S,EAAe3e,qBAEfwK,EAAmBG,GAAsBsW,IACzC+G,EACsB,uBAA1Bxd,EAAiBC,MACS,2BAA1BD,EAAiBC,KACbod,GAAW5J,EAAOqI,GAAG2J,GACrB0B,EAAgB1B,EAAqB/pB,IAAI6pB,GACzC6B,EAAsB3T,EAAOqI,GAAGqL,GAEhC1J,EAAsB/c,uBAAY,WACtCua,EAAc,oBACb,CAACA,IAEE6L,EAA2BzJ,EAC7BkH,EAAqBzL,IAAI2M,GAAsB/pB,IAAI+X,GACnD8Q,EAEE8C,EAAoB5B,EAAqBuB,OAAO,IAAKzC,GACrDwC,EAAYtT,EAAOuT,OAAO,IAAKF,GAE/BQ,EACJ7B,EAAqBxU,SAAWoF,cAAWC,QAAQyQ,EAAWM,GAAmBpW,QAEnF,OACE,eAAC,IAAD,WACE,eAAC,IAAD,oCAEGoM,IAAYG,GACX,cAAC,IAAD,CACEre,QAAQ,YACRsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WACjChB,QAAS,kBAAMolB,EAAUpB,IAH3B,SAKE,cAAC,GAAD,CAAM7sB,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,QACNkK,QAAQ,oBACRE,OAAQ4J,EAAU5J,EAAOxF,SAAS,GAAKwX,EAAqBxX,SAAS,GACrE3E,KAAM2G,GACNkE,aAAcA,EACdC,aAAcX,EAAOnE,SAAS,GAC9B+E,gBAAiB,SAAAZ,GAAM,OAAIoT,EAAUhX,WAAQC,KAAK2D,KAClDa,UAAW6S,EAAc7X,WACzBiF,SAAU6S,IAGXL,EAAUE,SACT,cAAC,GAAD,CAAW5d,MAAM,aAAakK,QAAQ,aAAaE,OAAO,QAE1D,cAAC,GAAD,CACEpK,MAAM,aACNkK,QAAQ,aACRE,OAAQsT,EAAU9Y,SAAS,GAC3B3E,KAAK,IACLoK,cAAa,OAAE4T,QAAF,IAAEA,OAAF,EAAEA,EAAiBrZ,SAAS,GAAGsZ,OAAO,KACnD5T,cAA6B,OAAf2T,QAAe,IAAfA,OAAA,EAAAA,EAAiB/R,UAAW,UAAY,WAI1D,cAAC,GAAD,CACElM,MAAM,SACNkK,QAAQ,qBACRE,OAAQyT,EAA0BjZ,SAAS,GAC3CxL,MAAOykB,EAA0BjW,SAAW,UAC5C3H,KAAM0G,KAGPqN,GAAW,cAAC,GAAD,CAAY5J,OAAQA,IAC/B4J,GAAW,cAAC,GAAD,CAAa5J,OAAQA,IAEjC,eAAC,IAAD,CAAMtU,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASgc,EAAlC,oBAGA,cAAC,GAAD,CAAShK,OAAQA,IACjB,cAAC,GAAD,CAASA,OAAQA,UAGpB+J,GAAwB,cAAC,GAAD,QCrHzB/G,GAAgB,oBAET+Q,GAAwB,WAAO,IAClCvM,EAAkB4H,KAAlB5H,cAGWjgB,EACfO,IADFP,QAAWwF,KAGPR,EAAmBG,GAAsBsW,IAQ/C,OANA9gB,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,4BAEf,CAACjb,EAAiBC,KAAMgb,IAGzB,cAACra,GAAD,CACEP,GAAIoW,GACJjW,KAAMxF,EAAQysB,sCAAsC5Q,KAAK7b,GACzD+F,YAAY,YACZD,iBAAiB,SAJnB,SAME,cAAC,IAAD,8BCxBA2V,GAAgB,yBAETiR,GAA4B,WAAO,IACtCzM,EAAkB4H,KAAlB5H,cAGWjgB,EACfO,IADFP,QAAWwF,KAGPR,EAAmBG,GAAsBsW,IAQ/C,OANA9gB,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,iCAEf,CAACjb,EAAiBC,KAAMgb,IAGzB,cAACra,GAAD,CACEP,GAAIoW,GACJjW,KAAMxF,EAAQ2sB,oBAAoB9Q,KAAK7b,GACvC+F,YAAY,YACZD,iBAAiB,SAJnB,SAME,cAAC,IAAD,CAAQ3B,QAAQ,UAAUsE,GAAI,CAAE8C,GAAI,EAAGxC,MAAO,QAA9C,yCCfA8Y,GAAW,SAAC,GAAD,MAIS,CACxB4I,qBALe,EACfA,qBAKAyB,0BANe,EAEfA,0BAKA3C,qBAPe,EAGfA,uBAMI9N,GAAgB,SAETmR,GAAmB,WAAO,IAC7B3M,EAAkB4H,KAAlB5H,cAD4B,EAMhCpN,8BAAmBgP,IAHrB4I,EAHkC,EAGlCA,qBACAyB,EAJkC,EAIlCA,0BACA3C,EALkC,EAKlCA,qBAGIsD,EAAsBnnB,uBAAY,WACtCua,EAAc,oBACb,CAACA,IAEEjb,EAAmBG,GAAsBsW,IACzC+G,EACsB,uBAA1Bxd,EAAiBC,MACS,2BAA1BD,EAAiBC,KAEb8mB,EAAYtB,EAAqBuB,OAAO,IAAKzC,GAC7CuD,GAAsBrC,EAAqB1L,SAAWmN,EAA0BnN,OAEtF,OACE,eAAC,IAAD,WACE,eAAC,IAAD,qCAEIyD,GACA,cAAC,IAAD,CAAM/Z,GAAI,CAAEiC,eAAgB,YAA5B,SACE,cAAC,GAAD,SAIN,eAAC,IAAD,CAAKjC,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,eAAC,IAAD,WACE,cAAC,GAAD,CACEyF,MAAM,QACNkK,QAAQ,aACRE,OAAQgS,EAAqBxX,SAAS,GACtC3E,KAAM2G,KAEP8W,EAAUE,SACT,cAAC,GAAD,CAAW5d,MAAM,aAAakK,QAAQ,aAAaE,OAAO,QAE1D,cAAC,GAAD,CACEpK,MAAM,aACNkK,QAAQ,aACRE,OAAQsT,EAAU9Y,SAAS,GAC3B3E,KAAM,MAGV,eAAC,IAAD,CAAM7F,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,GAAD,CACE2F,MAAM,SACNkK,QAAQ,cACRE,OAAQyT,EAA0BjZ,SAAS,GAC3CxL,MAAOykB,EAA0BjW,SAAW,UAC5C3H,KAAM0G,KAER,cAAC,IAAD,CAAMvM,GAAI,CAAEiC,eAAgB,WAAY+D,KAAM,GAA9C,SACE,cAAC,GAAD,YAKN,eAAC,IAAD,CAAMtK,QAAQ,iBAAd,UACE,eAAC,IAAD,CACEA,QAAU+nB,EAA0BnN,OAAqB,UAAZ,UAC7CtY,QAASomB,EAFX,UAIE,cAAC,GAAD,CAAMjvB,KAAK,MAAM8J,KAAK,OAJxB,iBAOEwkB,EAA0BnN,QAAU,cAAC,GAAD,OAExC,cAAC,IAAD,UAAO+N,GAAsB,cAAC,GAAD,SAE9BtK,GAAwB,cAAC,GAAD,QC1FzBX,GAAW,SAAC,GAAD,MAA6E,CAC5F4I,qBADe,EAAGA,qBAElByB,0BAFe,EAAyBA,4BAK7Ba,GAAqB,WAAO,IAAD,EACsBla,8BAAmBgP,IAAvE4I,EAD8B,EAC9BA,qBAAsByB,EADQ,EACRA,0BACxBc,GAAYvC,EAAqB1L,OAEvC,OACE,eAAC,IAAD,WACE,eAAC,IAAD,oCAEE,cAAC,IAAD,CAAMtW,GAAI,CAAEiC,eAAgB,YAA5B,SACE,cAAC,GAAD,SAGJ,eAAC,IAAD,CAAKjC,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CAAa6X,MAAM,wCAAnB,SACE,cAAC,IAAD,4DAEDuM,GACC,qCACE,eAAC,IAAD,CAAKvkB,GAAI,CAAE2B,OAAQ,EAAG+N,GAAI,EAAG9N,aAAc,GAA3C,UACE,cAAC,GAAD,CACEgE,MAAM,QACNkK,QAAQ,eACRE,OAAQgS,EAAqBxX,SAAS,GACtC3E,KAAM2G,KAER,cAAC,GAAD,CACE5G,MAAM,SACNkK,QAAQ,cACRE,OAAQyT,EAA0BjZ,SAAS,GAC3CxL,MAAOykB,EAA0BjW,SAAW,UAC5C3H,KAAM0G,QAGV,cAAC,GAAD,cCxCCiY,GAAiB,SAAAlc,GAG5B,OAFiB8W,KAAT9D,MAGN,IAAK,WACH,OAAO,cAAC,GAAD,eAAchT,IAEvB,IAAK,UACH,OAAO,cAAC,GAAD,eAAaA,IAEtB,IAAK,YACH,OAAO,cAAC,GAAD,eAAeA,IAExB,IAAK,SACH,OAAO,cAAC,GAAD,eAAYA,IAErB,IAAK,WACH,OAAO,cAAC,GAAD,eAAcA,MCRdmc,GAAqB1vB,wBAA6C,MAElE2vB,GAAiB,WAC5B,IAAMtzB,EAAU4G,qBAAWysB,IAE3B,GAAgB,OAAZrzB,EACF,MAAM,IAAIuD,MAAM,0DAGlB,OAAOvD,GClBHuzB,GAAkB,SAAC,GAAD,SAAG7Z,WAEd8Z,GAA+B,WAAO,IACzCrtB,EAAYO,IAAZP,QADwC,EAEX6S,8BAAmBua,IAAhDE,EAFwC,EAExCA,eAAgBC,EAFwB,EAExBA,SAFwB,EAItBhoB,GACxB,QACAvF,EAAQwF,KAAKgoB,yBAAyB3R,KAAK7b,EAAQwF,OAF9CS,EAJyC,oBAShD,OACE,cAAC,IAAD,CAAQQ,QAASR,EAAiBO,SAAU8mB,EAAevO,QAAUwO,EAASxO,OAA9E,0BCNEzJ,GAAS,SAAC,GAAD,MAAwD,CACrE/B,UADa,EAAGA,UAEhBqC,gBAFa,EAAcA,kBAKhB6X,GAA0B,WAAO,IAAD,EACPN,KAA5BnS,EADmC,EACnCA,cAAe8E,EADoB,EACpBA,SADoB,EAEJjN,8BAAmByC,IAAlD/B,EAFmC,EAEnCA,UAAWqC,EAFwB,EAExBA,gBAEbmW,EAAYxY,EAAUG,WAAWsY,OAAO,IAAKpW,GAEnD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,sBAEA,eAAC,IAAD,CAAKnN,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,QACNkK,QAAQ,aACRE,OAAQlF,EAAUG,WAAWT,WAC7B3E,KAAM0G,KAGR,cAAC,GAAD,CACE3G,MAAM,aACNkK,QAAQ,cACRE,OAAQsT,EAAU9Y,SAAS,GAC3B3E,KAAK,MAGP,cAAC,GAAD,CACED,MAAM,kBACNkK,QAAQ,iBACRE,OAAQlF,EAAU+Z,eAAera,SAAS,GAC1CxL,MAAO8L,EAAU+Z,eAAerX,SAAW,UAC3C3H,KAAK,QAGP,cAAC,GAAD,CACED,MAAM,gBACNkK,QAAQ,kBACRE,OAAQlF,EAAUga,SAASta,WAC3BxL,MAAO8L,EAAUga,SAAStX,SAAW,UACrC3H,KAAMyG,KAGR,eAAC,IAAD,CAAM5Q,QAAQ,iBAAd,UACE,eAAC,IAAD,CAAQA,QAAQ,UAAUsC,QAAS,kBAAMqZ,EAAS,CAAE7a,KAAM,oBAA1D,UACE,cAAC,GAAD,CAAMrH,KAAK,MAAM8J,KAAK,OADxB,gBAKA,cAAC,GAAD,UAIHsT,GAAiB,cAAC,GAAD,QCxDlB1F,GAAS,SAAC,GAAD,MAA0D,CACvE3C,YADa,EAAGA,YAEhBiD,gBAFa,EAAgBA,kBAYlB8X,GAA8C,SAAC,GAMrD,IALLzzB,EAKI,EALJA,SACAwmB,EAII,EAJJA,MACAkN,EAGI,EAHJA,cACAC,EAEI,EAFJA,WACA9N,EACI,EADJA,SACI,EACqCjN,8BAAmByC,IAApD3C,EADJ,EACIA,YAAaiD,EADjB,EACiBA,gBACboF,EAAkBmS,KAAlBnS,cACF7B,EAAe3e,qBAEfsgB,GAAU8S,EAAW9M,GAAG6M,EAAcja,YAEtC4F,EAAYqU,EAAcja,WAAWhT,IAAIiS,GACzC4G,EAAWqU,EAAW9M,GAAGxH,GAEzBuU,EAA6BjY,EAAgBkI,IAAI6P,EAAcja,YAAYhT,IAAIktB,GAE/EvB,EAAoBsB,EAAcja,WAAWsY,OAAO,IAAKpW,GACzDkY,EAAeF,EAAW5B,OAAO,IAAK6B,GACtCvB,EACJqB,EAAcja,WAAWuC,SAAWoF,cAAWC,QAAQwS,EAAczB,GAAmBpW,QAE1F,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACGwK,EACA3F,IAAWE,GACV,cAAC,IAAD,CACE7W,QAAQ,YACRsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WACjChB,QAAS,kBAAMqZ,EAAS,CAAE7a,KAAM,YAHlC,SAKE,cAAC,GAAD,CAAMrH,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,QACNkK,QAAQ,aACRE,OAAQmV,EAAW3a,WACnBqG,UAAWA,EAAUhF,WACrBiF,SAAUA,EACVjL,KAAM0G,GACAmE,eACNC,aAAcwU,EAAWtZ,SAAS,GAClC+E,gBAAiB,SAAAuF,GAAQ,OAAIkB,EAAS,CAAE7a,KAAM,WAAY2Z,gBAG3DkP,EAAa7B,SACZ,cAAC,GAAD,CAAW5d,MAAM,aAAakK,QAAQ,cAAcE,OAAO,QAE3D,cAAC,GAAD,CACEpK,MAAM,aACNkK,QAAQ,cACRE,OAAQqV,EAAa7a,SAAS,GAC9ByF,cAAa,OAAE4T,QAAF,IAAEA,OAAF,EAAEA,EAAiBrZ,SAAS,GAAGsZ,OAAO,KACnD5T,cAA6B,OAAf2T,QAAe,IAAfA,OAAA,EAAAA,EAAiB/R,UAAW,UAAY,SACtDjM,KAAK,OAIPqf,EAAcxS,SACd,qCACE,cAAC,GAAD,CACE9M,MAAM,kBACNkK,QAAQ,iBACRE,OAAQkV,EAAcL,eAAera,SAAS,GAC9CxL,MAAOkmB,EAAcL,eAAerX,SAAW,UAC/C3H,KAAK,QAGP,cAAC,GAAD,CACED,MAAM,gBACNkK,QAAQ,kBACRE,OAAQkV,EAAcJ,SAASta,WAC/BxL,MAAOkmB,EAAcJ,SAAStX,SAAW,UACzC3H,KAAMyG,QAKX9a,KAGF+gB,GAAiB,cAAC,GAAD,QCtGX+S,GAAqD,SAAC,GAA0B,IAAxB9T,EAAuB,EAAvBA,OAAQhgB,EAAe,EAAfA,SACnE+F,EAAYO,IAAZP,QADkF,EAGhEuF,GACxB,QACA0U,EAAO+T,UACHhuB,EAAQwF,KAAKwoB,UAAUnS,KAAK7b,EAAQwF,KAAMyU,EAAO+T,WACjDhuB,EAAQwF,KAAKyoB,YAAYpS,KAAK7b,EAAQwF,KAAMyU,EAAOgU,cAJlDhoB,EAHmF,oBAU1F,OAAO,cAAC,IAAD,CAAQQ,QAASR,EAAjB,SAAmChM,KCAtC8jB,GAAO,SAAC,GAAD,IAAGxK,EAAH,EAAGA,UAAH,MAAuC,CAClDoa,cAAepa,EACfqa,WAAYra,EAAUG,aASlB4K,GAAS,SAAChX,EAA0B+W,GAAkD,IAIlFsP,EAA8BrmB,EAA9BqmB,cAAeC,EAAetmB,EAAfsmB,WAEvB,OAAQvP,EAAOpZ,MACb,IAAK,WACH,OAAO,2BAAKqC,GAAZ,IAAmBsmB,WAAY/Y,WAAQC,KAAKuJ,EAAOO,YAErD,IAAK,SACH,OAAO,2BAAKtX,GAAZ,IAAmBsmB,WAAYD,EAAcja,aAE/C,IAAK,cAAgB,IAESwa,EACxB7P,EADFa,YAAe3L,UAGjB,GAAI2a,EACF,MAAO,CACLP,cAAeO,EACfN,WAAYM,EAAahR,MAAMyQ,EAAc3Q,YAAY4Q,KAMjE,OAAOtmB,GAGH6mB,GAAoB,SAAC,GAAD,SAAGxb,aAOvByb,GAAkF,SAAC,GAGlF,IAAD,QAFJT,EAEI,EAFJA,cACA1T,EACI,EADJA,OAEM+T,EAAS,UAAG/T,EAAO+T,iBAAV,aAAG,EAAkB/a,WAAWsZ,OAAO,IAAKvX,IACrDiZ,EAAW,UAAGhU,EAAOgU,mBAAV,aAAG,EAAoBhb,WAAWsZ,OAAO,IAAKvX,IACzDsY,EAAc,UAAGK,EAAcL,eAAerX,eAAhC,aAAG,EAAsChD,SAAS,GAAGsZ,OAAO,QAC1EgB,EAAQ,UAAGI,EAAcJ,SAAStX,eAA1B,aAAG,EAAgChD,WAAWsZ,OAAO,IAAKxX,IAExE,OAAI4Y,EAAcxS,SAAW6S,EAEzB,eAAC,GAAD,8BACkB,cAAC,GAAD,UAASA,IAD3B,OAOF,eAAC,GAAD,WACGA,GACC,uDACiB,cAAC,GAAD,UAASA,IAD1B,oBAIDC,GACC,4DACsB,cAAC,GAAD,UAASA,IAD/B,sBAIAX,GAAkBC,IAClB,qCACG,IADH,eAEe,IACZD,GAAkBC,EACjB,qCACE,cAAC,GAAD,UAASD,IADX,QACwC,cAAC,GAAD,UAASC,OAGjD,mCACE,cAAC,GAAD,iBAASD,QAAT,IAASA,IAAkBC,SArBrC,QA+BSc,GAA2B,WAAO,IAAD,EAC1BC,EAA8BnB,KAAxCrN,SADoC,EAEMD,6BAAkBvB,GAAQP,IAFhC,0BAEnC4P,EAFmC,EAEnCA,cAAeC,EAFoB,EAEpBA,WAAc9N,EAFM,KAGtCnN,EAAcE,8BAAmBsb,IAEjClU,EAAS0T,EAAc3Q,YAAY4Q,GALG,EAMR3T,GAEhC,UAAAA,EAAO+T,iBAAP,eAAkB5T,GAAGzH,IACrB,MACE7X,EACA,eAAC,GAAD,uEAC4D,IAC1D,eAAC,GAAD,WACGmf,EAAO+T,UAAUlQ,IAAInL,GAAaM,WADrC,IACkD+B,MAHpD,QAQF,CAACiF,EAAQ,cAAC,GAAD,CAAiC0T,cAAeA,EAAe1T,OAAQA,KAZhF,MAACnf,OAAWA,GAP4B,mBAMrCilB,EANqC,KAMxBC,EANwB,KAqBtCuO,EAAiBZ,EAAcxS,QAErC,OACE,eAAC,GAAD,CAAesF,MAAO,UAAiBkN,gBAAeC,aAAY9N,WAAlE,iBACGE,QADH,IACGA,IACEuO,EACC,eAAC,GAAD,kCAAwCvZ,GAAxC,2BAEA,eAAC,GAAD,yBAA+BA,GAA/B,mCAGJ,eAAC,IAAD,CAAM7Q,QAAQ,iBAAd,UACE,cAAC,IAAD,CACEA,QAAQ,SACRsC,QAAS,kBAAM6nB,EAA0B,CAAErpB,KAAM,qBAFnD,oBAOC8a,EACC,cAAC,GAAD,CAAsB9F,OAAQ8F,EAA9B,qBAEA,cAAC,IAAD,CAAQvZ,UAAQ,EAAhB,4BC1JGgoB,GAAoB,WAAO,IAC9B1O,EAAaqN,KAAbrN,SAER,OACE,eAAC,IAAD,WACE,cAAC,IAAD,sBACA,eAAC,IAAD,CAAKrX,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,eAAC,GAAD,CAAa6X,MAAK,6BAAwBzL,GAAxB,SAAlB,mBACSA,GADT,wDAIA,cAAC,IAAD,CAAM7Q,QAAQ,iBAAd,SACE,cAAC,IAAD,CAAQsC,QAAS,kBAAMqZ,EAAS,CAAE7a,KAAM,oBAAxC,oCCdG2mB,GAAoB,WAG/B,OAFiBuB,KAATpJ,MAGN,IAAK,SACH,OAAO,cAAC,GAAD,IAET,IAAK,YACH,OAAO,cAAC,GAAD,IAET,IAAK,OACH,OAAO,cAAC,GAAD,MCIPzO,GAAS,SAAC,GAAD,MAA8D,CAC3E5C,YADa,EAAGA,YAEhB+C,oBAFa,EAAgBA,sBAYlBgZ,GAAgE,SAAC,GAMvE,IALLC,EAKI,EALJA,gBACAC,EAII,EAJJA,WACA3T,EAGI,EAHJA,cACA8E,EAEI,EAFJA,SACA7lB,EACI,EADJA,SACI,EACyC4Y,8BAAmByC,IAAxD5C,EADJ,EACIA,YAAa+C,EADjB,EACiBA,oBACf0D,EAAe3e,qBAEfsgB,GAAU6T,EAAW7N,GAAG4N,EAAgBjb,aAExC6F,EAAYoV,EAAgBjb,YAAY/S,IAAIgS,GAC5C6G,EAAWoV,EAAW7N,GAAGxH,GAEzBsV,EAAiCnZ,EACpCqI,IAAI4Q,EAAgBjb,aACpB/S,IAAIiuB,GAEDtC,EAAoBqC,EAAgBjb,YAAYuY,OAAO,IAAKvW,GAC5DqY,EAAea,EAAW3C,OAAO,IAAK4C,GACtCtC,EACJoC,EAAgBjb,YAAYwC,SAC5BoF,cAAWC,QAAQwS,EAAczB,GAAmBpW,QAEtD,OACE,eAAC,IAAD,WACE,eAAC,IAAD,4BAEG6E,IAAWE,GACV,cAAC,IAAD,CACE7W,QAAQ,YACRsE,GAAI,CAAE,iBAAkB,CAAEhB,MAAO,WACjChB,QAAS,kBAAMqZ,EAAS,CAAE7a,KAAM,YAHlC,SAKE,cAAC,GAAD,CAAMrH,KAAK,UAAU8J,KAAK,YAKhC,eAAC,IAAD,CAAKe,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CACEyF,MAAM,UACNkK,QAAQ,eACRE,OAAQkW,EAAW1b,WACnBqG,UAAWA,EAAUhF,WACrBiF,SAAUA,EACVjL,KAAMyG,GACAoE,eACNC,aAAcuV,EAAWra,SAAS,GAClC+E,gBAAiB,SAAAuF,GAAQ,OAAIkB,EAAS,CAAE7a,KAAM,aAAc2Z,gBAG7DkP,EAAa7B,SACZ,cAAC,GAAD,CAAW5d,MAAM,aAAakK,QAAQ,gBAAgBE,OAAO,QAE7D,cAAC,GAAD,CACEpK,MAAM,aACNkK,QAAQ,gBACRE,OAAQqV,EAAa7a,SAAS,GAC9ByF,cAAa,OAAE4T,QAAF,IAAEA,OAAF,EAAEA,EAAiBrZ,SAAS,GAAGsZ,OAAO,KACnD5T,cAA6B,OAAf2T,QAAe,IAAfA,OAAA,EAAAA,EAAiB/R,UAAW,UAAY,SACtDjM,KAAK,OAIPogB,EAAgBvT,SAChB,qCACE,cAAC,GAAD,CACE9M,MAAM,mBACNkK,QAAQ,eACRE,OAAQiW,EAAgBpB,eAAera,SAAS,GAChDxL,MAAOinB,EAAgBpB,eAAerX,SAAW,UACjD3H,KAAK,QAGP,cAAC,GAAD,CACED,MAAM,SACNkK,QAAQ,iBACRE,OAAQiW,EAAgBG,WAAW5b,WACnCxL,MAAOinB,EAAgBG,WAAW5Y,SAAW,UAC7C3H,KAAM0G,GACNiD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,mPAWX9O,KAGF+gB,GAAiB,cAAC,GAAD,QCvHlB8T,GAA2B,SAAC,GAAD,MACX,eADW,EAAGvH,SACzBlqB,QAEE0xB,GAAgE,SAAC,GAIvE,IAHL90B,EAGI,EAHJA,SACAwhB,EAEI,EAFJA,cACAxB,EACI,EADJA,OACI,EACwB1Z,IAApB/D,EADJ,EACIA,OAAQwD,EADZ,EACYA,QAGV/D,EAFqB4W,8BAAmBic,IAELtyB,EAAOP,iBAAcnB,EAJ1D,EAMsByK,GACxBkW,EACAxB,EAAO+U,YACHhvB,EAAQwF,KAAKypB,2BAA2BpT,KAAK7b,EAAQwF,KAAMyU,EAAO+U,YAAa/yB,GAC/E+D,EAAQwF,KAAK0pB,8BAA8BrT,KAAK7b,EAAQwF,KAAMyU,EAAOkV,eAJpElpB,EANH,oBAaJ,OAAO,cAAC,IAAD,CAAQQ,QAASR,EAAjB,SAAmChM,KCxB/Bm1B,GAAuB5xB,wBAA+C,MAEtE6xB,GAAmB,WAC9B,IAAMx1B,EAA2C4G,qBAAW2uB,IAE5D,GAAgB,OAAZv1B,EACF,MAAM,IAAIuD,MAAM,8DAGlB,OAAOvD,GCLIy1B,GAAwE,SAAC,GAG/E,IAAD,IAFJZ,EAEI,EAFJA,gBACAzU,EACI,EADJA,OAEMqT,EAAc,UAAGoB,EAAgBpB,eAAerX,eAAlC,aAAG,EAAwChD,SAAS,GAAGsZ,OAAO,QAC5EsC,EAAU,UAAGH,EAAgBG,WAAW5Y,eAA9B,aAAG,EAAoChD,WAAWsZ,OAAO,IAAKvX,IAE9E,OACE,eAAC,GAAD,WACGiF,EAAO+U,YACN,0DACqB,IACnB,eAAC,GAAD,WACG/U,EAAO+U,YAAY/b,WADtB,IACmC8B,MACzB,IAJZ,2BAQA,2DACsB,IACpB,eAAC,GAAD,WACGkF,EAAOkV,aAAalc,WADvB,IACoC8B,MAC1B,IAJZ,qBAQAuY,GAAkBuB,IAClB,qCACG,IADH,wBAEwB,IACrBvB,GAAkBuB,EACjB,qCACE,cAAC,GAAD,UAASvB,IADX,QACwC,cAAC,GAAD,UAASuB,OAGjD,cAAC,GAAD,iBAASvB,QAAT,IAASA,IAAkBuB,OA3BnC,QCRSU,GAA4C,SAAC,GAAD,IACvDvR,EADuD,EACvDA,MACAtL,EAFuD,EAEvDA,YACA8c,EAHuD,EAGvDA,YACAC,EAJuD,EAIvDA,8BAJuD,MAK/B,CACxBzR,QACAtL,cACAgd,gBAAwC,eAAvBF,EAAYnyB,OAC7BoyB,kCCFI1R,GAAO,SAAC,GAAD,IAAGzK,EAAH,EAAGA,iBAAH,MAA8C,CACzDob,gBAAiBpb,EACjBqb,WAAYrb,EAAiBG,YAC7BuH,eAAe,IASXoD,GAAa,SAACC,GAAD,OAA2C,SAC5D/W,GAD4D,OAE3BgX,GAAOhX,EAAO+W,KAE3CI,GAAeL,GAAW,CAAEnZ,KAAM,iBAClCyZ,GAASN,GAAW,CAAEnZ,KAAM,WAE5BqZ,GAAS,SACbhX,EACA+W,GACiC,IAIzBqQ,EAA+CpnB,EAA/ConB,gBAAiBC,EAA8BrnB,EAA9BqnB,WAAY3T,EAAkB1T,EAAlB0T,cAErC,OAAQqD,EAAOpZ,MACb,IAAK,cAEH,OADAtI,QAAQC,IAAI,iBACL,2BAAK0K,GAAZ,IAAmB0T,eAAe,IAGpC,IAAK,eACH,OAAO,2BAAK1T,GAAZ,IAAmB0T,eAAe,IAEpC,IAAK,aACH,OAAO,2BAAK1T,GAAZ,IAAmBqnB,WAAY9Z,WAAQC,KAAKuJ,EAAOO,YAErD,IAAK,SACH,OAAO,2BAAKtX,GAAZ,IAAmBqnB,WAAYD,EAAgBjb,cAEjD,IAAK,cAAgB,IAEgBkc,EAC/BtR,EADFa,YAAe5L,iBAGjB,IAAKqc,EACH,OAAOroB,EAGT,IAAMuX,EAAQ,2BAAQvX,GAAR,IAAeonB,gBAAiBiB,IAExC1Q,GACH0Q,EAAeC,YAAY9O,GAAG4N,EAAgBkB,cAC/CD,EAAelc,YAAY2G,GAAGsU,EAAgBjb,cAC9Ckc,EAAerC,eAAe3S,GAAG+T,EAAgBpB,iBACjDqC,EAAed,WAAWlU,GAAG+T,EAAgBG,YAE/C,OAAI7T,GAAiBiE,EACZR,GAAaC,GAAOG,IAGtB,2BACFA,GADL,IAEE8P,WAAYgB,EAAezS,MAAMwR,EAAgB1R,YAAY2R,QAM/DlT,GAAgB,oBAEToU,GAAoC,WAAO,IAAD,EACchQ,6BAAkBvB,GAAQP,IADxC,0BAC5C2Q,EAD4C,EAC5CA,gBAAiBC,EAD2B,EAC3BA,WAAY3T,EADe,EACfA,cAAiB8E,EADF,KAE/CN,EAAoB3M,8BAAmB0c,IACrCtP,EAAkBoP,KAAlBpP,cAEFC,EAAexa,uBAAY,WAC/Bua,EAAc,oBACb,CAACA,IAPiD,EDjET,SAC5CyO,EACAC,EAF4C,GAWxC,IAAD,EAPDjc,EAOC,EAPDA,YACAgd,EAMC,EANDA,gBACAD,EAKC,EALDA,8BAMIxV,EAASyU,EAAgB1R,YAAY2R,GAE3C,OAAIe,EACK,MACL50B,EACA,cAAC,GAAD,+FAMCmf,GAIL,UAAIA,EAAO+U,mBAAX,aAAI,EAAoB5U,GAAG1H,IAClB,MACL5X,EACA,eAAC,GAAD,yEAC8D,IAC5D,eAAC,GAAD,WACGmf,EAAO+U,YAAYlR,IAAIpL,GAAaO,WADvC,IACoD8B,MAHtD,QAUAkF,EAAOkV,cAAgBM,EAClB,MACL30B,EACA,cAAC,GAAD,4KAOG,CAACmf,EAAQ,cAAC,GAAD,CAA4ByU,gBAAiBA,EAAiBzU,OAAQA,KA1B7E,MAACnf,OAAWA,GCkDcg1B,CACjCpB,EACAC,EACAnP,GAZmD,mBAS9CO,EAT8C,KASjCC,EATiC,KAe/C+P,EAAmBrB,EAAgBvT,QAEnCiF,EAAqBjb,GAAsBsW,IAejD,OAbA9gB,qBAAU,WAEsB,uBAA5BylB,EAAmBnb,MACS,2BAA5Bmb,EAAmBnb,KAEnB6a,EAAS,CAAE7a,KAAM,gBACoB,WAA5Bmb,EAAmBnb,MAAiD,cAA5Bmb,EAAmBnb,KACpE6a,EAAS,CAAE7a,KAAM,iBACoB,qBAA5Bmb,EAAmBnb,MAC5Bgb,EAAc,uBAEf,CAACG,EAAmBnb,KAAM6a,EAAUG,IAGrC,eAAC,GAAD,CACEyO,gBAAiBA,EACjBC,WAAYA,EACZ3T,cAAeA,EACf8E,SAAUA,EAJZ,iBAMGE,QANH,IAMGA,IACE+P,EACC,eAAC,GAAD,kCAAwChb,GAAxC,6BAEA,eAAC,GAAD,yBAA+BA,GAA/B,qCAGJ,eAAC,IAAD,CAAM5Q,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAQA,QAAQ,SAASsC,QAASyZ,EAAlC,oBAICH,EACC,cAAC,GAAD,CAAwBtE,cAAeA,GAAexB,OAAQ8F,EAA9D,qBAIA,cAAC,IAAD,CAAQvZ,UAAQ,EAAhB,4BC5IGwpB,GAA4C,SAAC,GAA4B,IAA1BxpB,EAAyB,EAAzBA,SAAUvM,EAAe,EAAfA,SAC5D+F,EAAYO,IAAZP,QAD2E,EAGzDuF,GACxB,oBACAvF,EAAQwF,KAAKyqB,8BAA8BpU,KAAK7b,EAAQwF,OAFnDS,EAH4E,oBAQnF,OACE,cAAC,IAAD,CACE9B,QAAQ,UACRsE,GAAI,CAAE8C,GAAI,EAAGxC,MAAO,QACpBtC,QAASR,EACTO,SAAUA,EAJZ,SAMGvM,KCdMi2B,GAA4C,SAAC,GAA4B,IAA1B1pB,EAAyB,EAAzBA,SAAUvM,EAAe,EAAfA,SAC5D+F,EAAYO,IAAZP,QAD2E,EAGzDuF,GACxB,oBACAvF,EAAQwF,KAAK2qB,+BAA+BtU,KAAK7b,EAAQwF,OAFpDS,EAH4E,oBAQnF,OACE,cAAC,IAAD,CAAQQ,QAASR,EAAiBO,SAAUA,EAA5C,SACGvM,KCdD4nB,GAAW,SAAC,GAAD,MAA8D,CAC7EuO,iCADe,EAAGA,mCAIPrI,GAA0B,WAAO,IACpCqI,EAAqCvd,8BAAmBgP,IAAxDuO,iCAER,OACE,eAAC,IAAD,CAAM3nB,GAAI,CAAES,GAAI,EAAGE,SAAU,EAAGmB,WAAY,UAA5C,UACG6lB,EAAiCnd,SAAS,GAD7C,sB,UCNEod,GAAU,SAAsBj0B,EAAMwM,GAA5B,OAAqEA,KAAKxM,GAEpFk0B,GAAuC,SAC3CC,EACAC,EACAjkB,GAEA,GAAoB,kBAATA,GAA8B,OAATA,EAC9B,MAAM,IAAInP,MAAJ,sCAF+B,qBAKlBmzB,GALkB,IAKvC,2BAAsC,CAAC,IAA5BE,EAA2B,QACpC,IAAKJ,GAAQ9jB,EAAMkkB,GACjB,MAAM,IAAIrzB,MAAJ,gBAAmBqzB,EAAnB,sCAGR,IALoC,EAK9BC,EAAankB,EAAKkkB,GALY,eAObD,GAPa,IAOpC,2BAA2C,CAAC,IAAjCG,EAAgC,QACzC,IAAKN,GAAQK,EAAYC,GACvB,MAAM,IAAIvzB,MAAJ,oBAAuBuzB,EAAvB,sCAGR,GAAoC,kBAAzBD,EAAWC,GACpB,MAAM,IAAIvzB,MAAJ,yBAA4BqzB,EAA5B,0BAAoDE,EAApD,uBAb0B,gCALC,8BAuBvC,OAAOpkB,GAGHqkB,GAAyB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAn4B,EAAA,6DAI1Bo4B,EACJ,iDACA,IAAIC,gBAAgB,CAClBC,IAAKJ,EAAQK,KAAK,KAClBC,cAAeL,EAAaI,KAAK,OARL,SAWT/1B,OAAO8B,MAAM8zB,EAAgB,CAClD1I,QAAS,CACP+I,OAAQ,sBAboB,WAW1Bl0B,EAX0B,QAiBlBC,GAjBkB,sBAkBxB,IAAIC,MAAJ,0DAA6DF,EAASG,SAlB9C,mBAqBzBizB,GArByB,KAqBYO,EArBZ,KAqBqBC,EArBrB,UAqByC5zB,EAASX,OArBlD,mHAAH,wDA4BlB80B,GAAc,uCAAG,4BAAA14B,EAAA,sEACLi4B,GAA0B,CAAC,WAAqB,CAAC,QAD5C,cACtB1zB,EADsB,yBAGrB,CACLmsB,aAAcxU,WAAQC,KAAK5X,EAAS8C,QAAQsxB,OAJlB,2CAAH,qDC7DrBzP,GAAW,SAAC,GAAD,MAAmF,CAClGpM,oBADe,EAAGA,oBAElB2a,iCAFe,EAAwBA,mCAMnCmB,GAAwB1c,WAAQC,KAAK,WADZ,GAC2C,EAAI,MACxE0c,GAA0BD,GAAsBlS,IAAI,KAE7CmK,GAAkB,WAAO,IAAD,EAC+B3W,8BAAmBgP,IAA7EpM,EAD2B,EAC3BA,oBAAqB2a,EADM,EACNA,iCADM,EAGD51B,wBAA8BM,GAH7B,mBAG5B4uB,EAH4B,KAGjBC,EAHiB,KAI7BG,EAAesG,EAAiCrR,QAAUtJ,EAAoBsJ,OAapF,GAXApkB,qBAAU,WACR,sBAAC,8BAAAhC,EAAA,+EAEkC04B,KAFlC,gBAEWhI,EAFX,EAEWA,aACRM,EAAaN,GAHhB,gDAKG1sB,QAAQvC,MAAR,MALH,wDAAD,KAQC,IAEC0vB,QAA8BhvB,IAAd4uB,EAAyB,OAAO,KAEpD,IAEM+H,EAFqBrB,EAAiC/Q,IAAIkS,IACblS,IAAIqK,GACTsC,OAAO,MAAWvW,GAC1DuU,EAAqBoG,EAAiC/Q,IAAIqK,GAEhE,OAAI+H,EAAc1S,OAAe,KAG/B,eAAC,IAAD,CAAO5a,QAAQ,QAAf,UACE,eAAC,IAAD,uBAAgBstB,EAAcnd,SAAS,GAAvC,OACA,cAAC,GAAD,CACEzO,QACE,eAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,CAAC,QAAS,UAA/C,UACE,eAAC,IAAD,iBACK,cAAC,IAAD,CAAMN,GAAI,CAAE8B,WAAY,QAAxB,sBADL,yIAKA,eAAC,IAAD,CAAW9B,GAAI,CAAEW,SAAU,OAAQ8D,WAAY,YAAa3B,GAAI,GAAhE,6EACmE,IACjE,cAAC,IAAD,CAAM9C,GAAI,CAAE8B,WAAY,QAAxB,qBAEF,eAAC,IAAD,CAAW9B,GAAI,CAAEW,SAAU,OAAQ8D,WAAY,aAA/C,eAEG8c,EAAmBrT,UAFtB,MAEoC6a,GAAwBld,SAAS,GAFrE,QAGGmB,EAAoBkB,UAHvB,kBAIE,eAAC,IAAD,CAAMlO,GAAI,CAAE8B,WAAY,QAAxB,cAAoCknB,EAAcnd,SAAS,GAA3D,mBC3CRuN,GAAW,SAAC,GAAD,MAA0E,CACzFvO,iBADe,EAAGA,iBAElB0K,MAFe,EAAqBA,MAGpCvI,oBAHe,EAA4BA,sBAMhCic,GAA0B,WAAO,IACpCzR,EAAkBoP,KAAlBpP,cADmC,EAEcpN,8BAAmBgP,IAApEvO,EAFmC,EAEnCA,iBAAkB0K,EAFiB,EAEjBA,MAAOvI,EAFU,EAEVA,oBAE3BsW,EAAYzY,EAAiBG,YAAYuY,OAAO,IAAKvW,GAErDkc,EAAsBjsB,uBAAY,WACtCua,EAAc,4BACb,CAACA,IAEE2R,GAAate,EAAiBub,WAAW9P,OACzC8S,GAAWve,EAAiBga,eAAevO,OAC3C+S,GAAY9T,EAAM7C,QAGlBnW,EAAmBG,GADH,qBAEhB4sB,EACsB,uBAA1B/sB,EAAiBC,MACS,2BAA1BD,EAAiBC,KAQnB,OANAtK,qBAAU,WACsB,qBAA1BqK,EAAiBC,MACnBgb,EAAc,qBAEf,CAACjb,EAAiBC,KAAMgb,IAGzB,eAAC,IAAD,WACE,eAAC,IAAD,6BAEI8R,GACA,cAAC,IAAD,CAAMtpB,GAAI,CAAEiC,eAAgB,YAA5B,SACE,cAAC,GAAD,SAIN,eAAC,IAAD,CAAKjC,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,eAAC,IAAD,WACE,cAAC,GAAD,CACEyF,MAAM,UACNkK,QAAQ,eACRE,OAAQnF,EAAiBG,YAAYR,WACrC3E,KAAMyG,KAGR,cAAC,GAAD,CACE1G,MAAM,aACNkK,QAAQ,gBACRE,OAAQsT,EAAU9Y,SAAS,GAC3B3E,KAAK,MAGP,cAAC,GAAD,CACED,MAAM,mBACNkK,QAAQ,eACRE,OAAQnF,EAAiBga,eAAera,SAAS,GACjDxL,MAAO6L,EAAiBga,eAAerX,SAAW,UAClD3H,KAAK,QAGP,eAAC,IAAD,CAAM7F,GAAI,CAAEC,WAAY,UAAxB,UACE,cAAC,GAAD,CACE2F,MAAM,SACNkK,QAAQ,iBACRE,OAAQnF,EAAiBub,WAAW5b,WACpCxL,MAAO6L,EAAiBub,WAAW5Y,SAAW,UAC9C3H,KAAM0G,GACNiD,SACE,cAAC,GAAD,CACEpS,QACE,cAAC,IAAD,CAAM1B,QAAQ,UAAUsE,GAAI,CAAEM,MAAO,SAArC,gPASR,cAAC,IAAD,CAAMN,GAAI,CAAEiC,eAAgB,WAAY+D,KAAM,GAA9C,SACE,cAAC,GAAD,YAKN,eAAC,IAAD,CAAMtK,QAAQ,iBAAd,UACE,eAAC,IAAD,CAAQA,QAAQ,UAAUsC,QAASkrB,EAAnC,UACE,cAAC,GAAD,CAAM/zB,KAAK,MAAM8J,KAAK,OADxB,gBAKA,cAAC,GAAD,CAAclB,UAAWqrB,IAAYD,EAArC,mCAGDE,GACC,cAAC,GAAD,CAActrB,UAAWqrB,EAAzB,iDAIHE,GAA2B,cAAC,GAAD,QCpHrBC,GAAsB,SAAAjhB,GAAU,IACnCkP,EAAkBoP,KAAlBpP,cAEFU,EAAkBjb,uBAAY,WAClCua,EAAc,qBACb,CAACA,IAEJ,OACE,eAAC,IAAD,WACE,eAAC,IAAD,4BAEE,cAAC,IAAD,CAAMxX,GAAI,CAAEiC,eAAgB,YAA5B,SACE,cAAC,GAAD,SAGJ,eAAC,IAAD,CAAKjC,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,UACE,cAAC,GAAD,CAAa6X,MAAM,0CAAnB,mEAIA,eAAC,IAAD,CAAMtc,QAAQ,iBAAd,UACE,cAAC,IAAD,CAAMsE,GAAI,CAAEiC,eAAgB,aAAc+D,KAAM,EAAG/F,WAAY,UAA/D,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAQjC,QAASka,EAAjB,+BCzBGsR,GAAsB,SAAAlhB,GAGjC,OAFiBse,KAATtL,MAGN,IAAK,OACH,OAAO,cAAC,GAAD,eAAehT,IAExB,IAAK,aAGL,IAAK,YACH,OAAO,cAAC,GAAD,eAA6BA,IAEtC,IAAK,SACH,OAAO,cAAC,GAAD,eAAmBA,MCb1BmhB,GAAwB,CAAC,MAAO,cAAe,UAAW,cAAe,OAElEjF,GAAiB,kBAC5B,cAAC,IAAD,CAAW9oB,QAAQ,UAAUsE,GAAI,CAAEiC,eAAgB,cAAnD,SACE,eAAC,IAAD,CAAWvG,QAAQ,SAAnB,UACE,cAAC,GAAD,CAAgB2R,YAAa,CAAC,UAAW,iBACzC,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,CAAa0O,cAAY,EAAC1O,YAAaoc,WCThCC,GAA+B,WAAO,IAE1BnyB,EACjBO,IADAP,QAAWwF,KAF+B,EAIoBhL,mBAAS,MAJ7B,mBAIvC43B,EAJuC,KAIZC,EAJY,KAM9C,OACI,cAAC,IAAD,CAAM5pB,GAAI,CAAC8C,GAAI,GAAf,SACI,cAAC,IAAD,CAAK9C,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACI,cAAC,IAAD,CAAMH,GAAI,CAAEC,WAAY,WAAxB,SACI,eAAC,IAAD,CAAMD,GAAI,CAAE8G,GAAI,EAAG7G,WAAY,UAA/B,UACI,cAAC9C,GAAD,CACIP,GAAG,kBACHQ,QAAQ,YACRC,iBAAiB,SACjBN,KAAM,SAAA9M,GACF,IAAK05B,EACD,MAAM,IAAIh1B,MAAM,kBAEpB,OAAO4C,EAAQsyB,cAAcC,SAASH,EAA2B,IAAK15B,IAR9E,SAWI,cAAC,IAAD,CAAQyL,QAAQ,SAAhB,yBAIJ,cAAC,IAAD,oBACA,cAAC,IAAD,CACIc,KAAK,SACLutB,IAAI,IACJ9d,KAAK,IACLpU,MAAO8xB,EACPzd,SAAU,SAAAhD,GAAC,OAAI0gB,EAA6B1gB,EAAEC,OAAOtR,UAEzD,cAAC,IAAD,+B,qBClCXmyB,GAA4C,SAAC,GAAD,IAAGx4B,EAAH,EAAGA,SAAUy4B,EAAb,EAAaA,MAAU9hB,EAAvB,2CACvD,eAAC,IAAD,yBAAKM,GAAG,QAAWN,GAAnB,cACE,cAAC,IAAD,CAAKM,GAAG,OAAOzI,GAAI,CAAEgC,QAAS,CAAC,OAAQ,UAAvC,SACGxQ,IAGH,cAAC,IAAD,CAAKiX,GAAG,OAAOzI,GAAI,CAAEgC,QAAS,CAAC,QAAS,SAAxC,SACGioB,SCUDC,GAAY,OAEZC,GAA2B,SAAC5U,EAAkB9J,GAAnB,MAC/B,CAAC8J,EAAMH,8BAA8B3J,GAAQ,oCAEzC2e,GAA6B,SACjC7U,EACA9J,EACA4e,EACArd,GAEA,IAAMY,EAAkB2H,EAAM3H,gBAAgBnC,GAE9C,OAAImC,EAAgB6U,IAAI9O,8BAA6B/F,EAAgBsE,GAAGmY,GAC/D,CACL9U,EAAMhI,KAAKsE,IAAI7E,GACf,mEAGKmd,GAAyB5U,EAAO9J,IAQrCoB,GAAS,SAAC,GAAD,IACbC,EADa,EACbA,eACArB,EAFa,EAEbA,MACAsB,EAHa,EAGbA,MACAC,EAJa,EAIbA,oBACAsd,EALa,EAKbA,SALa,MAMsB,CACnCxd,iBACArB,QACAiJ,aAAc3H,EAAMoB,+BAA+B1C,GACnD4e,qBAAsBtd,EAAMa,gBAAgBnC,GAC5CuB,sBACAsd,aAGWC,GAA0C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAQnEpgB,8BAAmByC,IANrByd,EAFqE,EAErEA,SACAxd,EAHqE,EAGrEA,eACA4H,EAJqE,EAIrEA,aACA2V,EALqE,EAKrEA,qBACArd,EANqE,EAMrEA,oBACAvB,EAPqE,EAOrEA,MAEMlU,EAAYO,IAAZP,QAT+D,EAWzCxF,oBAAS,GAXgC,mBAWhE04B,EAXgE,KAWvDC,EAXuD,OAY3C34B,qBAZ2C,mBAYhE44B,EAZgE,KAYxDC,EAZwD,OAc3C74B,mBAAS,IAdkC,mBAchE84B,EAdgE,KAcxDC,EAdwD,KAejEC,EAAc9tB,uBAAY,kBAAM6tB,EAAU,MAAK,IAfkB,EAiB/C/4B,mBAAS,GAjBsC,mBAiBhEi5B,EAjBgE,KAiB1DC,EAjB0D,KAkBjEC,EAAgB3N,KAAK4N,KAAKre,EAAiB0d,IAAa,EACxDY,EAAc7N,KAAKwM,IAAIiB,EAAME,EAAgB,GAcnDh5B,qBAAU,WACJ84B,IAASI,GACXH,EAAQG,KAET,CAACJ,EAAMI,IAEVl5B,qBAAU,WACR,IAAIm5B,GAAU,EAoBd,OAlBAX,GAAW,GAEXnzB,EACG+zB,UACC,CACEC,MAAOf,EACPgB,SAAU,2BACVC,WAAYL,EAAcZ,GAE5B,CAAEF,aAEHl4B,MAAK,SAAAu4B,GACAU,IACFT,EAAUD,GACVD,GAAW,OAIV,WACLW,GAAU,KAIX,CAAC9zB,EAAS6zB,EAAaZ,EAAUK,IAEpC34B,qBAAU,WACR64B,MACC,CAACA,EAAaje,IArEsD,MAuE3C/a,qBAvE2C,mBAuEhE25B,EAvEgE,KAuExDC,EAvEwD,KAyFvE,OAhBAz5B,qBAAU,WACR,QAAeG,IAAXq5B,EAAsB,CACxB,IAAItsB,GAAY,EAQhB,OANA/L,YAAW,WACJ+L,GACHusB,OAAUt5B,KAEX,KAEI,WACL+M,GAAY,MAGf,CAACssB,IAGF,eAAC,IAAD,CAAM1rB,GAAI,CAAEM,MAAO,QAAnB,UACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAc2pB,MAAM,SAApB,0BAEA,eAAC,IAAD,CAAMjqB,GAAI,CAAEC,WAAY,UAAxB,UACsB,IAAnB6M,GACC,qCACE,eAAC,GAAD,CACEmd,MAAK,eAAUmB,EAAc,EAAxB,cAA+BF,GACpClrB,GAAI,CAAES,GAAI,CAAC,EAAG,GAAIqB,WAAY,OAAQnB,SAAU,CAAC,EAAG,GAAIsH,cAAe,EAAE,EAAG,IAF9E,UAIGmjB,EAAcZ,EAAW,EAJ5B,IAIgCjN,KAAKwM,KAAKqB,EAAc,GAAKZ,EAAU1d,GAAiB,IAJxF,MAKMA,KAGN,cAAC,IAAD,CAAQpR,QAAQ,YAAYsC,QA9EnB,WACfotB,EAAc,GAChBH,EAAQG,EAAc,IA4EqCrtB,SAAUqtB,GAAe,EAA5E,SACE,cAAC,GAAD,CAAMj2B,KAAK,eAAe8J,KAAK,SAGjC,cAAC,IAAD,CACEvD,QAAQ,YACRsC,QA1FG,WACXotB,EAAcF,EAAgB,GAChCD,EAAQG,EAAc,IAyFZrtB,SAAUqtB,GAAeF,EAAgB,EAH3C,SAKE,cAAC,GAAD,CAAM/1B,KAAK,gBAAgB8J,KAAK,YAKtC,cAAC,IAAD,CACEvD,QAAQ,YACRsE,GAAI,CAAEqC,QAASooB,EAAU,EAAI,EAAG3jB,GAAI,CAAC,EAAG,IACxC9I,QAAS+sB,EAHX,SAKE,cAAC,GAAD,CAAM51B,KAAK,OAAO8J,KAAK,eAK3B0rB,GAA4B,IAAlBA,EAAO53B,OAOjB,cAAC,IAAD,CAAKiN,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACE,eAAC,IAAD,CACEsI,GAAG,QACHzI,GAAI,CACF8C,GAAI,EACJ1C,GAAI,CAAC,EAAG,GACRE,MAAO,OAEPwF,UAAW,SACX8B,WAAY,MARhB,UAWE,qCACE,qBAAK3N,MAAO,CAAEqG,MAAO,UACrB,wBACA,wBACA,wBACA,qBAAKrG,MAAO,CAAEqG,MAAO4pB,SAGvB,gCACE,+BACE,uCACA,+BACE,cAAC,GAAD,CAAcD,MAAM,QAApB,wBACA,cAAC,IAAD,CAAKjqB,GAAI,CAAEW,SAAU,CAAC,EAAG,GAAImB,WAAY,OAAQO,QAAS,IAA1D,oBAEF,sCAEE,cAAC,IAAD,CAAKrC,GAAI,CAAEW,SAAU,CAAC,EAAG,GAAImB,WAAY,OAAQO,QAAS,IAA1D,SAAkEiK,QAEpE,uCAEE,uBAFF,WAKA,4BAIJ,gCACGqe,EAAO/sB,KACN,SAAA2X,GAAK,OACFA,EAAM7C,SAEL,+BACE,qBACEzY,MAAO,CACL+H,QAAS,OACT/B,WAAY,SACZS,OAAQwpB,IAJZ,UAOE,cAAC9vB,GAAD,CAASC,QAASkb,EAAMqW,aAActxB,UAAU,MAAhD,SACE,eAAC,IAAD,CACEoB,QAAQ,UACRsE,GAAI,CACFM,MAAO,CAAC,OAAQ,SAChBE,SAAU,SACVH,SAAU,YALd,UAQG8K,GAAeoK,EAAMqW,cACtB,cAAC,IAAD,CACE5rB,GAAI,CACFgC,QAAS,CAAC,QAAS,QACnB3B,SAAU,WACVoD,IAAK,EACL6B,MAAO,EACPhF,MAAO,OACPI,OAAQ,OACRc,WACE,mFAMV,cAAC,KAAD,CACED,KAAMgU,EAAMqW,aACZC,OAAQ,kBAAMF,EAAUpW,EAAMqW,eAFhC,SAIE,cAAC,IAAD,CAAQlwB,QAAQ,OAAOsE,GAAI,CAAEM,MAAO,OAAQI,OAAQ,QAApD,SACE,cAAC,GAAD,CACEvL,KAAMu2B,IAAWnW,EAAMqW,aAAe,kBAAoB,YAC1D3sB,KAAK,cAKb,6BACE,cAAC,GAAD,CAAcgrB,MAAO1U,EAAMtH,WAAWC,UAAtC,SACGqH,EAAMtH,WAAWzD,SAAS,OAG/B,6BACE,cAAC,GAAD,CAAcyf,MAAO1U,EAAMhI,KAAKW,UAAhC,SACGqH,EAAMhI,KAAK/C,eAGhB,8BACIoD,EAYC2H,EAAM3H,gBAAgBnC,GAXvB,cAAC,IAAD,CACEzM,MACE4O,EAAgB+D,GAAGC,8BACf,UACAhE,EAAgB+D,GAAG,KACnB,UACA,SANR,SASG,IAAIlE,WAAQG,GAAiBpD,gBAIpC,6BACE,cAACrN,GAAD,CACEP,GAAE,oBAAe2Y,EAAMqW,cACvBxuB,QAAQ,YACRG,SAAU,CACRmX,EACI0V,GACE7U,EACA9J,EACA4e,EACArd,GAEFmd,GAAyB5U,EAAO9J,IAEtC1O,KAAMxF,EAAQwF,KAAK+uB,UAAU1Y,KAAK7b,EAAQwF,KAAMwY,EAAMqW,cAbxD,SAeE,cAAC,IAAD,CAAQlwB,QAAQ,aAAhB,SACE,cAAC,GAAD,CAAMvG,KAAK,kBAvFVogB,EAAMqW,cAwDT,IAAAhe,YA3GlB,cAAC,IAAD,CAAK5N,GAAI,CAAEG,EAAG,CAAC,EAAG,IAAlB,SACE,cAAC,IAAD,CAAKH,GAAI,CAAEG,EAAG,EAAGQ,SAAU,EAAGmF,UAAW,UAAzC,SACI6kB,EAAwB,0BAAf,iBAoJhBF,GAAW,cAAC,GAAD,QCpVLsB,GAA0B,kBACnC,eAAC,IAAD,CAAWrwB,QAAQ,UAAnB,UACI,cAAC,GAAD,CAAgB2R,YAAa,CAAC,SAAU,MAAO,aAC/C,cAAC,GAAD,CAAamd,SAAU,KACvB,cAAC,IAAD,CAAWxqB,GAAI,CACXgC,QAAS,OACT0F,cAAe,SACfzH,WAAY,YAHhB,SAKI,cAAC,IAAD,CAAMD,GAAI,CAAEM,MAAO,CAAC,OAAQ,QAA5B,SACI,cAAC,GAAD,YCRV0rB,GAAqC,CACzCC,KAAM,CACJC,mBAAoB,UACpBC,aAAc,UAEhBC,WAAY,CACVF,mBAAoB,UACpBG,iCAAkC,OAClCF,aAAc,UAEhBG,SAAU,CACRJ,mBAAoB,UACpBG,iCAAkC,OAClCF,aAAc,UAEhBI,QAAS,CACPC,4BAA6B,OAC7BL,aAAc,UAEhBM,UAAW,CACTD,4BAA6B,SAC7BE,eAAgB,SAChBC,aAAc,OACdC,iBAAkB,aAClBC,eAAgB,YAElBC,QAAS,CACPN,4BAA6B,SAC7BG,aAAc,OACdD,eAAgB,SAChBE,iBAAkB,aAClBC,eAAgB,YAElBE,OAAQ,CACNC,qBAAsB,YACtBC,oBAAqB,UACrBN,aAAc,OACdC,iBAAkB,aAClBC,eAAgB,aAMdK,GAAsC,CAC1CC,KAAM,eACNC,cAAe,eACfC,oBAAqB,mBACrBC,mBAAoB,kBAqBhBzgB,GAAS,SAAC,GAAD,SAAG0I,MAAS3gB,QAEd24B,GAA8B,SAAAjlB,GAAU,IAC3C9W,EAAa8W,EAAb9W,SACFg8B,EAAcpjB,8BAAmByC,IAFW,EAI1B9a,mBAnBH,SAACy7B,GACtB,MAAoB,wBAAhBA,EACK,aAEW,uBAAhBA,EACK,WAEW,SAAhBA,EACK,SAEF,OASqCC,CAAeD,IAJT,mBAI3ClS,EAJ2C,KAIrCoS,EAJqC,KAK5CC,EAAUnzB,iBAAkB8gB,GAE5B9D,EAAgBva,uBAAY,SAAC1C,GACjC,IAAMqzB,EA5BS,SAACtS,EAAiB/gB,GAAkC,IAAD,EAEpE,OADc,UAAGyxB,GAAY1Q,GAAM/gB,UAArB,QAA+B+gB,EA2B1BpW,CAAWyoB,EAAQpyB,QAAShB,GAE7CrG,QAAQC,IACN,mDACAw5B,EAAQpyB,QACRhB,EACAqzB,GAEFF,EAAQE,KACP,IAEH17B,qBAAU,WACRy7B,EAAQpyB,QAAU+f,IACjB,CAACA,IAEJppB,qBAAU,WAAO,IAAD,EACRqI,EAAK,UAAG2yB,GAAkBM,UAArB,QAAqC,KAClC,OAAVjzB,GACFid,EAAcjd,KAEf,CAACizB,EAAahW,IAEjB,IAAM9hB,EAAW,CACf4lB,OACA9D,iBAEF,OAAO,cAACjE,GAAiB3b,SAAlB,CAA2BC,MAAOnC,EAAlC,SAA6ClE,KCtGhDw6B,GAAyC,CAC7CC,KAAM,CACJ4B,gBAAiB,cAEnBC,WAAY,CACVC,eAAgB,OAChBC,kBAAmB,UAErBjB,OAAQ,CACNkB,gBAAiB,SACjBC,uBAAwB,YACxBC,gBAAiB,QAEnB1B,UAAW,CACTsB,eAAgB,SAChBC,kBAAmB,SACnBG,gBAAiB,SAafthB,GAAS,SAAC,GAAD,SAAGhC,kBAELujB,GAAkC,SAAA9lB,GAAU,IAC/C9W,EAAa8W,EAAb9W,SACFqZ,EAAmBT,8BAAmByC,IAFU,EAI9B9a,mBAVH,SAAC8Y,GACtB,OAAOA,EAAiB6H,QAAU,OAAS,SASK+a,CAAe5iB,IAJT,mBAI/CyQ,EAJ+C,KAIzCoS,EAJyC,KAKhDC,EAAUnzB,iBAAsB8gB,GAEhC9D,EAAgBva,uBAAY,SAAC1C,GACjC,IAAMqzB,EAnBS,SAACtS,EAAqB/gB,GAA0C,IAAD,EAEhF,OADc,UAAGyxB,GAAY1Q,GAAM/gB,UAArB,QAA+B+gB,EAkB1BpW,CAAWyoB,EAAQpyB,QAAShB,GAE7CrG,QAAQC,IACN,mDACAw5B,EAAQpyB,QACRhB,EACAqzB,GAEFF,EAAQE,KACP,IAEH17B,qBAAU,WACRy7B,EAAQpyB,QAAU+f,IACjB,CAACA,IAEJppB,qBAAU,WACJ2Y,EAAiB6H,SACnB8E,EAAc,qBAEf,CAAC3M,EAAiB6H,QAAS8E,IAE9B,IAAM9hB,EAAW,CACf4lB,OACA9D,iBAGF,OAAO,cAACmP,GAAqB/uB,SAAtB,CAA+BC,MAAOnC,EAAtC,SAAiDlE,KCxDpD8jB,GAAO,SAAC,GAAD,MAAiE,CAC5ExK,UADW,EAAGA,UAEdyH,eAAe,EACf8b,WAAW,IAGPxY,GAAS,SACbhX,EACA+W,GAKA,OAAQA,EAAOpZ,MACb,IAAK,iBACH,OAAO,2BAAKqC,GAAZ,IAAmBwvB,WAAW,IAEhC,IAAK,kBACH,OAAO,2BAAKxvB,GAAZ,IAAmBwvB,WAAW,IAEhC,IAAK,cACH,OAAO,2BAAKxvB,GAAZ,IAAmB0T,eAAe,IAEpC,IAAK,cACH,OAAO,2BAAK1T,GAAZ,IAAmB0T,eAAe,IAEpC,IAAK,cAAgB,IAEM+b,EAErB1Y,EAFF2Y,SAAYzjB,UACc2a,EACxB7P,EADFa,YAAe3L,UAGjB,GAAI2a,EAAc,CAChB,IAAMjP,GACHiP,EAAaxa,WAAWoN,GAAGiW,EAASrjB,aACrCwa,EAAaZ,eAAe3S,GAAGoc,EAASzJ,iBACxCY,EAAaX,SAAS5S,GAAGoc,EAASxJ,UAEpC,OAAO,2BACFjmB,GADL,IAEEiM,UAAW2a,EACX4I,WAAW,EACX9b,eAAeiE,GAA0B3X,EAAM0T,iBAMvD,OAAO1T,GAGI2vB,GAAgC,SAAC,GAAkB,IAAhBh9B,EAAe,EAAfA,SACxCi9B,EAA0B/xB,GAAsB,SADO,EAED0a,6BAAkBvB,GAAQP,IAFzB,0BAEpD+Y,EAFoD,EAEpDA,UAAW9b,EAFyC,EAEzCA,cAAezH,EAF0B,EAE1BA,UAAauM,EAFa,KAkB7D,OAdAnlB,qBAAU,WAE2B,uBAAjCu8B,EAAwBjyB,MACS,2BAAjCiyB,EAAwBjyB,KAExB6a,EAAS,CAAE7a,KAAM,gBAEgB,WAAjCiyB,EAAwBjyB,MACS,cAAjCiyB,EAAwBjyB,MAExB6a,EAAS,CAAE7a,KAAM,kBAElB,CAACiyB,EAAwBjyB,KAAM6a,IAGhC,cAACoN,GAAmB7sB,SAApB,CACEC,MAAO,CACLyjB,KAAM+S,EAAY,YAAcvjB,EAAU4H,QAAU,OAAS,SAC7DH,gBACA8E,YAJJ,SAOG7lB,KCpEMw6B,GAAoC,CAC/C0C,SAAU,CACRC,cAAe,WAEjBC,QAAS,CACPb,eAAgB,WAChBc,gBAAiB,SACjBC,eAAgB,WAElB/B,OAAQ,CACNgC,eAAgB,YAChBC,uBAAwB,SACxBC,4BAA6B,YAE/BxC,UAAW,CACTsB,eAAgB,SAChBc,gBAAiB,SACjBC,eAAgB,YAChBI,kBAAmB,UAErBC,SAAU,CACRH,uBAAwB,WACxBC,4BAA6B,aC7B3B7V,GAAW,SAAC,GAAD,MAIS,CACxB4I,qBALe,EACfA,qBAKA3C,mCANe,EAEfA,mCAKAoE,0BAPe,EAGfA,4BAOW2L,GAA6B,SAAA9mB,GAAU,IAC1C9W,EAAa8W,EAAb9W,SADyC,EAM7C4Y,8BAAmBgP,IAHrB4I,EAH+C,EAG/CA,qBACA3C,EAJ+C,EAI/CA,mCACAoE,EAL+C,EAK/CA,0BAL+C,EAQzB1xB,mBA5BH,SACrBiwB,EACA3C,EACAoE,GAEA,OAAIpE,EAAmC/I,OAAe,WAClD0L,EAAqB1L,QAAUmN,EAA0BnN,OAAe,WACrE,SAsBLmX,CACEzL,EACA3C,EACAoE,IAZ6C,mBAQ1CnI,EAR0C,KAQpCoS,EARoC,KAe3CC,EAAUnzB,iBAAiB8gB,GAE3B9D,EAAgBva,uBAAY,SAAC1C,GACjC,IAAMqzB,EA3CS,SAACtS,EAAgB/gB,GAAgC,IAAD,EAEjE,OADc,UAAGyxB,GAAY1Q,GAAM/gB,UAArB,QAA+B+gB,EA0C1BpW,CAAWyoB,EAAQpyB,QAAShB,GAE7CrG,QAAQC,IACN,mDACAw5B,EAAQpyB,QACRhB,EACAqzB,GAEFF,EAAQE,KACP,IAEH17B,qBAAU,WACRy7B,EAAQpyB,QAAU+f,IACjB,CAACA,IAEJppB,qBAAU,WACJ8vB,EAAqB1L,QAAUmN,EAA0BnN,OAC3DkB,EAAc,+BACLwK,EAAqB1L,SAAWmN,EAA0BnN,QACnEkB,EAAc,uBAEf,CAACwK,EAAqB1L,OAAQmN,EAA0BnN,OAAQkB,IAEnE,IAAM9hB,EAAW,CACf4lB,OACA9D,iBAGF,OAAO,cAAC2H,GAAgBvnB,SAAjB,CAA0BC,MAAOnC,EAAjC,SAA4ClE,KCtDxC69B,GAAkD,SAAC,GAAgB,IAAd95B,EAAa,EAAbA,OAAa,EACtCuC,IAA/BlC,EADqE,EACrEA,QAASF,EAD4D,EAC5DA,SAAU6B,EADkD,EAClDA,QAa3B,OAVAf,OAAO84B,OAAO58B,OAAQ,CACpBkD,UACAF,WACA6B,UACAie,eACApJ,mBACAwG,yBACA2c,cAIA,eAAC,wBAAD,CAA4Bh6B,SAAUmC,MAAOH,EAAQG,MAArD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAMsI,GAAI,CAAE0H,cAAe,SAAUrB,UAAW,QAAhD,UACE,cAAC,GAAD,IAEA,cAAC,IAAD,CACE3K,QAAQ,OACRsE,GAAI,CACFgC,QAAS,OACTuM,SAAU,EACV7G,cAAe,SACfzH,WAAY,SACZgC,eAAgB,UAPpB,SAUE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOutB,KAAK,IAAIjnB,OAAK,EAArB,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOinB,KAAK,QAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,GAAD,wBAUlB,cAAC,GAAD,QC5DN36B,IAAYzC,MAAK,SAAA2B,GAGfyC,OAAO84B,OAAO58B,OAAQ,CAAEqB,cAG1B,IAAM07B,GAAsBC,YAAoB,WAEhD,SAASC,GAAWj6B,GAClB,IAAMC,EAAU,IAAIi6B,KAAOr/B,UAAUs/B,aAAan6B,GAElD,OADAC,EAAQzE,gBAAkB,IACnByE,EAGT,IAAMm6B,GAAuC,kBAC3C,eAAC,IAAD,CACE9vB,GAAI,CACF0H,cAAe,SACfzH,WAAY,SACZgC,eAAgB,SAChBvB,OAAQ,QACRoF,UAAW,UANf,UASE,eAAC,IAAD,CAAS9F,GAAI,CAAE+C,GAAI,GAAnB,UACE,cAAC,GAAD,CAAM5N,KAAK,yBADb,6CAIA,cAAC,IAAD,CAAW6K,GAAI,CAAE+C,GAAI,GAArB,sFAIA,eAAC,IAAD,0FAC+E,IAC7E,eAAC,IAAD,CAAM8e,KAAK,mCAAX,kBACO,cAAC,GAAD,CAAM1sB,KAAK,oBAAoB8J,KAAK,UAH7C,WAyEW8wB,GA/DH,WACV,IAAMx6B,EACJ,eAAC,IAAD,CAAMyK,GAAI,CAAEC,WAAY,SAAUgC,eAAgB,SAAUvB,OAAQ,SAApE,UACE,cAAC,IAAD,CAASV,GAAI,CAAEuH,EAAG,EAAGvI,MAAO,QAAUC,KAAK,SAC3C,cAAC,IAAD,4BAsBJ,OACE,cAAC,IAAD,CAAmB0wB,WAAYA,GAA/B,SACE,cAACF,GAAD,CAAqBE,WAAYA,GAAjC,SACE,cAACp+B,EAAD,UACE,eAAC,IAAD,CAAemS,MAAOA,GAAtB,UACA,cAAC,IAAD,CACA1I,OAAQg1B,YAAF,8cAeF,cAAC,EAAD,CACEz6B,OAAQA,EACRC,2BAzCqB,SAACN,GAAD,OACjC,eAAC,IAAD,CACE8K,GAAI,CACF0H,cAAe,SACfzH,WAAY,SACZgC,eAAgB,SAChBvB,OAAQ,QACRoF,UAAW,UANf,UASE,eAAC,IAAD,CAAS9F,GAAI,CAAE+C,GAAI,GAAnB,UACE,cAAC,GAAD,CAAM5N,KAAK,yBADb,kCACsE,IACvD,IAAZD,EAAgB,UAAY,eAF/B,OATF,kEAyCYO,2BAA4B,cAAC,GAAD,IAH9B,SAKE,cAAC,GAAD,UACE,cAAC,GAAD,CAAiBF,OAAQA,kBCzG3C06B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e9016a63.chunk.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/BatchedProvider\"), exports);\n__exportStar(require(\"./src/WebSocketAugmentedProvider\"), exports);\n__exportStar(require(\"./src/WebSocketProvider\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connect = exports._connectByChainId = exports._connectToDeployment = exports.UnsupportedNetworkError = exports._usingStore = exports._requireFrontendAddress = exports._requireAddress = exports._getProvider = exports._requireSigner = exports._getBlockTimestamp = exports._getContracts = void 0;\nconst abstract_signer_1 = require(\"@ethersproject/abstract-signer\");\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst dev_json_1 = __importDefault(require(\"../deployments/dev.json\"));\nconst goerli_json_1 = __importDefault(require(\"../deployments/goerli.json\"));\nconst kovan_json_1 = __importDefault(require(\"../deployments/kovan.json\"));\nconst rinkeby_json_1 = __importDefault(require(\"../deployments/rinkeby.json\"));\nconst ropsten_json_1 = __importDefault(require(\"../deployments/ropsten.json\"));\nconst mainnet_json_1 = __importDefault(require(\"../deployments/mainnet.json\"));\nconst bakerloo_json_1 = __importDefault(require(\"../deployments/bakerloo.json\"));\n// import kiln from \"../deployments/kiln.json\";\nconst _utils_1 = require(\"./_utils\");\nconst contracts_1 = require(\"./contracts\");\nconst _Multicall_1 = require(\"./_Multicall\");\nconst dev = dev_json_1.default;\nconst deployments = {\n    [mainnet_json_1.default.chainId]: mainnet_json_1.default,\n    [ropsten_json_1.default.chainId]: ropsten_json_1.default,\n    [rinkeby_json_1.default.chainId]: rinkeby_json_1.default,\n    [goerli_json_1.default.chainId]: goerli_json_1.default,\n    [kovan_json_1.default.chainId]: kovan_json_1.default,\n    [bakerloo_json_1.default.chainId]: bakerloo_json_1.default,\n    // [kiln.chainId]: kiln,\n    ...(dev !== null ? { [dev.chainId]: dev } : {})\n};\nconst branded = (t) => t;\nconst connectionFrom = (provider, signer, _contracts, _multicall, { deploymentDate, totalStabilityPoolLQTYReward, liquidityMiningLQTYRewardRate, ...deployment }, optionalParams) => {\n    if (optionalParams &&\n        optionalParams.useStore !== undefined &&\n        !validStoreOptions.includes(optionalParams.useStore)) {\n        throw new Error(`Invalid useStore value ${optionalParams.useStore}`);\n    }\n    return branded({\n        provider,\n        signer,\n        _contracts,\n        _multicall,\n        deploymentDate: new Date(deploymentDate),\n        totalStabilityPoolLQTYReward: lib_base_1.Decimal.from(totalStabilityPoolLQTYReward),\n        liquidityMiningLQTYRewardRate: lib_base_1.Decimal.from(liquidityMiningLQTYRewardRate),\n        ...deployment,\n        ...optionalParams\n    });\n};\n/** @internal */\nconst _getContracts = (connection) => connection._contracts;\nexports._getContracts = _getContracts;\nconst getMulticall = (connection) => connection._multicall;\nconst getTimestampFromBlock = ({ timestamp }) => timestamp;\n/** @internal */\nconst _getBlockTimestamp = (connection, blockTag = \"latest\") => { var _a, _b; return (_b = (_a = \n// Get the timestamp via a contract call whenever possible, to make it batchable with other calls\ngetMulticall(connection)) === null || _a === void 0 ? void 0 : _a.getCurrentBlockTimestamp({ blockTag }).then(_utils_1.numberify)) !== null && _b !== void 0 ? _b : exports._getProvider(connection).getBlock(blockTag).then(getTimestampFromBlock); };\nexports._getBlockTimestamp = _getBlockTimestamp;\n/** @internal */\nconst _requireSigner = (connection) => { var _a; return (_a = connection.signer) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error(\"Must be connected through a Signer\")); };\nexports._requireSigner = _requireSigner;\n/** @internal */\nconst _getProvider = (connection) => connection.provider;\nexports._getProvider = _getProvider;\n// TODO parameterize error message?\n/** @internal */\nconst _requireAddress = (connection, overrides) => { var _a, _b; return (_b = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.from) !== null && _a !== void 0 ? _a : connection.userAddress) !== null && _b !== void 0 ? _b : _utils_1.panic(new Error(\"A user address is required\")); };\nexports._requireAddress = _requireAddress;\n/** @internal */\nconst _requireFrontendAddress = (connection) => { var _a; return (_a = connection.frontendTag) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error(\"A frontend address is required\")); };\nexports._requireFrontendAddress = _requireFrontendAddress;\n/** @internal */\nconst _usingStore = (connection) => connection.useStore !== undefined;\nexports._usingStore = _usingStore;\n/**\n * Thrown when trying to connect to a network where Liquity is not deployed.\n *\n * @remarks\n * Thrown by {@link ReadableEthersLiquity.(connect:2)} and {@link EthersLiquity.(connect:2)}.\n *\n * @public\n */\nclass UnsupportedNetworkError extends Error {\n    /** @internal */\n    constructor(chainId) {\n        super(`Unsupported network (chainId = ${chainId})`);\n        this.name = \"UnsupportedNetworkError\";\n        this.chainId = chainId;\n    }\n}\nexports.UnsupportedNetworkError = UnsupportedNetworkError;\nconst getProviderAndSigner = (signerOrProvider) => {\n    var _a;\n    const provider = abstract_signer_1.Signer.isSigner(signerOrProvider)\n        ? (_a = signerOrProvider.provider) !== null && _a !== void 0 ? _a : _utils_1.panic(new Error(\"Signer must have a Provider\")) : signerOrProvider;\n    const signer = abstract_signer_1.Signer.isSigner(signerOrProvider) ? signerOrProvider : undefined;\n    return [provider, signer];\n};\n/** @internal */\nconst _connectToDeployment = (deployment, signerOrProvider, optionalParams) => connectionFrom(...getProviderAndSigner(signerOrProvider), contracts_1._connectToContracts(signerOrProvider, deployment), undefined, deployment, optionalParams);\nexports._connectToDeployment = _connectToDeployment;\nconst validStoreOptions = [\"blockPolled\"];\n/** @internal */\nfunction _connectByChainId(provider, signer, chainId, optionalParams) {\n    var _a;\n    const deployment = (_a = deployments[chainId]) !== null && _a !== void 0 ? _a : _utils_1.panic(new UnsupportedNetworkError(chainId));\n    return connectionFrom(provider, signer, contracts_1._connectToContracts(signer !== null && signer !== void 0 ? signer : provider, deployment), _Multicall_1._connectToMulticall(signer !== null && signer !== void 0 ? signer : provider, chainId), deployment, optionalParams);\n}\nexports._connectByChainId = _connectByChainId;\n/** @internal */\nconst _connect = async (signerOrProvider, optionalParams) => {\n    const [provider, signer] = getProviderAndSigner(signerOrProvider);\n    if (signer) {\n        if ((optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.userAddress) !== undefined) {\n            throw new Error(\"Can't override userAddress when connecting through Signer\");\n        }\n        optionalParams = {\n            ...optionalParams,\n            userAddress: await signer.getAddress()\n        };\n    }\n    return _connectByChainId(provider, signer, (await provider.getNetwork()).chainId, optionalParams);\n};\nexports._connect = _connect;\n//# sourceMappingURL=EthersLiquityConnection.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = exports.Difference = exports.Decimal = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst getDigits = (numDigits) => TEN.pow(numDigits);\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = bignumber_1.BigNumber.from(1);\nconst TEN = bignumber_1.BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\nconst roundedMul = (x, y) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\nclass Decimal {\n    constructor(bigNumber) {\n        if (bigNumber.isNegative()) {\n            throw new Error(\"negatives not supported by Decimal\");\n        }\n        this._bigNumber = bigNumber;\n    }\n    /** @internal */\n    get hex() {\n        return this._bigNumber.toHexString();\n    }\n    /** @internal */\n    get bigNumber() {\n        return this._bigNumber.toString();\n    }\n    static fromBigNumberString(bigNumberString) {\n        return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n    }\n    static _fromString(representation) {\n        if (!representation || !representation.match(stringRepresentationFormat)) {\n            throw new Error(`bad decimal format: \"${representation}\"`);\n        }\n        if (representation.includes(\"e\")) {\n            // eslint-disable-next-line prefer-const\n            let [coefficient, exponent] = representation.split(\"e\");\n            if (exponent.startsWith(\"-\")) {\n                return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n            }\n            if (exponent.startsWith(\"+\")) {\n                exponent = exponent.substr(1);\n            }\n            return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n        }\n        if (!representation.includes(\".\")) {\n            return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n        }\n        // eslint-disable-next-line prefer-const\n        let [characteristic, mantissa] = representation.split(\".\");\n        if (mantissa.length < PRECISION) {\n            mantissa += \"0\".repeat(PRECISION - mantissa.length);\n        }\n        else {\n            mantissa = mantissa.substr(0, PRECISION);\n        }\n        return new Decimal(bignumber_1.BigNumber.from(characteristic || 0)\n            .mul(DIGITS)\n            .add(mantissa));\n    }\n    static from(decimalish) {\n        switch (typeof decimalish) {\n            case \"object\":\n                if (decimalish instanceof Decimal) {\n                    return decimalish;\n                }\n                else {\n                    throw new Error(\"invalid Decimalish value\");\n                }\n            case \"string\":\n                return Decimal._fromString(decimalish);\n            case \"number\":\n                return Decimal._fromString(decimalish.toString());\n            default:\n                throw new Error(\"invalid Decimalish value\");\n        }\n    }\n    _toStringWithAutomaticPrecision() {\n        const characteristic = this._bigNumber.div(DIGITS);\n        const mantissa = this._bigNumber.mod(DIGITS);\n        if (mantissa.isZero()) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    _roundUp(precision) {\n        const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n        return this._bigNumber.add(halfDigit);\n    }\n    _toStringWithPrecision(precision) {\n        if (precision < 0) {\n            throw new Error(\"precision must not be negative\");\n        }\n        const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n        const characteristic = value.div(DIGITS);\n        const mantissa = value.mod(DIGITS);\n        if (precision === 0) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.substr(0, precision);\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    toString(precision) {\n        if (this.infinite) {\n            return \"∞\";\n        }\n        else if (precision !== undefined) {\n            return this._toStringWithPrecision(precision);\n        }\n        else {\n            return this._toStringWithAutomaticPrecision();\n        }\n    }\n    prettify(precision = 2) {\n        const [characteristic, mantissa] = this.toString(precision).split(\".\");\n        const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n        return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n    }\n    shorten() {\n        const characteristicLength = this.toString(0).length;\n        const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n        const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n        const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n        return normalized.prettify(precision) + magnitudes[magnitude];\n    }\n    add(addend) {\n        return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n    }\n    sub(subtrahend) {\n        return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n    }\n    mul(multiplier) {\n        return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n    }\n    div(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n    }\n    /** @internal */\n    _divCeil(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n    }\n    mulDiv(multiplier, divider) {\n        multiplier = Decimal.from(multiplier);\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n    }\n    pow(exponent) {\n        assert_1.default(Number.isInteger(exponent));\n        assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n        if (exponent === 0) {\n            return Decimal.ONE;\n        }\n        if (exponent === 1) {\n            return this;\n        }\n        let x = this._bigNumber;\n        let y = DIGITS;\n        for (; exponent > 1; exponent >>>= 1) {\n            if (exponent & 1) {\n                y = roundedMul(x, y);\n            }\n            x = roundedMul(x, x);\n        }\n        return new Decimal(roundedMul(x, y));\n    }\n    get isZero() {\n        return this._bigNumber.isZero();\n    }\n    get zero() {\n        if (this.isZero) {\n            return this;\n        }\n    }\n    get nonZero() {\n        if (!this.isZero) {\n            return this;\n        }\n    }\n    get infinite() {\n        if (this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    get finite() {\n        if (!this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    /** @internal */\n    get absoluteValue() {\n        return this;\n    }\n    lt(that) {\n        return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n    }\n    eq(that) {\n        return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n    }\n    gt(that) {\n        return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n    }\n    gte(that) {\n        return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n    }\n    lte(that) {\n        return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n    }\n    static min(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.lt(b) ? a : b;\n    }\n    static max(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.gt(b) ? a : b;\n    }\n}\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\nclass Difference {\n    constructor(number) {\n        this._number = number;\n    }\n    static between(d1, d2) {\n        if (d1 === undefined || d2 === undefined) {\n            return new Difference(undefined);\n        }\n        d1 = Decimal.from(d1);\n        d2 = Decimal.from(d2);\n        if (d1.infinite && d2.infinite) {\n            return new Difference(undefined);\n        }\n        else if (d1.infinite) {\n            return new Difference({ sign: \"+\", absoluteValue: d1 });\n        }\n        else if (d2.infinite) {\n            return new Difference({ sign: \"-\", absoluteValue: d2 });\n        }\n        else if (d1.gt(d2)) {\n            return new Difference({ sign: \"+\", absoluteValue: Decimal.from(d1).sub(d2) });\n        }\n        else if (d2.gt(d1)) {\n            return new Difference({ sign: \"-\", absoluteValue: Decimal.from(d2).sub(d1) });\n        }\n        else {\n            return new Difference({ sign: \"\", absoluteValue: Decimal.ZERO });\n        }\n    }\n    toString(precision) {\n        if (!this._number) {\n            return \"N/A\";\n        }\n        return this._number.sign + this._number.absoluteValue.toString(precision);\n    }\n    prettify(precision) {\n        if (!this._number) {\n            return this.toString();\n        }\n        return this._number.sign + this._number.absoluteValue.prettify(precision);\n    }\n    mul(multiplier) {\n        return new Difference(this._number && {\n            sign: this._number.sign,\n            absoluteValue: this._number.absoluteValue.mul(multiplier)\n        });\n    }\n    get nonZero() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n    }\n    get positive() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n    }\n    get negative() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n    }\n    get absoluteValue() {\n        var _a;\n        return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n    }\n    get infinite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n    }\n    get finite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n    }\n}\nexports.Difference = Difference;\n/** @alpha */\nclass Percent {\n    constructor(ratio) {\n        this._percent = ratio.infinite || (ratio.mul && ratio.mul(100)) || ratio;\n    }\n    nonZeroish(precision) {\n        var _a;\n        const zeroish = `0.${\"0\".repeat(precision)}5`;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n            return this;\n        }\n    }\n    toString(precision) {\n        return (this._percent.toString(precision) +\n            (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\"));\n    }\n    prettify() {\n        var _a, _b;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n            return this.toString(0);\n        }\n        else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n            return this.toString(1);\n        }\n        else {\n            return this.toString(2);\n        }\n    }\n}\nexports.Percent = Percent;\n//# sourceMappingURL=Decimal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.promiseAllValues = exports.panic = exports.decimalify = exports.numberify = void 0;\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst numberify = (bigNumber) => bigNumber.toNumber();\nexports.numberify = numberify;\nconst decimalify = (bigNumber) => lib_base_1.Decimal.fromBigNumberString(bigNumber.toHexString());\nexports.decimalify = decimalify;\nconst panic = (e) => {\n    throw e;\n};\nexports.panic = panic;\nconst promiseAllValues = (object) => {\n    const keys = Object.keys(object);\n    return Promise.all(Object.values(object)).then(values => Object.fromEntries(values.map((value, i) => [keys[i], value])));\n};\nexports.promiseAllValues = promiseAllValues;\n//# sourceMappingURL=_utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MINIMUM_REDEMPTION_RATE = exports.MAXIMUM_BORROWING_RATE = exports.MINIMUM_BORROWING_RATE = exports.LUSD_MINIMUM_DEBT = exports.LUSD_MINIMUM_NET_DEBT = exports.LUSD_LIQUIDATION_RESERVE = exports.MINIMUM_COLLATERAL_RATIO = exports.CRITICAL_COLLATERAL_RATIO = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\nexports.CRITICAL_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.5);\n/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\nexports.MINIMUM_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.1);\n/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\nexports.LUSD_LIQUIDATION_RESERVE = Decimal_1.Decimal.from(200);\n/**\n * A Trove must always have at least this much debt on top of the\n * {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_NET_DEBT = Decimal_1.Decimal.from(1800);\n/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_DEBT = exports.LUSD_LIQUIDATION_RESERVE.add(exports.LUSD_MINIMUM_NET_DEBT);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's\n * overridden by zero.\n *\n * @public\n */\nexports.MINIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.005);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\nexports.MAXIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.05);\n/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\nexports.MINIMUM_REDEMPTION_RATE = Decimal_1.Decimal.from(0.005);\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useLiquityStore = void 0;\nconst react_1 = require(\"react\");\nconst LiquityStoreProvider_1 = require(\"../components/LiquityStoreProvider\");\nconst useLiquityStore = () => {\n    const store = react_1.useContext(LiquityStoreProvider_1.LiquityStoreContext);\n    if (!store) {\n        throw new Error(\"You must provide a LiquityStore via LiquityStoreProvider\");\n    }\n    return store;\n};\nexports.useLiquityStore = useLiquityStore;\n//# sourceMappingURL=useLiquityStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketAugmentedWeb3Provider = exports.WebSocketAugmented = exports.isWebSocketAugmentedProvider = void 0;\nconst providers_1 = require(\"@ethersproject/providers\");\nconst bytes_1 = require(\"@ethersproject/bytes\");\nconst WebSocketProvider_1 = require(\"./WebSocketProvider\");\nconst webSocketAugmentedProviders = [];\nconst isWebSocketAugmentedProvider = (provider) => webSocketAugmentedProviders.some(webSocketAugmentedProvider => provider instanceof webSocketAugmentedProvider);\nexports.isWebSocketAugmentedProvider = isWebSocketAugmentedProvider;\nconst isHeaderNotFoundError = (error) => typeof error === \"object\" &&\n    typeof error.message === \"string\" &&\n    (error.message.includes(\n    // geth\n    \"header not found\") ||\n        error.message.includes(\n        // openethereum\n        \"request is not supported because your node is running with state pruning\"));\nconst isTransactionHash = (eventName) => typeof eventName === \"string\" && bytes_1.hexDataLength(eventName) === 32;\nconst loadBalancingGlitchRetryIntervalMs = 200;\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\nconst waitFor = (f) => (g) => (t, { isActive }) => {\n    f(t).then(u => {\n        if (u !== null && isActive()) {\n            g(u);\n        }\n    });\n};\nconst pass = (f) => (t, _) => {\n    f(t);\n};\nconst passOnce = (f) => (t, { removeMe }) => {\n    f(t);\n    removeMe();\n};\nconst sequence = (f, g) => (h) => (t, context) => {\n    f(u => g(h)(u, context))(t, context);\n};\nconst defer = (f) => (t) => {\n    setTimeout(() => {\n        f(t);\n    }, 0);\n};\nconst WebSocketAugmented = (Base) => {\n    let webSocketAugmentedProvider = class extends Base {\n        constructor() {\n            super(...arguments);\n            this._seenBlock = 0;\n            this._blockListenerScheduled = false;\n            this._blockListeners = new Map();\n            this._blockListener = this._onBlock.bind(this);\n        }\n        openWebSocket(url, network) {\n            this._wsProvider = new WebSocketProvider_1.WebSocketProvider(url, network);\n            this._wsProvider.onClose = this._onWebSocketClose.bind(this);\n            this._wsParams = [url, network];\n            this._switchover();\n        }\n        _onWebSocketClose() {\n            this.closeWebSocket();\n            console.warn(\"WebSocketProvider disconnected. Retrying in 10 seconds.\");\n            this._reconnectTimerId = setTimeout(() => this.openWebSocket(...this._wsParams), 10000);\n        }\n        closeWebSocket() {\n            if (this._wsProvider) {\n                this._wsProvider.onClose = null;\n                this._wsProvider.close(1000); // normal closure\n                this._wsProvider = undefined;\n                this._switchover();\n                if (this._reconnectTimerId !== undefined) {\n                    clearTimeout(this._reconnectTimerId);\n                    this._reconnectTimerId = undefined;\n                }\n            }\n        }\n        _switchover() {\n            if (this._blockListeners.size > 0) {\n                if (this._wsProvider) {\n                    super.off(\"block\", this._blockListener);\n                }\n                this._startBlockEvents();\n            }\n        }\n        _onBlock(blockNumber) {\n            this._seenBlock = blockNumber;\n            if (!this._blockListenerScheduled) {\n                this._blockListenerScheduled = true;\n                setTimeout(() => {\n                    this._blockListenerScheduled = false;\n                    [...this._blockListeners].forEach(([, listener]) => listener(this._seenBlock));\n                }, 50);\n            }\n        }\n        async _retrySeenBlock(perform, startingBlock) {\n            for (let retries = 0;; ++retries) {\n                try {\n                    const ret = await perform();\n                    if (retries) {\n                        // console.log(`Glitch resolved after ${retries} ${retries === 1 ? \"retry\" : \"retries\"}.`);\n                    }\n                    return ret;\n                }\n                catch (error) {\n                    if (this._seenBlock !== startingBlock || !isHeaderNotFoundError(error)) {\n                        throw error;\n                    }\n                }\n                // console.warn(\"Load balancing glitch. Retrying...\");\n                await delay(loadBalancingGlitchRetryIntervalMs);\n            }\n        }\n        async call(transaction, blockTag) {\n            const resolvedBlockTag = await blockTag;\n            const perform = () => {\n                var _a;\n                return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.call(transaction, resolvedBlockTag)\n                    : super.call(transaction, resolvedBlockTag);\n            };\n            return resolvedBlockTag === this._seenBlock\n                ? this._retrySeenBlock(perform, this._seenBlock)\n                : perform();\n        }\n        async getBalance(addressOrName, blockTag) {\n            const resolvedBlockTag = await blockTag;\n            const perform = () => {\n                var _a;\n                return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.getBalance(addressOrName, resolvedBlockTag)\n                    : super.getBalance(addressOrName, resolvedBlockTag);\n            };\n            return resolvedBlockTag === this._seenBlock\n                ? this._retrySeenBlock(perform, this._seenBlock)\n                : perform();\n        }\n        _startBlockEvents() {\n            if (this._wsProvider) {\n                console.log(\"Listening for new blocks on WebSocketProvider\");\n                this._wsProvider.on(\"block\", this._blockListener);\n            }\n            else {\n                console.log(\"Listening for new blocks on basic Provider\");\n                super.on(\"block\", this._blockListener);\n            }\n        }\n        _stopBlockEvents() {\n            if (this._wsProvider) {\n                this._wsProvider.off(\"block\", this._blockListener);\n            }\n            else {\n                super.off(\"block\", this._blockListener);\n            }\n        }\n        _wrap(f, g) {\n            return [\n                f,\n                (u) => g(defer(f))(u, {\n                    isActive: () => this._blockListeners.has(f),\n                    removeMe: () => this._blockListeners.delete(f)\n                })\n            ];\n        }\n        on(eventName, listener) {\n            if (isTransactionHash(eventName)) {\n                const fetchReceipt = this._getTransactionReceiptFromLatest.bind(this, eventName);\n                const [, passReceipt] = this._wrap(listener, waitFor(fetchReceipt));\n                passReceipt(undefined);\n                return this._addBlockListener(listener, passReceipt);\n            }\n            else if (eventName === \"block\") {\n                return this._addBlockListener(...this._wrap(listener, pass));\n            }\n            else {\n                return super.on(eventName, listener);\n            }\n        }\n        _addBlockListener(key, blockListener) {\n            if (!this._blockListeners.has(key)) {\n                this._blockListeners.set(key, blockListener);\n                if (this._blockListeners.size === 1) {\n                    this._startBlockEvents();\n                }\n            }\n            return this;\n        }\n        once(eventName, listener) {\n            if (isTransactionHash(eventName)) {\n                const fetchReceipt = this._getTransactionReceiptFromLatest.bind(this, eventName);\n                const [, passReceiptOnce] = this._wrap(listener, sequence(waitFor(fetchReceipt), passOnce));\n                passReceiptOnce(undefined);\n                return this._addBlockListener(listener, passReceiptOnce);\n            }\n            else if (eventName === \"block\") {\n                return this._addBlockListener(...this._wrap(listener, passOnce));\n            }\n            else {\n                return super.once(eventName, listener);\n            }\n        }\n        off(eventName, listener) {\n            if (isTransactionHash(eventName) || eventName === \"block\") {\n                return this._removeBlockListener(listener);\n            }\n            else {\n                return super.off(eventName, listener);\n            }\n        }\n        _removeBlockListener(key) {\n            if (this._blockListeners.has(key)) {\n                this._blockListeners.delete(key);\n                if (this._blockListeners.size === 0) {\n                    this._stopBlockEvents();\n                }\n            }\n            return this;\n        }\n        async getTransaction(transactionHash) {\n            var _a, _b;\n            const txPromises = [\n                super.getTransaction(transactionHash),\n                ...(((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? [this._wsProvider.getTransaction(transactionHash)] : [])\n            ];\n            const first = await Promise.race(txPromises);\n            const tx = (_b = first !== null && first !== void 0 ? first : (await Promise.all(txPromises)).find(tx => tx !== null)) !== null && _b !== void 0 ? _b : null;\n            return tx;\n        }\n        getTransactionReceipt(transactionHash) {\n            var _a;\n            return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.getTransactionReceipt(transactionHash)\n                : super.getTransactionReceipt(transactionHash);\n        }\n        getTransactionCount(addressOrName, blockTag) {\n            var _a;\n            return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.getTransactionCount(addressOrName, blockTag)\n                : super.getTransactionCount(addressOrName, blockTag);\n        }\n        getBlock(blockHashOrBlockTag) {\n            var _a;\n            return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.getBlock(blockHashOrBlockTag)\n                : super.getBlock(blockHashOrBlockTag);\n        }\n        getBlockWithTransactions(blockHashOrBlockTag) {\n            var _a;\n            return ((_a = this._wsProvider) === null || _a === void 0 ? void 0 : _a.isReady) ? this._wsProvider.getBlockWithTransactions(blockHashOrBlockTag)\n                : super.getBlockWithTransactions(blockHashOrBlockTag);\n        }\n        async _blockContainsTx(blockNumber, txHash) {\n            let block;\n            for (block = null; !block; block = await this.getBlock(blockNumber)) {\n                await delay(loadBalancingGlitchRetryIntervalMs);\n            }\n            return block.transactions.some(txHashInBlock => txHashInBlock === txHash);\n        }\n        async _getTransactionReceiptFromLatest(txHash, latestBlock) {\n            txHash = await txHash;\n            for (let retries = 0;; ++retries) {\n                const receipt = (await this.getTransactionReceipt(txHash));\n                if (latestBlock === undefined ||\n                    (receipt === null && !(await this._blockContainsTx(latestBlock, txHash))) ||\n                    (receipt !== null && receipt.blockNumber + receipt.confirmations - 1 >= latestBlock)) {\n                    if (retries) {\n                        // console.log(`Glitch resolved after ${retries} ${retries === 1 ? \"retry\" : \"retries\"}.`);\n                    }\n                    return receipt;\n                }\n                // console.warn(\"Load balancing glitch. Retrying...\");\n                await delay(loadBalancingGlitchRetryIntervalMs);\n            }\n        }\n        async waitForTransaction(txHash, confirmations, timeout) {\n            if (timeout !== undefined) {\n                // We don't use timeout, don't implement it\n                return super.waitForTransaction(txHash, confirmations, timeout);\n            }\n            let latestBlock = undefined;\n            for (;;) {\n                const receipt = await this._getTransactionReceiptFromLatest(txHash, latestBlock);\n                if (receipt !== null &&\n                    (confirmations === undefined || receipt.confirmations >= confirmations)) {\n                    return receipt;\n                }\n                latestBlock = await new Promise(resolve => this.once(\"block\", resolve));\n            }\n        }\n    };\n    webSocketAugmentedProviders.push(webSocketAugmentedProvider);\n    return webSocketAugmentedProvider;\n};\nexports.WebSocketAugmented = WebSocketAugmented;\nexports.WebSocketAugmentedWeb3Provider = exports.WebSocketAugmented(providers_1.Web3Provider);\n//# sourceMappingURL=WebSocketAugmentedProvider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketProvider = void 0;\nconst providers_1 = require(\"@ethersproject/providers\");\nclass WebSocketProvider extends providers_1.WebSocketProvider {\n    get isReady() {\n        return this._websocket.readyState === WebSocket.OPEN;\n    }\n    set onClose(closeListener) {\n        this._websocket.onclose = closeListener;\n    }\n    close(code) {\n        this._websocket.close(code);\n    }\n    async detectNetwork() {\n        return this.network;\n    }\n}\nexports.WebSocketProvider = WebSocketProvider;\n//# sourceMappingURL=WebSocketProvider.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connectToContracts = exports._uniTokenIsMock = exports._priceFeedIsTestnet = exports._LiquityContract = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst ActivePool_json_1 = __importDefault(require(\"../abi/ActivePool.json\"));\nconst BorrowerOperations_json_1 = __importDefault(require(\"../abi/BorrowerOperations.json\"));\nconst TroveManager_json_1 = __importDefault(require(\"../abi/TroveManager.json\"));\nconst LUSDToken_json_1 = __importDefault(require(\"../abi/LUSDToken.json\"));\nconst CollSurplusPool_json_1 = __importDefault(require(\"../abi/CollSurplusPool.json\"));\nconst CommunityIssuance_json_1 = __importDefault(require(\"../abi/CommunityIssuance.json\"));\nconst DefaultPool_json_1 = __importDefault(require(\"../abi/DefaultPool.json\"));\nconst LQTYToken_json_1 = __importDefault(require(\"../abi/LQTYToken.json\"));\nconst HintHelpers_json_1 = __importDefault(require(\"../abi/HintHelpers.json\"));\nconst LockupContractFactory_json_1 = __importDefault(require(\"../abi/LockupContractFactory.json\"));\nconst LQTYStaking_json_1 = __importDefault(require(\"../abi/LQTYStaking.json\"));\nconst MultiTroveGetter_json_1 = __importDefault(require(\"../abi/MultiTroveGetter.json\"));\nconst PriceFeed_json_1 = __importDefault(require(\"../abi/PriceFeed.json\"));\nconst PriceFeedTestnet_json_1 = __importDefault(require(\"../abi/PriceFeedTestnet.json\"));\nconst SortedTroves_json_1 = __importDefault(require(\"../abi/SortedTroves.json\"));\nconst StabilityPool_json_1 = __importDefault(require(\"../abi/StabilityPool.json\"));\nconst GasPool_json_1 = __importDefault(require(\"../abi/GasPool.json\"));\nconst Unipool_json_1 = __importDefault(require(\"../abi/Unipool.json\"));\nconst IERC20_json_1 = __importDefault(require(\"../abi/IERC20.json\"));\nconst ERC20Mock_json_1 = __importDefault(require(\"../abi/ERC20Mock.json\"));\nconst buildEstimatedFunctions = (estimateFunctions, functions) => Object.fromEntries(Object.keys(estimateFunctions).map(functionName => [\n    functionName,\n    async (overrides, adjustEstimate, ...args) => {\n        if (overrides.gasLimit === undefined) {\n            const estimatedGas = await estimateFunctions[functionName](...args, overrides);\n            overrides = {\n                ...overrides,\n                gasLimit: adjustEstimate(estimatedGas)\n            };\n        }\n        return functions[functionName](...args, overrides);\n    }\n]));\nclass _LiquityContract extends contracts_1.Contract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        super(addressOrName, contractInterface, signerOrProvider);\n        // this.estimateAndCall = buildEstimatedFunctions(this.estimateGas, this);\n        this.estimateAndPopulate = buildEstimatedFunctions(this.estimateGas, this.populateTransaction);\n    }\n    extractEvents(logs, name) {\n        return logs\n            .filter(log => log.address === this.address)\n            .map(log => this.interface.parseLog(log))\n            .filter(e => e.name === name);\n    }\n}\nexports._LiquityContract = _LiquityContract;\n/** @internal */\nconst _priceFeedIsTestnet = (priceFeed) => \"setPrice\" in priceFeed;\nexports._priceFeedIsTestnet = _priceFeedIsTestnet;\n/** @internal */\nconst _uniTokenIsMock = (uniToken) => \"mint\" in uniToken;\nexports._uniTokenIsMock = _uniTokenIsMock;\nconst getAbi = (priceFeedIsTestnet, uniTokenIsMock) => ({\n    activePool: ActivePool_json_1.default,\n    borrowerOperations: BorrowerOperations_json_1.default,\n    troveManager: TroveManager_json_1.default,\n    lusdToken: LUSDToken_json_1.default,\n    communityIssuance: CommunityIssuance_json_1.default,\n    defaultPool: DefaultPool_json_1.default,\n    lqtyToken: LQTYToken_json_1.default,\n    hintHelpers: HintHelpers_json_1.default,\n    lockupContractFactory: LockupContractFactory_json_1.default,\n    lqtyStaking: LQTYStaking_json_1.default,\n    multiTroveGetter: MultiTroveGetter_json_1.default,\n    priceFeed: priceFeedIsTestnet ? PriceFeedTestnet_json_1.default : PriceFeed_json_1.default,\n    sortedTroves: SortedTroves_json_1.default,\n    stabilityPool: StabilityPool_json_1.default,\n    gasPool: GasPool_json_1.default,\n    collSurplusPool: CollSurplusPool_json_1.default,\n    unipool: Unipool_json_1.default,\n    uniToken: uniTokenIsMock ? ERC20Mock_json_1.default : IERC20_json_1.default\n});\nconst mapLiquityContracts = (contracts, f) => Object.fromEntries(Object.entries(contracts).map(([key, t]) => [key, f(t, key)]));\n/** @internal */\nconst _connectToContracts = (signerOrProvider, { addresses, _priceFeedIsTestnet, _uniTokenIsMock }) => {\n    const abi = getAbi(_priceFeedIsTestnet, _uniTokenIsMock);\n    return mapLiquityContracts(addresses, (address, key) => new _LiquityContract(address, abi[key], signerOrProvider));\n};\nexports._connectToContracts = _connectToContracts;\n//# sourceMappingURL=contracts.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadableEthersLiquity = void 0;\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst _utils_1 = require(\"./_utils\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst BlockPolledLiquityStore_1 = require(\"./BlockPolledLiquityStore\");\n// TODO: these are constant in the contracts, so it doesn't make sense to make a call for them,\n// but to avoid having to update them here when we change them in the contracts, we could read\n// them once after deployment and save them to LiquityDeployment.\nconst MINUTE_DECAY_FACTOR = lib_base_1.Decimal.from(\"0.999037758833783000\");\nconst BETA = lib_base_1.Decimal.from(2);\nvar BackendTroveStatus;\n(function (BackendTroveStatus) {\n    BackendTroveStatus[BackendTroveStatus[\"nonExistent\"] = 0] = \"nonExistent\";\n    BackendTroveStatus[BackendTroveStatus[\"active\"] = 1] = \"active\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByOwner\"] = 2] = \"closedByOwner\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByLiquidation\"] = 3] = \"closedByLiquidation\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByRedemption\"] = 4] = \"closedByRedemption\";\n})(BackendTroveStatus || (BackendTroveStatus = {}));\nconst userTroveStatusFrom = (backendStatus) => backendStatus === BackendTroveStatus.nonExistent\n    ? \"nonExistent\"\n    : backendStatus === BackendTroveStatus.active\n        ? \"open\"\n        : backendStatus === BackendTroveStatus.closedByOwner\n            ? \"closedByOwner\"\n            : backendStatus === BackendTroveStatus.closedByLiquidation\n                ? \"closedByLiquidation\"\n                : backendStatus === BackendTroveStatus.closedByRedemption\n                    ? \"closedByRedemption\"\n                    : _utils_1.panic(new Error(`invalid backendStatus ${backendStatus}`));\nconst convertToDate = (timestamp) => new Date(timestamp * 1000);\nconst validSortingOptions = [\"ascendingCollateralRatio\", \"descendingCollateralRatio\"];\nconst expectPositiveInt = (obj, key) => {\n    if (obj[key] !== undefined) {\n        if (!Number.isInteger(obj[key])) {\n            throw new Error(`${key} must be an integer`);\n        }\n        if (obj[key] < 0) {\n            throw new Error(`${key} must not be negative`);\n        }\n    }\n};\n/**\n * Ethers-based implementation of {@link @fluidity/lib-base#ReadableLiquity}.\n *\n * @public\n */\nclass ReadableEthersLiquity {\n    /** @internal */\n    constructor(connection) {\n        this.connection = connection;\n    }\n    /** @internal */\n    static _from(connection) {\n        const readable = new ReadableEthersLiquity(connection);\n        return connection.useStore === \"blockPolled\"\n            ? new _BlockPolledReadableEthersLiquity(readable)\n            : readable;\n    }\n    /**\n     * Connect to the Liquity protocol and create a `ReadableEthersLiquity` object.\n     *\n     * @param signerOrProvider - Ethers `Signer` or `Provider` to use for connecting to the Ethereum\n     *                           network.\n     * @param optionalParams - Optional parameters that can be used to customize the connection.\n     */\n    static async connect(signerOrProvider, optionalParams) {\n        return ReadableEthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    async getTotalRedistributed(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [collateral, debt] = await Promise.all([\n            troveManager.L_ETH({ ...overrides }).then(_utils_1.decimalify),\n            troveManager.L_LUSDDebt({ ...overrides }).then(_utils_1.decimalify)\n        ]);\n        return new lib_base_1.Trove(collateral, debt);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    async getTroveBeforeRedistribution(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [trove, snapshot] = await Promise.all([\n            troveManager.Troves(address, { ...overrides }),\n            troveManager.rewardSnapshots(address, { ...overrides })\n        ]);\n        if (trove.status === BackendTroveStatus.active) {\n            return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status), _utils_1.decimalify(trove.coll), _utils_1.decimalify(trove.debt), _utils_1.decimalify(trove.stake), new lib_base_1.Trove(_utils_1.decimalify(snapshot.ETH), _utils_1.decimalify(snapshot.LUSDDebt)));\n        }\n        else {\n            return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status));\n        }\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTrove} */\n    async getTrove(address, overrides) {\n        const [trove, totalRedistributed] = await Promise.all([\n            this.getTroveBeforeRedistribution(address, overrides),\n            this.getTotalRedistributed(overrides)\n        ]);\n        return trove.applyRedistribution(totalRedistributed);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    async getNumberOfTroves(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        return (await troveManager.getTroveOwnersCount({ ...overrides })).toNumber();\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        const { priceFeed } = EthersLiquityConnection_1._getContracts(this.connection);\n        return priceFeed.callStatic.fetchPrice({ ...overrides }).then(_utils_1.decimalify);\n    }\n    /** @internal */\n    async _getActivePool(overrides) {\n        const { activePool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [activeCollateral, activeDebt] = await Promise.all([\n            activePool.getETH({ ...overrides }),\n            activePool.getLUSDDebt({ ...overrides })\n        ].map(getBigNumber => getBigNumber.then(_utils_1.decimalify)));\n        return new lib_base_1.Trove(activeCollateral, activeDebt);\n    }\n    /** @internal */\n    async _getDefaultPool(overrides) {\n        const { defaultPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [liquidatedCollateral, closedDebt] = await Promise.all([\n            defaultPool.getETH({ ...overrides }),\n            defaultPool.getLUSDDebt({ ...overrides })\n        ].map(getBigNumber => getBigNumber.then(_utils_1.decimalify)));\n        return new lib_base_1.Trove(liquidatedCollateral, closedDebt);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotal} */\n    async getTotal(overrides) {\n        const [activePool, defaultPool] = await Promise.all([\n            this._getActivePool(overrides),\n            this._getDefaultPool(overrides)\n        ]);\n        return activePool.add(defaultPool);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    async getStabilityDeposit(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [{ frontEndTag, initialValue }, currentLUSD, collateralGain, lqtyReward] = await Promise.all([\n            stabilityPool.deposits(address, { ...overrides }),\n            stabilityPool.getCompoundedLUSDDeposit(address, { ...overrides }),\n            stabilityPool.getDepositorETHGain(address, { ...overrides }),\n            stabilityPool.getDepositorLQTYGain(address, { ...overrides })\n        ]);\n        return new lib_base_1.StabilityDeposit(_utils_1.decimalify(initialValue), _utils_1.decimalify(currentLUSD), _utils_1.decimalify(collateralGain), _utils_1.decimalify(lqtyReward), frontEndTag);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    async getRemainingStabilityPoolLQTYReward(overrides) {\n        const { communityIssuance } = EthersLiquityConnection_1._getContracts(this.connection);\n        const issuanceCap = this.connection.totalStabilityPoolLQTYReward;\n        const totalLQTYIssued = _utils_1.decimalify(await communityIssuance.totalLQTYIssued({ ...overrides }));\n        // totalLQTYIssued approaches but never reaches issuanceCap\n        return issuanceCap.sub(totalLQTYIssued);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return stabilityPool.getTotalLUSDDeposits({ ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lusdToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lqtyToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { uniToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return uniToken.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return uniToken.allowance(address, unipool.address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** @internal */\n    async _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [totalSupply, rewardRate, periodFinish, lastUpdateTime] = await Promise.all([\n            unipool.totalSupply({ ...overrides }),\n            unipool.rewardRate({ ...overrides }).then(_utils_1.decimalify),\n            unipool.periodFinish({ ...overrides }).then(_utils_1.numberify),\n            unipool.lastUpdateTime({ ...overrides }).then(_utils_1.numberify)\n        ]);\n        return (blockTimestamp) => rewardRate.mul(Math.max(0, periodFinish - (totalSupply.isZero() ? lastUpdateTime : blockTimestamp)));\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    async getRemainingLiquidityMiningLQTYReward(overrides) {\n        const [calculateRemainingLQTY, blockTimestamp] = await Promise.all([\n            this._getRemainingLiquidityMiningLQTYRewardCalculator(overrides),\n            this._getBlockTimestamp(overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)\n        ]);\n        return calculateRemainingLQTY(blockTimestamp);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.balanceOf(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.totalSupply({ ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.earned(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { collSurplusPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return collSurplusPool.getCollateral(address, { ...overrides }).then(_utils_1.decimalify);\n    }\n    async getTroves(params, overrides) {\n        var _a, _b;\n        const { multiTroveGetter } = EthersLiquityConnection_1._getContracts(this.connection);\n        expectPositiveInt(params, \"first\");\n        expectPositiveInt(params, \"startingAt\");\n        if (!validSortingOptions.includes(params.sortedBy)) {\n            throw new Error(`sortedBy must be one of: ${validSortingOptions.map(x => `\"${x}\"`).join(\", \")}`);\n        }\n        const [totalRedistributed, backendTroves] = await Promise.all([\n            params.beforeRedistribution ? undefined : this.getTotalRedistributed({ ...overrides }),\n            multiTroveGetter.getMultipleSortedTroves(params.sortedBy === \"descendingCollateralRatio\"\n                ? (_a = params.startingAt) !== null && _a !== void 0 ? _a : 0 : -(((_b = params.startingAt) !== null && _b !== void 0 ? _b : 0) + 1), params.first, { ...overrides })\n        ]);\n        const troves = mapBackendTroves(backendTroves);\n        if (totalRedistributed) {\n            return troves.map(trove => trove.applyRedistribution(totalRedistributed));\n        }\n        else {\n            return troves;\n        }\n    }\n    /** @internal */\n    _getBlockTimestamp(blockTag) {\n        return EthersLiquityConnection_1._getBlockTimestamp(this.connection, blockTag);\n    }\n    /** @internal */\n    async _getFeesFactory(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [lastFeeOperationTime, baseRateWithoutDecay] = await Promise.all([\n            troveManager.lastFeeOperationTime({ ...overrides }),\n            troveManager.baseRate({ ...overrides }).then(_utils_1.decimalify)\n        ]);\n        return (blockTimestamp, recoveryMode) => new lib_base_1.Fees(baseRateWithoutDecay, MINUTE_DECAY_FACTOR, BETA, convertToDate(lastFeeOperationTime.toNumber()), convertToDate(blockTimestamp), recoveryMode);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getFees} */\n    async getFees(overrides) {\n        const [createFees, total, price, blockTimestamp] = await Promise.all([\n            this._getFeesFactory(overrides),\n            this.getTotal(overrides),\n            this.getPrice(overrides),\n            this._getBlockTimestamp(overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)\n        ]);\n        return createFees(blockTimestamp, total.collateralRatioIsBelowCritical(price));\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLQTYStake} */\n    async getLQTYStake(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [stakedLQTY, collateralGain, lusdGain] = await Promise.all([\n            lqtyStaking.stakes(address, { ...overrides }),\n            lqtyStaking.getPendingETHGain(address, { ...overrides }),\n            lqtyStaking.getPendingLUSDGain(address, { ...overrides })\n        ].map(getBigNumber => getBigNumber.then(_utils_1.decimalify)));\n        return new lib_base_1.LQTYStake(stakedLQTY, collateralGain, lusdGain);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    async getTotalStakedLQTY(overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lqtyStaking.totalLQTYStaked({ ...overrides }).then(_utils_1.decimalify);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getFrontendStatus} */\n    async getFrontendStatus(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireFrontendAddress(this.connection));\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const { registered, kickbackRate } = await stabilityPool.frontEnds(address, { ...overrides });\n        return registered\n            ? { status: \"registered\", kickbackRate: _utils_1.decimalify(kickbackRate) }\n            : { status: \"unregistered\" };\n    }\n}\nexports.ReadableEthersLiquity = ReadableEthersLiquity;\nconst mapBackendTroves = (troves) => troves.map(trove => new lib_base_1.TroveWithPendingRedistribution(trove.owner, \"open\", // These Troves are coming from the SortedTroves list, so they must be open\n_utils_1.decimalify(trove.coll), _utils_1.decimalify(trove.debt), _utils_1.decimalify(trove.stake), new lib_base_1.Trove(_utils_1.decimalify(trove.snapshotETH), _utils_1.decimalify(trove.snapshotLUSDDebt))));\nclass _BlockPolledReadableEthersLiquity {\n    constructor(readable) {\n        const store = new BlockPolledLiquityStore_1.BlockPolledLiquityStore(readable);\n        this.store = store;\n        this.connection = readable.connection;\n        this._readable = readable;\n    }\n    _blockHit(overrides) {\n        return (!overrides ||\n            overrides.blockTag === undefined ||\n            overrides.blockTag === this.store.state.blockTag);\n    }\n    _userHit(address, overrides) {\n        return (this._blockHit(overrides) &&\n            (address === undefined || address === this.store.connection.userAddress));\n    }\n    _frontendHit(address, overrides) {\n        return (this._blockHit(overrides) &&\n            (address === undefined || address === this.store.connection.frontendTag));\n    }\n    hasStore(store) {\n        return store === undefined || store === \"blockPolled\";\n    }\n    async getTotalRedistributed(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.totalRedistributed\n            : this._readable.getTotalRedistributed(overrides);\n    }\n    async getTroveBeforeRedistribution(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.troveBeforeRedistribution\n            : this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    async getTrove(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.trove\n            : this._readable.getTrove(address, overrides);\n    }\n    async getNumberOfTroves(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.numberOfTroves\n            : this._readable.getNumberOfTroves(overrides);\n    }\n    async getPrice(overrides) {\n        return this._blockHit(overrides) ? this.store.state.price : this._readable.getPrice(overrides);\n    }\n    async getTotal(overrides) {\n        return this._blockHit(overrides) ? this.store.state.total : this._readable.getTotal(overrides);\n    }\n    async getStabilityDeposit(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.stabilityDeposit\n            : this._readable.getStabilityDeposit(address, overrides);\n    }\n    async getRemainingStabilityPoolLQTYReward(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.remainingStabilityPoolLQTYReward\n            : this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    async getLUSDInStabilityPool(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.lusdInStabilityPool\n            : this._readable.getLUSDInStabilityPool(overrides);\n    }\n    async getLUSDBalance(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.lusdBalance\n            : this._readable.getLUSDBalance(address, overrides);\n    }\n    async getLQTYBalance(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.lqtyBalance\n            : this._readable.getLQTYBalance(address, overrides);\n    }\n    async getUniTokenBalance(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.uniTokenBalance\n            : this._readable.getUniTokenBalance(address, overrides);\n    }\n    async getUniTokenAllowance(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.uniTokenAllowance\n            : this._readable.getUniTokenAllowance(address, overrides);\n    }\n    async getRemainingLiquidityMiningLQTYReward(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.remainingLiquidityMiningLQTYReward\n            : this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    async getLiquidityMiningStake(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.liquidityMiningStake\n            : this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    async getTotalStakedUniTokens(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.totalStakedUniTokens\n            : this._readable.getTotalStakedUniTokens(overrides);\n    }\n    async getLiquidityMiningLQTYReward(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.liquidityMiningLQTYReward\n            : this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    async getCollateralSurplusBalance(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.collateralSurplusBalance\n            : this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n    async _getBlockTimestamp(blockTag) {\n        return this._blockHit({ blockTag })\n            ? this.store.state.blockTimestamp\n            : this._readable._getBlockTimestamp(blockTag);\n    }\n    async _getFeesFactory(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state._feesFactory\n            : this._readable._getFeesFactory(overrides);\n    }\n    async getFees(overrides) {\n        return this._blockHit(overrides) ? this.store.state.fees : this._readable.getFees(overrides);\n    }\n    async getLQTYStake(address, overrides) {\n        return this._userHit(address, overrides)\n            ? this.store.state.lqtyStake\n            : this._readable.getLQTYStake(address, overrides);\n    }\n    async getTotalStakedLQTY(overrides) {\n        return this._blockHit(overrides)\n            ? this.store.state.totalStakedLQTY\n            : this._readable.getTotalStakedLQTY(overrides);\n    }\n    async getFrontendStatus(address, overrides) {\n        return this._frontendHit(address, overrides)\n            ? this.store.state.frontend\n            : this._readable.getFrontendStatus(address, overrides);\n    }\n    getTroves(params, overrides) {\n        return this._readable.getTroves(params, overrides);\n    }\n    _getActivePool() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getDefaultPool() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getRemainingLiquidityMiningLQTYRewardCalculator() {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n//# sourceMappingURL=ReadableEthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockPolledLiquityStore = void 0;\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst _utils_1 = require(\"./_utils\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\n/**\n * Ethers-based {@link @fluidity/lib-base#LiquityStore} that updates state whenever there's a new\n * block.\n *\n * @public\n */\nclass BlockPolledLiquityStore extends lib_base_1.LiquityStore {\n    constructor(readable) {\n        super();\n        this.connection = readable.connection;\n        this._readable = readable;\n        this._provider = EthersLiquityConnection_1._getProvider(readable.connection);\n    }\n    async _getRiskiestTroveBeforeRedistribution(overrides) {\n        const riskiestTroves = await this._readable.getTroves({ first: 1, sortedBy: \"ascendingCollateralRatio\", beforeRedistribution: true }, overrides);\n        if (riskiestTroves.length === 0) {\n            return new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, \"nonExistent\");\n        }\n        return riskiestTroves[0];\n    }\n    async _get(blockTag) {\n        const { userAddress, frontendTag } = this.connection;\n        const { blockTimestamp, _feesFactory, calculateRemainingLQTY, ...baseState } = await _utils_1.promiseAllValues({\n            blockTimestamp: this._readable._getBlockTimestamp(blockTag),\n            _feesFactory: this._readable._getFeesFactory({ blockTag }),\n            calculateRemainingLQTY: this._readable._getRemainingLiquidityMiningLQTYRewardCalculator({\n                blockTag\n            }),\n            price: this._readable.getPrice({ blockTag }),\n            numberOfTroves: this._readable.getNumberOfTroves({ blockTag }),\n            totalRedistributed: this._readable.getTotalRedistributed({ blockTag }),\n            total: this._readable.getTotal({ blockTag }),\n            lusdInStabilityPool: this._readable.getLUSDInStabilityPool({ blockTag }),\n            totalStakedLQTY: this._readable.getTotalStakedLQTY({ blockTag }),\n            _riskiestTroveBeforeRedistribution: this._getRiskiestTroveBeforeRedistribution({ blockTag }),\n            totalStakedUniTokens: this._readable.getTotalStakedUniTokens({ blockTag }),\n            remainingStabilityPoolLQTYReward: this._readable.getRemainingStabilityPoolLQTYReward({\n                blockTag\n            }),\n            frontend: frontendTag\n                ? this._readable.getFrontendStatus(frontendTag, { blockTag })\n                : { status: \"unregistered\" },\n            ...(userAddress\n                ? {\n                    accountBalance: this._provider.getBalance(userAddress, blockTag).then(_utils_1.decimalify),\n                    lusdBalance: this._readable.getLUSDBalance(userAddress, { blockTag }),\n                    lqtyBalance: this._readable.getLQTYBalance(userAddress, { blockTag }),\n                    uniTokenBalance: this._readable.getUniTokenBalance(userAddress, { blockTag }),\n                    uniTokenAllowance: this._readable.getUniTokenAllowance(userAddress, { blockTag }),\n                    liquidityMiningStake: this._readable.getLiquidityMiningStake(userAddress, { blockTag }),\n                    liquidityMiningLQTYReward: this._readable.getLiquidityMiningLQTYReward(userAddress, {\n                        blockTag\n                    }),\n                    collateralSurplusBalance: this._readable.getCollateralSurplusBalance(userAddress, {\n                        blockTag\n                    }),\n                    troveBeforeRedistribution: this._readable.getTroveBeforeRedistribution(userAddress, {\n                        blockTag\n                    }),\n                    stabilityDeposit: this._readable.getStabilityDeposit(userAddress, { blockTag }),\n                    lqtyStake: this._readable.getLQTYStake(userAddress, { blockTag }),\n                    ownFrontend: this._readable.getFrontendStatus(userAddress, { blockTag })\n                }\n                : {\n                    accountBalance: lib_base_1.Decimal.ZERO,\n                    lusdBalance: lib_base_1.Decimal.ZERO,\n                    lqtyBalance: lib_base_1.Decimal.ZERO,\n                    uniTokenBalance: lib_base_1.Decimal.ZERO,\n                    uniTokenAllowance: lib_base_1.Decimal.ZERO,\n                    liquidityMiningStake: lib_base_1.Decimal.ZERO,\n                    liquidityMiningLQTYReward: lib_base_1.Decimal.ZERO,\n                    collateralSurplusBalance: lib_base_1.Decimal.ZERO,\n                    troveBeforeRedistribution: new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, \"nonExistent\"),\n                    stabilityDeposit: new lib_base_1.StabilityDeposit(lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, constants_1.AddressZero),\n                    lqtyStake: new lib_base_1.LQTYStake(),\n                    ownFrontend: { status: \"unregistered\" }\n                })\n        });\n        return [\n            {\n                ...baseState,\n                _feesInNormalMode: _feesFactory(blockTimestamp, false),\n                remainingLiquidityMiningLQTYReward: calculateRemainingLQTY(blockTimestamp)\n            },\n            {\n                blockTag,\n                blockTimestamp,\n                _feesFactory\n            }\n        ];\n    }\n    /** @internal @override */\n    _doStart() {\n        this._get().then(state => {\n            if (!this._loaded) {\n                this._load(...state);\n            }\n        });\n        const blockListener = async (blockTag) => {\n            const state = await this._get(blockTag);\n            if (this._loaded) {\n                this._update(...state);\n            }\n            else {\n                this._load(...state);\n            }\n        };\n        this._provider.on(\"block\", blockListener);\n        return () => {\n            this._provider.off(\"block\", blockListener);\n        };\n    }\n    /** @internal @override */\n    _reduceExtra(oldState, stateUpdate) {\n        var _a, _b, _c;\n        return {\n            blockTag: (_a = stateUpdate.blockTag) !== null && _a !== void 0 ? _a : oldState.blockTag,\n            blockTimestamp: (_b = stateUpdate.blockTimestamp) !== null && _b !== void 0 ? _b : oldState.blockTimestamp,\n            _feesFactory: (_c = stateUpdate._feesFactory) !== null && _c !== void 0 ? _c : oldState._feesFactory\n        };\n    }\n}\nexports.BlockPolledLiquityStore = BlockPolledLiquityStore;\n//# sourceMappingURL=BlockPolledLiquityStore.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PopulatableEthersLiquity = exports.PopulatedEthersRedemption = exports.PopulatedEthersLiquityTransaction = exports.SentEthersLiquityTransaction = exports.EthersTransactionCancelledError = exports._RawErrorReason = exports._redeemMaxIterations = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst constants_1 = require(\"@ethersproject/constants\");\nconst logger_1 = require(\"@ethersproject/logger\");\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst _utils_1 = require(\"./_utils\");\nconst contracts_1 = require(\"./contracts\");\nconst parseLogs_1 = require(\"./parseLogs\");\nconst bigNumberMax = (a, b) => ((b === null || b === void 0 ? void 0 : b.gt(a)) ? b : a);\n// With 70 iterations redemption costs about ~10M gas, and each iteration accounts for ~138k more\n/** @internal */\nexports._redeemMaxIterations = 70;\nconst defaultBorrowingRateSlippageTolerance = lib_base_1.Decimal.from(0.005); // 0.5%\nconst defaultRedemptionRateSlippageTolerance = lib_base_1.Decimal.from(0.001); // 0.1%\nconst defaultBorrowingFeeDecayToleranceMinutes = 10;\nconst noDetails = () => undefined;\nconst compose = (f, g) => (_) => f(g(_));\nconst id = (t) => t;\n// Takes ~6-7K (use 10K to be safe) to update lastFeeOperationTime, but the cost of calculating the\n// decayed baseRate increases logarithmically with time elapsed since the last update.\nconst addGasForBaseRateUpdate = (maxMinutesSinceLastUpdate = 10) => (gas) => gas.add(10000 + 1414 * Math.ceil(Math.log2(maxMinutesSinceLastUpdate + 1)));\n// First traversal in ascending direction takes ~50K, then ~13.5K per extra step.\n// 80K should be enough for 3 steps, plus some extra to be safe.\nconst addGasForPotentialListTraversal = (gas) => gas.add(80000);\nconst addGasForLQTYIssuance = (gas) => gas.add(50000);\nconst addGasForUnipoolRewardUpdate = (gas) => gas.add(20000);\n// To get the best entropy available, we'd do something like:\n//\n// const bigRandomNumber = () =>\n//   BigNumber.from(\n//     `0x${Array.from(crypto.getRandomValues(new Uint32Array(8)))\n//       .map(u32 => u32.toString(16).padStart(8, \"0\"))\n//       .join(\"\")}`\n//   );\n//\n// However, Window.crypto is browser-specific. Since we only use this for randomly picking Troves\n// during the search for hints, Math.random() will do fine, too.\n//\n// This returns a random integer between 0 and Number.MAX_SAFE_INTEGER\nconst randomInteger = () => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n// Maximum number of trials to perform in a single getApproxHint() call. If the number of trials\n// required to get a statistically \"good\" hint is larger than this, the search for the hint will\n// be broken up into multiple getApproxHint() calls.\n//\n// This should be low enough to work with popular public Ethereum providers like Infura without\n// triggering any fair use limits.\nconst maxNumberOfTrialsAtOnce = 2500;\nfunction* generateTrials(totalNumberOfTrials) {\n    assert_1.default(Number.isInteger(totalNumberOfTrials) && totalNumberOfTrials > 0);\n    while (totalNumberOfTrials) {\n        const numberOfTrials = Math.min(totalNumberOfTrials, maxNumberOfTrialsAtOnce);\n        yield numberOfTrials;\n        totalNumberOfTrials -= numberOfTrials;\n    }\n}\n/** @internal */\nvar _RawErrorReason;\n(function (_RawErrorReason) {\n    _RawErrorReason[\"TRANSACTION_FAILED\"] = \"transaction failed\";\n    _RawErrorReason[\"TRANSACTION_CANCELLED\"] = \"cancelled\";\n    _RawErrorReason[\"TRANSACTION_REPLACED\"] = \"replaced\";\n    _RawErrorReason[\"TRANSACTION_REPRICED\"] = \"repriced\";\n})(_RawErrorReason = exports._RawErrorReason || (exports._RawErrorReason = {}));\nconst transactionReplacementReasons = [\n    _RawErrorReason.TRANSACTION_CANCELLED,\n    _RawErrorReason.TRANSACTION_REPLACED,\n    _RawErrorReason.TRANSACTION_REPRICED\n];\nconst hasProp = (o, p) => p in o;\nconst isTransactionFailedError = (error) => hasProp(error, \"code\") &&\n    error.code === logger_1.ErrorCode.CALL_EXCEPTION &&\n    hasProp(error, \"reason\") &&\n    error.reason === _RawErrorReason.TRANSACTION_FAILED;\nconst isTransactionReplacedError = (error) => hasProp(error, \"code\") &&\n    error.code === logger_1.ErrorCode.TRANSACTION_REPLACED &&\n    hasProp(error, \"reason\") &&\n    transactionReplacementReasons.includes(error.reason);\n/**\n * Thrown when a transaction is cancelled or replaced by a different transaction.\n *\n * @public\n */\nclass EthersTransactionCancelledError extends Error {\n    /** @internal */\n    constructor(rawError) {\n        assert_1.default(rawError.reason !== _RawErrorReason.TRANSACTION_REPRICED);\n        super(`Transaction ${rawError.reason}`);\n        this.name = \"TransactionCancelledError\";\n        this.rawReplacementReceipt = rawError.receipt;\n        this.rawError = rawError;\n    }\n}\nexports.EthersTransactionCancelledError = EthersTransactionCancelledError;\n/**\n * A transaction that has already been sent.\n *\n * @remarks\n * Returned by {@link SendableEthersLiquity} functions.\n *\n * @public\n */\nclass SentEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawSentTransaction, connection, parse) {\n        this.rawSentTransaction = rawSentTransaction;\n        this._connection = connection;\n        this._parse = parse;\n    }\n    _receiptFrom(rawReceipt) {\n        return rawReceipt\n            ? rawReceipt.status\n                ? lib_base_1._successfulReceipt(rawReceipt, this._parse(rawReceipt), () => parseLogs_1.logsToString(rawReceipt, EthersLiquityConnection_1._getContracts(this._connection)))\n                : lib_base_1._failedReceipt(rawReceipt)\n            : lib_base_1._pendingReceipt;\n    }\n    async _waitForRawReceipt(confirmations) {\n        try {\n            return await this.rawSentTransaction.wait(confirmations);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (isTransactionFailedError(error)) {\n                    return error.receipt;\n                }\n                if (isTransactionReplacedError(error)) {\n                    if (error.cancelled) {\n                        throw new EthersTransactionCancelledError(error);\n                    }\n                    else {\n                        return error.receipt;\n                    }\n                }\n            }\n            throw error;\n        }\n    }\n    /** {@inheritDoc @fluidity/lib-base#SentLiquityTransaction.getReceipt} */\n    async getReceipt() {\n        return this._receiptFrom(await this._waitForRawReceipt(0));\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#SentLiquityTransaction.waitForReceipt}\n     *\n     * @throws\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    async waitForReceipt() {\n        const receipt = this._receiptFrom(await this._waitForRawReceipt());\n        assert_1.default(receipt.status !== \"pending\");\n        return receipt;\n    }\n}\nexports.SentEthersLiquityTransaction = SentEthersLiquityTransaction;\nconst normalizeBorrowingOperationOptionalParams = (maxBorrowingRateOrOptionalParams, currentBorrowingRate) => {\n    var _a, _b;\n    if (maxBorrowingRateOrOptionalParams === undefined) {\n        return {\n            maxBorrowingRate: (_a = currentBorrowingRate === null || currentBorrowingRate === void 0 ? void 0 : currentBorrowingRate.add(defaultBorrowingRateSlippageTolerance)) !== null && _a !== void 0 ? _a : lib_base_1.Decimal.ZERO,\n            borrowingFeeDecayToleranceMinutes: defaultBorrowingFeeDecayToleranceMinutes\n        };\n    }\n    else if (typeof maxBorrowingRateOrOptionalParams === \"number\" ||\n        typeof maxBorrowingRateOrOptionalParams === \"string\" ||\n        maxBorrowingRateOrOptionalParams instanceof lib_base_1.Decimal) {\n        return {\n            maxBorrowingRate: lib_base_1.Decimal.from(maxBorrowingRateOrOptionalParams),\n            borrowingFeeDecayToleranceMinutes: defaultBorrowingFeeDecayToleranceMinutes\n        };\n    }\n    else {\n        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = maxBorrowingRateOrOptionalParams;\n        return {\n            maxBorrowingRate: maxBorrowingRate !== undefined\n                ? lib_base_1.Decimal.from(maxBorrowingRate)\n                : (_b = currentBorrowingRate === null || currentBorrowingRate === void 0 ? void 0 : currentBorrowingRate.add(defaultBorrowingRateSlippageTolerance)) !== null && _b !== void 0 ? _b : lib_base_1.Decimal.ZERO,\n            borrowingFeeDecayToleranceMinutes: borrowingFeeDecayToleranceMinutes !== null && borrowingFeeDecayToleranceMinutes !== void 0 ? borrowingFeeDecayToleranceMinutes : defaultBorrowingFeeDecayToleranceMinutes\n        };\n    }\n};\n/**\n * A transaction that has been prepared for sending.\n *\n * @remarks\n * Returned by {@link PopulatableEthersLiquity} functions.\n *\n * @public\n */\nclass PopulatedEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawPopulatedTransaction, connection, parse, gasHeadroom) {\n        this.rawPopulatedTransaction = rawPopulatedTransaction;\n        this._connection = connection;\n        this._parse = parse;\n        if (gasHeadroom !== undefined) {\n            this.gasHeadroom = gasHeadroom;\n        }\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatedLiquityTransaction.send} */\n    async send() {\n        return new SentEthersLiquityTransaction(await EthersLiquityConnection_1._requireSigner(this._connection).sendTransaction(this.rawPopulatedTransaction), this._connection, this._parse);\n    }\n}\nexports.PopulatedEthersLiquityTransaction = PopulatedEthersLiquityTransaction;\n/**\n * {@inheritDoc @fluidity/lib-base#PopulatedRedemption}\n *\n * @public\n */\nclass PopulatedEthersRedemption extends PopulatedEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawPopulatedTransaction, connection, attemptedLUSDAmount, redeemableLUSDAmount, increaseAmountByMinimumNetDebt) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(connection);\n        super(rawPopulatedTransaction, connection, ({ logs }) => troveManager\n            .extractEvents(logs, \"Redemption\")\n            .map(({ args: { _ETHSent, _ETHFee, _actualLUSDAmount, _attemptedLUSDAmount } }) => ({\n            attemptedLUSDAmount: _utils_1.decimalify(_attemptedLUSDAmount),\n            actualLUSDAmount: _utils_1.decimalify(_actualLUSDAmount),\n            collateralTaken: _utils_1.decimalify(_ETHSent),\n            fee: _utils_1.decimalify(_ETHFee)\n        }))[0]);\n        this.attemptedLUSDAmount = attemptedLUSDAmount;\n        this.redeemableLUSDAmount = redeemableLUSDAmount;\n        this.isTruncated = redeemableLUSDAmount.lt(attemptedLUSDAmount);\n        this._increaseAmountByMinimumNetDebt = increaseAmountByMinimumNetDebt;\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatedRedemption.increaseAmountByMinimumNetDebt} */\n    increaseAmountByMinimumNetDebt(maxRedemptionRate) {\n        if (!this._increaseAmountByMinimumNetDebt) {\n            throw new Error(\"PopulatedEthersRedemption: increaseAmountByMinimumNetDebt() can \" +\n                \"only be called when amount is truncated\");\n        }\n        return this._increaseAmountByMinimumNetDebt(maxRedemptionRate);\n    }\n}\nexports.PopulatedEthersRedemption = PopulatedEthersRedemption;\n/**\n * Ethers-based implementation of {@link @fluidity/lib-base#PopulatableLiquity}.\n *\n * @public\n */\nclass PopulatableEthersLiquity {\n    constructor(readable) {\n        this._readable = readable;\n    }\n    _wrapSimpleTransaction(rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, noDetails);\n    }\n    _wrapTroveChangeWithFees(params, rawPopulatedTransaction, gasHeadroom) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const [newTrove] = borrowerOperations\n                .extractEvents(logs, \"TroveUpdated\")\n                .map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(_utils_1.decimalify(_coll), _utils_1.decimalify(_debt)));\n            const [fee] = borrowerOperations\n                .extractEvents(logs, \"LUSDBorrowingFeePaid\")\n                .map(({ args: { _LUSDFee } }) => _utils_1.decimalify(_LUSDFee));\n            return {\n                params,\n                newTrove,\n                fee\n            };\n        }, gasHeadroom);\n    }\n    async _wrapTroveClosure(rawPopulatedTransaction) {\n        const { activePool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {\n            const [repayLUSD] = lusdToken\n                .extractEvents(logs, \"Transfer\")\n                .filter(({ args: { from, to } }) => from === userAddress && to === constants_1.AddressZero)\n                .map(({ args: { value } }) => _utils_1.decimalify(value));\n            const [withdrawCollateral] = activePool\n                .extractEvents(logs, \"EtherSent\")\n                .filter(({ args: { _to } }) => _to === userAddress)\n                .map(({ args: { _amount } }) => _utils_1.decimalify(_amount));\n            return {\n                params: repayLUSD.nonZero ? { withdrawCollateral, repayLUSD } : { withdrawCollateral }\n            };\n        });\n    }\n    _wrapLiquidation(rawPopulatedTransaction) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const liquidatedAddresses = troveManager\n                .extractEvents(logs, \"TroveLiquidated\")\n                .map(({ args: { _borrower } }) => _borrower);\n            const [totals] = troveManager\n                .extractEvents(logs, \"Liquidation\")\n                .map(({ args: { _LUSDGasCompensation, _collGasCompensation, _liquidatedColl, _liquidatedDebt } }) => ({\n                collateralGasCompensation: _utils_1.decimalify(_collGasCompensation),\n                lusdGasCompensation: _utils_1.decimalify(_LUSDGasCompensation),\n                totalLiquidated: new lib_base_1.Trove(_utils_1.decimalify(_liquidatedColl), _utils_1.decimalify(_liquidatedDebt))\n            }));\n            return {\n                liquidatedAddresses,\n                ...totals\n            };\n        });\n    }\n    _extractStabilityPoolGainsWithdrawalDetails(logs) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const [newLUSDDeposit] = stabilityPool\n            .extractEvents(logs, \"UserDepositChanged\")\n            .map(({ args: { _newDeposit } }) => _utils_1.decimalify(_newDeposit));\n        const [[collateralGain, lusdLoss]] = stabilityPool\n            .extractEvents(logs, \"ETHGainWithdrawn\")\n            .map(({ args: { _ETH, _LUSDLoss } }) => [_utils_1.decimalify(_ETH), _utils_1.decimalify(_LUSDLoss)]);\n        const [lqtyReward] = stabilityPool\n            .extractEvents(logs, \"LQTYPaidToDepositor\")\n            .map(({ args: { _LQTY } }) => _utils_1.decimalify(_LQTY));\n        return {\n            lusdLoss,\n            newLUSDDeposit,\n            collateralGain,\n            lqtyReward\n        };\n    }\n    _wrapStabilityPoolGainsWithdrawal(rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => this._extractStabilityPoolGainsWithdrawalDetails(logs));\n    }\n    _wrapStabilityDepositTopup(change, rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => ({\n            ...this._extractStabilityPoolGainsWithdrawalDetails(logs),\n            change\n        }));\n    }\n    async _wrapStabilityDepositWithdrawal(rawPopulatedTransaction) {\n        const { stabilityPool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {\n            const gainsWithdrawalDetails = this._extractStabilityPoolGainsWithdrawalDetails(logs);\n            const [withdrawLUSD] = lusdToken\n                .extractEvents(logs, \"Transfer\")\n                .filter(({ args: { from, to } }) => from === stabilityPool.address && to === userAddress)\n                .map(({ args: { value } }) => _utils_1.decimalify(value));\n            return {\n                ...gainsWithdrawalDetails,\n                change: { withdrawLUSD, withdrawAllLUSD: gainsWithdrawalDetails.newLUSDDeposit.isZero }\n            };\n        });\n    }\n    _wrapCollateralGainTransfer(rawPopulatedTransaction) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const [newTrove] = borrowerOperations\n                .extractEvents(logs, \"TroveUpdated\")\n                .map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(_utils_1.decimalify(_coll), _utils_1.decimalify(_debt)));\n            return {\n                ...this._extractStabilityPoolGainsWithdrawalDetails(logs),\n                newTrove\n            };\n        });\n    }\n    async _findHintsForNominalCollateralRatio(nominalCollateralRatio, ownAddress) {\n        const { sortedTroves, hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const numberOfTroves = await this._readable.getNumberOfTroves();\n        if (!numberOfTroves) {\n            return [constants_1.AddressZero, constants_1.AddressZero];\n        }\n        if (nominalCollateralRatio.infinite) {\n            return [constants_1.AddressZero, await sortedTroves.getFirst()];\n        }\n        const totalNumberOfTrials = Math.ceil(10 * Math.sqrt(numberOfTroves));\n        const [firstTrials, ...restOfTrials] = generateTrials(totalNumberOfTrials);\n        const collectApproxHint = ({ latestRandomSeed, results }, numberOfTrials) => hintHelpers\n            .getApproxHint(nominalCollateralRatio.hex, numberOfTrials, latestRandomSeed)\n            .then(({ latestRandomSeed, ...result }) => ({\n            latestRandomSeed,\n            results: [...results, result]\n        }));\n        const { results } = await restOfTrials.reduce((p, numberOfTrials) => p.then(state => collectApproxHint(state, numberOfTrials)), collectApproxHint({ latestRandomSeed: randomInteger(), results: [] }, firstTrials));\n        const { hintAddress } = results.reduce((a, b) => (a.diff.lt(b.diff) ? a : b));\n        let [prev, next] = await sortedTroves.findInsertPosition(nominalCollateralRatio.hex, hintAddress, hintAddress);\n        if (ownAddress) {\n            // In the case of reinsertion, the address of the Trove being reinserted is not a usable hint,\n            // because it is deleted from the list before the reinsertion.\n            // \"Jump over\" the Trove to get the proper hint.\n            if (prev === ownAddress) {\n                prev = await sortedTroves.getPrev(prev);\n            }\n            else if (next === ownAddress) {\n                next = await sortedTroves.getNext(next);\n            }\n        }\n        // Don't use `address(0)` as hint as it can result in huge gas cost.\n        // (See https://github.com/goldmandao/fluidity/issues/600).\n        if (prev === constants_1.AddressZero) {\n            prev = next;\n        }\n        else if (next === constants_1.AddressZero) {\n            next = prev;\n        }\n        return [prev, next];\n    }\n    async _findHints(trove, ownAddress) {\n        if (trove instanceof lib_base_1.TroveWithPendingRedistribution) {\n            throw new Error(\"Rewards must be applied to this Trove\");\n        }\n        return this._findHintsForNominalCollateralRatio(trove._nominalCollateralRatio, ownAddress);\n    }\n    async _findRedemptionHints(amount) {\n        const { hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const price = await this._readable.getPrice();\n        const { firstRedemptionHint, partialRedemptionHintNICR, truncatedLUSDamount } = await hintHelpers.getRedemptionHints(amount.hex, price.hex, exports._redeemMaxIterations);\n        const [partialRedemptionUpperHint, partialRedemptionLowerHint] = partialRedemptionHintNICR.isZero()\n            ? [constants_1.AddressZero, constants_1.AddressZero]\n            : await this._findHintsForNominalCollateralRatio(_utils_1.decimalify(partialRedemptionHintNICR)\n            // XXX: if we knew the partially redeemed Trove's address, we'd pass it here\n            );\n        return [\n            _utils_1.decimalify(truncatedLUSDamount),\n            firstRedemptionHint,\n            partialRedemptionUpperHint,\n            partialRedemptionLowerHint,\n            partialRedemptionHintNICR\n        ];\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.openTrove} */\n    async openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const normalizedParams = lib_base_1._normalizeTroveCreation(params);\n        const { depositCollateral, borrowLUSD } = normalizedParams;\n        const [fees, blockTimestamp, total, price] = await Promise.all([\n            this._readable._getFeesFactory(),\n            this._readable._getBlockTimestamp(),\n            this._readable.getTotal(),\n            this._readable.getPrice()\n        ]);\n        const recoveryMode = total.collateralRatioIsBelowCritical(price);\n        const decayBorrowingRate = (seconds) => fees(blockTimestamp + seconds, recoveryMode).borrowingRate();\n        const currentBorrowingRate = decayBorrowingRate(0);\n        const newTrove = lib_base_1.Trove.create(normalizedParams, currentBorrowingRate);\n        const hints = await this._findHints(newTrove);\n        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = normalizeBorrowingOperationOptionalParams(maxBorrowingRateOrOptionalParams, currentBorrowingRate);\n        const txParams = (borrowLUSD) => [\n            maxBorrowingRate.hex,\n            borrowLUSD.hex,\n            ...hints,\n            { value: depositCollateral.hex, ...overrides }\n        ];\n        let gasHeadroom;\n        if ((overrides === null || overrides === void 0 ? void 0 : overrides.gasLimit) === undefined) {\n            const decayedBorrowingRate = decayBorrowingRate(60 * borrowingFeeDecayToleranceMinutes);\n            const decayedTrove = lib_base_1.Trove.create(normalizedParams, decayedBorrowingRate);\n            const { borrowLUSD: borrowLUSDSimulatingDecay } = lib_base_1.Trove.recreate(decayedTrove, currentBorrowingRate);\n            if (decayedTrove.debt.lt(lib_base_1.LUSD_MINIMUM_DEBT)) {\n                throw new Error(`Trove's debt might fall below ${lib_base_1.LUSD_MINIMUM_DEBT} ` +\n                    `within ${borrowingFeeDecayToleranceMinutes} minutes`);\n            }\n            const [gasNow, gasLater] = await Promise.all([\n                borrowerOperations.estimateGas.openTrove(...txParams(borrowLUSD)),\n                borrowerOperations.estimateGas.openTrove(...txParams(borrowLUSDSimulatingDecay))\n            ]);\n            const gasLimit = addGasForBaseRateUpdate(borrowingFeeDecayToleranceMinutes)(bigNumberMax(addGasForPotentialListTraversal(gasNow), gasLater));\n            gasHeadroom = gasLimit.sub(gasNow).toNumber();\n            overrides = { ...overrides, gasLimit };\n        }\n        return this._wrapTroveChangeWithFees(normalizedParams, await borrowerOperations.populateTransaction.openTrove(...txParams(borrowLUSD)), gasHeadroom);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.closeTrove} */\n    async closeTrove(overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapTroveClosure(await borrowerOperations.estimateAndPopulate.closeTrove({ ...overrides }, id));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.depositCollateral} */\n    depositCollateral(amount, overrides) {\n        return this.adjustTrove({ depositCollateral: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.withdrawCollateral} */\n    withdrawCollateral(amount, overrides) {\n        return this.adjustTrove({ withdrawCollateral: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.borrowLUSD} */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.adjustTrove({ borrowLUSD: amount }, maxBorrowingRate, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.repayLUSD} */\n    repayLUSD(amount, overrides) {\n        return this.adjustTrove({ repayLUSD: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.adjustTrove} */\n    async adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        const address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides);\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const normalizedParams = lib_base_1._normalizeTroveAdjustment(params);\n        const { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD } = normalizedParams;\n        const [trove, feeVars] = await Promise.all([\n            this._readable.getTrove(address),\n            borrowLUSD &&\n                _utils_1.promiseAllValues({\n                    fees: this._readable._getFeesFactory(),\n                    blockTimestamp: this._readable._getBlockTimestamp(),\n                    total: this._readable.getTotal(),\n                    price: this._readable.getPrice()\n                })\n        ]);\n        const decayBorrowingRate = (seconds) => feeVars === null || feeVars === void 0 ? void 0 : feeVars.fees(feeVars.blockTimestamp + seconds, feeVars.total.collateralRatioIsBelowCritical(feeVars.price)).borrowingRate();\n        const currentBorrowingRate = decayBorrowingRate(0);\n        const adjustedTrove = trove.adjust(normalizedParams, currentBorrowingRate);\n        const hints = await this._findHints(adjustedTrove, address);\n        const { maxBorrowingRate, borrowingFeeDecayToleranceMinutes } = normalizeBorrowingOperationOptionalParams(maxBorrowingRateOrOptionalParams, currentBorrowingRate);\n        const txParams = (borrowLUSD) => {\n            var _a;\n            return [\n                maxBorrowingRate.hex,\n                (withdrawCollateral !== null && withdrawCollateral !== void 0 ? withdrawCollateral : lib_base_1.Decimal.ZERO).hex,\n                ((_a = borrowLUSD !== null && borrowLUSD !== void 0 ? borrowLUSD : repayLUSD) !== null && _a !== void 0 ? _a : lib_base_1.Decimal.ZERO).hex,\n                !!borrowLUSD,\n                ...hints,\n                { value: depositCollateral === null || depositCollateral === void 0 ? void 0 : depositCollateral.hex, ...overrides }\n            ];\n        };\n        let gasHeadroom;\n        if ((overrides === null || overrides === void 0 ? void 0 : overrides.gasLimit) === undefined) {\n            const decayedBorrowingRate = decayBorrowingRate(60 * borrowingFeeDecayToleranceMinutes);\n            const decayedTrove = trove.adjust(normalizedParams, decayedBorrowingRate);\n            const { borrowLUSD: borrowLUSDSimulatingDecay } = trove.adjustTo(decayedTrove, currentBorrowingRate);\n            if (decayedTrove.debt.lt(lib_base_1.LUSD_MINIMUM_DEBT)) {\n                throw new Error(`Trove's debt might fall below ${lib_base_1.LUSD_MINIMUM_DEBT} ` +\n                    `within ${borrowingFeeDecayToleranceMinutes} minutes`);\n            }\n            const [gasNow, gasLater] = await Promise.all([\n                borrowerOperations.estimateGas.adjustTrove(...txParams(borrowLUSD)),\n                borrowLUSD &&\n                    borrowerOperations.estimateGas.adjustTrove(...txParams(borrowLUSDSimulatingDecay))\n            ]);\n            let gasLimit = bigNumberMax(addGasForPotentialListTraversal(gasNow), gasLater);\n            if (borrowLUSD) {\n                gasLimit = addGasForBaseRateUpdate(borrowingFeeDecayToleranceMinutes)(gasLimit);\n            }\n            gasHeadroom = gasLimit.sub(gasNow).toNumber();\n            overrides = { ...overrides, gasLimit };\n        }\n        return this._wrapTroveChangeWithFees(normalizedParams, await borrowerOperations.populateTransaction.adjustTrove(...txParams(borrowLUSD)), gasHeadroom);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.claimCollateralSurplus} */\n    async claimCollateralSurplus(overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await borrowerOperations.estimateAndPopulate.claimCollateral({ ...overrides }, id));\n    }\n    /** @internal */\n    async setPrice(price, overrides) {\n        const { priceFeed } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (!contracts_1._priceFeedIsTestnet(priceFeed)) {\n            throw new Error(\"setPrice() unavailable on this deployment of Liquity\");\n        }\n        return this._wrapSimpleTransaction(await priceFeed.estimateAndPopulate.setPrice({ ...overrides }, id, lib_base_1.Decimal.from(price).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.liquidate} */\n    async liquidate(address, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (Array.isArray(address)) {\n            return this._wrapLiquidation(await troveManager.estimateAndPopulate.batchLiquidateTroves({ ...overrides }, addGasForLQTYIssuance, address));\n        }\n        else {\n            return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidate({ ...overrides }, addGasForLQTYIssuance, address));\n        }\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.liquidateUpTo} */\n    async liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidateTroves({ ...overrides }, addGasForLQTYIssuance, maximumNumberOfTrovesToLiquidate));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.depositLUSDInStabilityPool} */\n    async depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        var _a;\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const depositLUSD = lib_base_1.Decimal.from(amount);\n        return this._wrapStabilityDepositTopup({ depositLUSD }, await stabilityPool.estimateAndPopulate.provideToSP({ ...overrides }, addGasForLQTYIssuance, depositLUSD.hex, (_a = frontendTag !== null && frontendTag !== void 0 ? frontendTag : this._readable.connection.frontendTag) !== null && _a !== void 0 ? _a : constants_1.AddressZero));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.withdrawLUSDFromStabilityPool} */\n    async withdrawLUSDFromStabilityPool(amount, overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapStabilityDepositWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP({ ...overrides }, addGasForLQTYIssuance, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.withdrawGainsFromStabilityPool} */\n    async withdrawGainsFromStabilityPool(overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapStabilityPoolGainsWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP({ ...overrides }, addGasForLQTYIssuance, lib_base_1.Decimal.ZERO.hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.transferCollateralGainToTrove} */\n    async transferCollateralGainToTrove(overrides) {\n        const address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides);\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const [initialTrove, stabilityDeposit] = await Promise.all([\n            this._readable.getTrove(address),\n            this._readable.getStabilityDeposit(address)\n        ]);\n        const finalTrove = initialTrove.addCollateral(stabilityDeposit.collateralGain);\n        return this._wrapCollateralGainTransfer(await stabilityPool.estimateAndPopulate.withdrawETHGainToTrove({ ...overrides }, compose(addGasForPotentialListTraversal, addGasForLQTYIssuance), ...(await this._findHints(finalTrove, address))));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.sendLUSD} */\n    async sendLUSD(toAddress, amount, overrides) {\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lusdToken.estimateAndPopulate.transfer({ ...overrides }, id, toAddress, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.sendLQTY} */\n    async sendLQTY(toAddress, amount, overrides) {\n        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyToken.estimateAndPopulate.transfer({ ...overrides }, id, toAddress, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.redeemLUSD} */\n    async redeemLUSD(amount, maxRedemptionRate, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const attemptedLUSDAmount = lib_base_1.Decimal.from(amount);\n        const [fees, total, [truncatedAmount, firstRedemptionHint, ...partialHints]] = await Promise.all([\n            this._readable.getFees(),\n            this._readable.getTotal(),\n            this._findRedemptionHints(attemptedLUSDAmount)\n        ]);\n        if (truncatedAmount.isZero) {\n            throw new Error(`redeemLUSD: amount too low to redeem (try at least ${lib_base_1.LUSD_MINIMUM_NET_DEBT})`);\n        }\n        const defaultMaxRedemptionRate = (amount) => lib_base_1.Decimal.min(fees.redemptionRate(amount.div(total.debt)).add(defaultRedemptionRateSlippageTolerance), lib_base_1.Decimal.ONE);\n        const populateRedemption = async (attemptedLUSDAmount, maxRedemptionRate, truncatedAmount = attemptedLUSDAmount, partialHints = [constants_1.AddressZero, constants_1.AddressZero, 0]) => {\n            const maxRedemptionRateOrDefault = maxRedemptionRate !== undefined\n                ? lib_base_1.Decimal.from(maxRedemptionRate)\n                : defaultMaxRedemptionRate(truncatedAmount);\n            return new PopulatedEthersRedemption(await troveManager.estimateAndPopulate.redeemCollateral({ ...overrides }, addGasForBaseRateUpdate(), truncatedAmount.hex, firstRedemptionHint, ...partialHints, exports._redeemMaxIterations, maxRedemptionRateOrDefault.hex), this._readable.connection, attemptedLUSDAmount, truncatedAmount, truncatedAmount.lt(attemptedLUSDAmount)\n                ? newMaxRedemptionRate => populateRedemption(truncatedAmount.add(lib_base_1.LUSD_MINIMUM_NET_DEBT), newMaxRedemptionRate !== null && newMaxRedemptionRate !== void 0 ? newMaxRedemptionRate : maxRedemptionRate)\n                : undefined);\n        };\n        return populateRedemption(attemptedLUSDAmount, maxRedemptionRate, truncatedAmount, partialHints);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.stakeLQTY} */\n    async stakeLQTY(amount, overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.stake({ ...overrides }, id, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.unstakeLQTY} */\n    async unstakeLQTY(amount, overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.unstake({ ...overrides }, id, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.withdrawGainsFromStaking} */\n    withdrawGainsFromStaking(overrides) {\n        return this.unstakeLQTY(lib_base_1.Decimal.ZERO, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.registerFrontend} */\n    async registerFrontend(kickbackRate, overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await stabilityPool.estimateAndPopulate.registerFrontEnd({ ...overrides }, id, lib_base_1.Decimal.from(kickbackRate).hex));\n    }\n    /** @internal */\n    async _mintUniToken(amount, address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides));\n        const { uniToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (!contracts_1._uniTokenIsMock(uniToken)) {\n            throw new Error(\"_mintUniToken() unavailable on this deployment of Liquity\");\n        }\n        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.mint({ ...overrides }, id, address, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.approveUniTokens} */\n    async approveUniTokens(allowance, overrides) {\n        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.approve({ ...overrides }, id, unipool.address, lib_base_1.Decimal.from(allowance !== null && allowance !== void 0 ? allowance : lib_base_1.Decimal.INFINITY).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.stakeUniTokens} */\n    async stakeUniTokens(amount, overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.stake({ ...overrides }, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.unstakeUniTokens} */\n    async unstakeUniTokens(amount, overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdraw({ ...overrides }, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.withdrawLQTYRewardFromLiquidityMining} */\n    async withdrawLQTYRewardFromLiquidityMining(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.claimReward({ ...overrides }, addGasForUnipoolRewardUpdate));\n    }\n    /** {@inheritDoc @fluidity/lib-base#PopulatableLiquity.exitLiquidityMining} */\n    async exitLiquidityMining(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdrawAndClaim({ ...overrides }, addGasForUnipoolRewardUpdate));\n    }\n}\nexports.PopulatableEthersLiquity = PopulatableEthersLiquity;\n//# sourceMappingURL=PopulatableEthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SendableEthersLiquity = void 0;\nconst sendTransaction = (tx) => tx.send();\n/**\n * Ethers-based implementation of {@link @fluidity/lib-base#SendableLiquity}.\n *\n * @public\n */\nclass SendableEthersLiquity {\n    constructor(populatable) {\n        this._populate = populatable;\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.openTrove} */\n    async openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        return this._populate\n            .openTrove(params, maxBorrowingRateOrOptionalParams, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.closeTrove} */\n    closeTrove(overrides) {\n        return this._populate.closeTrove(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.adjustTrove} */\n    adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        return this._populate\n            .adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.depositCollateral} */\n    depositCollateral(amount, overrides) {\n        return this._populate.depositCollateral(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.withdrawCollateral} */\n    withdrawCollateral(amount, overrides) {\n        return this._populate.withdrawCollateral(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.borrowLUSD} */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this._populate.borrowLUSD(amount, maxBorrowingRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.repayLUSD} */\n    repayLUSD(amount, overrides) {\n        return this._populate.repayLUSD(amount, overrides).then(sendTransaction);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this._populate.setPrice(price, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.liquidate} */\n    liquidate(address, overrides) {\n        return this._populate.liquidate(address, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.liquidateUpTo} */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this._populate\n            .liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.depositLUSDInStabilityPool} */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this._populate\n            .depositLUSDInStabilityPool(amount, frontendTag, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.withdrawLUSDFromStabilityPool} */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this._populate.withdrawLUSDFromStabilityPool(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.withdrawGainsFromStabilityPool} */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this._populate.withdrawGainsFromStabilityPool(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.transferCollateralGainToTrove} */\n    transferCollateralGainToTrove(overrides) {\n        return this._populate.transferCollateralGainToTrove(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.sendLUSD} */\n    sendLUSD(toAddress, amount, overrides) {\n        return this._populate.sendLUSD(toAddress, amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.sendLQTY} */\n    sendLQTY(toAddress, amount, overrides) {\n        return this._populate.sendLQTY(toAddress, amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.redeemLUSD} */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this._populate.redeemLUSD(amount, maxRedemptionRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.claimCollateralSurplus} */\n    claimCollateralSurplus(overrides) {\n        return this._populate.claimCollateralSurplus(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.stakeLQTY} */\n    stakeLQTY(amount, overrides) {\n        return this._populate.stakeLQTY(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.unstakeLQTY} */\n    unstakeLQTY(amount, overrides) {\n        return this._populate.unstakeLQTY(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.withdrawGainsFromStaking} */\n    withdrawGainsFromStaking(overrides) {\n        return this._populate.withdrawGainsFromStaking(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.registerFrontend} */\n    registerFrontend(kickbackRate, overrides) {\n        return this._populate.registerFrontend(kickbackRate, overrides).then(sendTransaction);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this._populate._mintUniToken(amount, address, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.approveUniTokens} */\n    approveUniTokens(allowance, overrides) {\n        return this._populate.approveUniTokens(allowance, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.stakeUniTokens} */\n    stakeUniTokens(amount, overrides) {\n        return this._populate.stakeUniTokens(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.unstakeUniTokens} */\n    unstakeUniTokens(amount, overrides) {\n        return this._populate.unstakeUniTokens(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.withdrawLQTYRewardFromLiquidityMining} */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this._populate.withdrawLQTYRewardFromLiquidityMining(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @fluidity/lib-base#SendableLiquity.exitLiquidityMining} */\n    exitLiquidityMining(overrides) {\n        return this._populate.exitLiquidityMining(overrides).then(sendTransaction);\n    }\n}\nexports.SendableEthersLiquity = SendableEthersLiquity;\n//# sourceMappingURL=SendableEthersLiquity.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LiquityStoreProvider = exports.LiquityStoreContext = void 0;\nconst react_1 = __importStar(require(\"react\"));\nexports.LiquityStoreContext = react_1.createContext(undefined);\nconst LiquityStoreProvider = ({ store, loader, children }) => {\n    const [loadedStore, setLoadedStore] = react_1.useState();\n    react_1.useEffect(() => {\n        store.onLoaded = () => setLoadedStore(store);\n        const stop = store.start();\n        return () => {\n            store.onLoaded = undefined;\n            setLoadedStore(undefined);\n            stop();\n        };\n    }, [store]);\n    if (!loadedStore) {\n        return react_1.default.createElement(react_1.default.Fragment, null, loader);\n    }\n    return react_1.default.createElement(exports.LiquityStoreContext.Provider, { value: loadedStore }, children);\n};\nexports.LiquityStoreProvider = LiquityStoreProvider;\n//# sourceMappingURL=LiquityStoreProvider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.equals = void 0;\nconst hasOwnProperty = (o, key) => Object.prototype.hasOwnProperty.call(o, key);\nconst shallowEquals = (a, b) => {\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n    return (keysA.length === keysB.length &&\n        keysA.every(key => hasOwnProperty(b, key) && Object.is(a[key], b[key])));\n};\nconst isObject = (a) => a !== null && typeof a === \"object\";\nconst equals = (a, b) => isObject(a) && isObject(b) ? shallowEquals(a, b) : Object.is(a, b);\nexports.equals = equals;\n//# sourceMappingURL=equals.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BatchedWebSocketAugmentedWeb3Provider = exports.Batched = exports.isBatchedProvider = void 0;\nconst address_1 = require(\"@ethersproject/address\");\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst properties_1 = require(\"@ethersproject/properties\");\nconst WebSocketAugmentedProvider_1 = require(\"./WebSocketAugmentedProvider\");\nconst multicallAddress = {\n    1: \"0xeefBa1e63905eF1D7ACbA5a8513c70307C1cE441\",\n    3: \"0x53C43764255c17BD724F74c4eF150724AC50a3ed\",\n    4: \"0x42Ad527de7d4e9d9d011aC45B31D8551f8Fe9821\",\n    5: \"0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e\",\n    42: \"0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A\"\n};\nconst hasMulticall = (chainId) => chainId in multicallAddress;\nconst multicallAbi = [\n    {\n        type: \"function\",\n        name: \"aggregate\",\n        stateMutability: \"nonpayable\",\n        constant: false,\n        payable: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        name: \"target\",\n                        type: \"address\"\n                    },\n                    {\n                        name: \"callData\",\n                        type: \"bytes\"\n                    }\n                ],\n                name: \"calls\",\n                type: \"tuple[]\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"blockNumber\",\n                type: \"uint256\"\n            },\n            {\n                name: \"returnData\",\n                type: \"bytes[]\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"getEthBalance\",\n        stateMutability: \"view\",\n        constant: true,\n        payable: false,\n        inputs: [\n            {\n                name: \"addr\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"balance\",\n                type: \"uint256\"\n            }\n        ]\n    }\n];\nconst emptyBatch = () => ({ calls: [], callbacks: [] });\n// TODO\n//\n// Technically, requests that have a `from` address shouldn't be batched, because `msg.sender` will\n// be replaced with the Multicall contract's address when the batched calls are being executed.\n//\n// Currently, `@fluidity/lib-ethers` makes many of its read calls through Signers, which populates\n// `from`. Instead these calls should be made through a Provider, and `from` should be omitted\n// (since none of the read calls in Liquity care about `msg.sender`).\n//\n// Then we'll be able to properly exclude calls that have `from` addresses from batching.\nconst batchableCall = (request) => request.gasLimit === undefined && request.gasPrice === undefined && request.value === undefined;\nconst batchedCall = (request, multicallAddress) => request.to === multicallAddress &&\n    typeof request.data === \"string\" &&\n    request.data.startsWith(\"0x252dba42\"); // signature of `aggregate((address,bytes)[])`\nconst batchedProviders = [];\nconst isBatchedProvider = (provider) => batchedProviders.some(batchedProvider => provider instanceof batchedProvider);\nexports.isBatchedProvider = isBatchedProvider;\nconst Batched = (Base) => {\n    const batchedProvider = class extends Base {\n        constructor() {\n            super(...arguments);\n            this.batchingDelayMs = 10;\n            this._chainId = 0;\n            this._batched = emptyBatch();\n            this._numberOfBatchedCalls = 0;\n            this._numberOfActualCalls = 0;\n        }\n        get chainId() {\n            return this._chainId;\n        }\n        set chainId(chainId) {\n            if (this._multicall) {\n                throw new Error(\"can only set chainId once\");\n            }\n            if (hasMulticall(chainId)) {\n                this._multicall = new contracts_1.Contract(multicallAddress[chainId], multicallAbi, this);\n            }\n            this._chainId = chainId;\n        }\n        async _dispatchCalls() {\n            const { calls, callbacks, blockTag } = this._batched;\n            this._batched = emptyBatch();\n            try {\n                const results = calls.length > 1\n                    ? await this._multicall.callStatic.aggregate(calls, { blockTag }).then(x => x.returnData)\n                    : [await super.call({ to: calls[0].target, data: calls[0].callData }, blockTag)];\n                callbacks.forEach(([resolve], i) => resolve(results[i]));\n            }\n            catch (error) {\n                callbacks.forEach(([, reject]) => reject(error));\n            }\n        }\n        _enqueueCall(call) {\n            if (this._timeoutId !== undefined) {\n                clearTimeout(this._timeoutId);\n            }\n            this._batched.calls.push(call);\n            this._timeoutId = setTimeout(() => this._dispatchCalls(), this.batchingDelayMs);\n            return new Promise((resolve, reject) => this._batched.callbacks.push([resolve, reject]));\n        }\n        _alreadyBatchedCallsConflictWith(blockTag) {\n            var _a;\n            return (this._batched.calls.length !== 0 &&\n                (blockTag !== null && blockTag !== void 0 ? blockTag : \"latest\") !== ((_a = this._batched.blockTag) !== null && _a !== void 0 ? _a : \"latest\"));\n        }\n        async call(request, blockTag) {\n            if (!this._multicall) {\n                return super.call(request, blockTag);\n            }\n            else {\n                const now = new Date().getTime();\n                if (this._timeOfLastRatioCheck === undefined) {\n                    this._timeOfLastRatioCheck = now;\n                }\n                else {\n                    const timeSinceLastRatioCheck = now - this._timeOfLastRatioCheck;\n                    if (timeSinceLastRatioCheck >= 10000 && this._numberOfActualCalls) {\n                        // console.log(\n                        //   `Call batching ratio: ${\n                        //     Math.round((10 * this._numberOfBatchedCalls) / this._numberOfActualCalls) / 10\n                        //   }X`\n                        // );\n                        this._numberOfBatchedCalls = 0;\n                        this._numberOfActualCalls = 0;\n                        this._timeOfLastRatioCheck = now;\n                    }\n                }\n            }\n            const [resolvedRequest, resolvedBlockTag] = await Promise.all([\n                properties_1.resolveProperties(request),\n                blockTag\n            ]);\n            if (batchedCall(resolvedRequest, this._multicall.address) ||\n                !batchableCall(resolvedRequest) ||\n                this._alreadyBatchedCallsConflictWith(resolvedBlockTag)) {\n                this._numberOfActualCalls++;\n                return super.call(resolvedRequest, resolvedBlockTag);\n            }\n            else {\n                this._numberOfBatchedCalls++;\n                if (this._batched.calls.length === 0) {\n                    this._batched.blockTag = resolvedBlockTag;\n                }\n                return this._enqueueCall({ target: resolvedRequest.to, callData: resolvedRequest.data });\n            }\n        }\n        async getBalance(addressOrName, blockTag) {\n            const [resolvedAddressOrName, resolvedBlockTag] = await Promise.all([addressOrName, blockTag]);\n            if (!address_1.isAddress(resolvedAddressOrName) || !this._multicall) {\n                return super.getBalance(resolvedAddressOrName, blockTag);\n            }\n            const [balance] = await this._multicall.functions.getEthBalance(resolvedAddressOrName, {\n                blockTag: resolvedBlockTag\n            });\n            return balance;\n        }\n    };\n    batchedProviders.push(batchedProvider);\n    return batchedProvider;\n};\nexports.Batched = Batched;\nexports.BatchedWebSocketAugmentedWeb3Provider = exports.Batched(WebSocketAugmentedProvider_1.WebSocketAugmentedWeb3Provider);\n//# sourceMappingURL=BatchedProvider.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TroveWithPendingRedistribution = exports.UserTrove = exports._emptyTrove = exports.Trove = exports._normalizeTroveAdjustment = exports._normalizeTroveCreation = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst Decimal_1 = require(\"./Decimal\");\nconst constants_1 = require(\"./constants\");\nconst invalidTroveCreation = (invalidTrove, error) => ({\n    type: \"invalidCreation\",\n    invalidTrove,\n    error\n});\nconst troveCreation = (params) => ({\n    type: \"creation\",\n    params\n});\nconst troveClosure = (params) => ({\n    type: \"closure\",\n    params\n});\nconst troveAdjustment = (params, setToZero) => ({\n    type: \"adjustment\",\n    params,\n    setToZero\n});\nconst valueIsDefined = (entry) => entry[1] !== undefined;\nconst allowedTroveCreationKeys = [\n    \"depositCollateral\",\n    \"borrowLUSD\"\n];\nfunction checkAllowedTroveCreationKeys(entries) {\n    const badKeys = entries\n        .filter(([k]) => !allowedTroveCreationKeys.includes(k))\n        .map(([k]) => `'${k}'`);\n    if (badKeys.length > 0) {\n        throw new Error(`TroveCreationParams: property ${badKeys.join(\", \")} not allowed`);\n    }\n}\nconst troveCreationParamsFromEntries = (entries) => {\n    const params = Object.fromEntries(entries);\n    const missingKeys = allowedTroveCreationKeys.filter(k => !(k in params)).map(k => `'${k}'`);\n    if (missingKeys.length > 0) {\n        throw new Error(`TroveCreationParams: property ${missingKeys.join(\", \")} missing`);\n    }\n    return params;\n};\nconst decimalize = ([k, v]) => [k, Decimal_1.Decimal.from(v)];\nconst nonZero = ([, v]) => !v.isZero;\n/** @internal */\nconst _normalizeTroveCreation = (params) => {\n    const definedEntries = Object.entries(params).filter(valueIsDefined);\n    checkAllowedTroveCreationKeys(definedEntries);\n    const nonZeroEntries = definedEntries.map(decimalize);\n    return troveCreationParamsFromEntries(nonZeroEntries);\n};\nexports._normalizeTroveCreation = _normalizeTroveCreation;\nconst allowedTroveAdjustmentKeys = [\n    \"depositCollateral\",\n    \"withdrawCollateral\",\n    \"borrowLUSD\",\n    \"repayLUSD\"\n];\nfunction checkAllowedTroveAdjustmentKeys(entries) {\n    const badKeys = entries\n        .filter(([k]) => !allowedTroveAdjustmentKeys.includes(k))\n        .map(([k]) => `'${k}'`);\n    if (badKeys.length > 0) {\n        throw new Error(`TroveAdjustmentParams: property ${badKeys.join(\", \")} not allowed`);\n    }\n}\nconst collateralChangeFrom = ({ depositCollateral, withdrawCollateral }) => {\n    if (depositCollateral !== undefined && withdrawCollateral !== undefined) {\n        throw new Error(\"TroveAdjustmentParams: 'depositCollateral' and 'withdrawCollateral' \" +\n            \"can't be present at the same time\");\n    }\n    if (depositCollateral !== undefined) {\n        return { depositCollateral };\n    }\n    if (withdrawCollateral !== undefined) {\n        return { withdrawCollateral };\n    }\n};\nconst debtChangeFrom = ({ borrowLUSD, repayLUSD }) => {\n    if (borrowLUSD !== undefined && repayLUSD !== undefined) {\n        throw new Error(\"TroveAdjustmentParams: 'borrowLUSD' and 'repayLUSD' can't be present at the same time\");\n    }\n    if (borrowLUSD !== undefined) {\n        return { borrowLUSD };\n    }\n    if (repayLUSD !== undefined) {\n        return { repayLUSD };\n    }\n};\nconst troveAdjustmentParamsFromEntries = (entries) => {\n    const params = Object.fromEntries(entries);\n    const collateralChange = collateralChangeFrom(params);\n    const debtChange = debtChangeFrom(params);\n    if (collateralChange !== undefined && debtChange !== undefined) {\n        return { ...collateralChange, ...debtChange };\n    }\n    if (collateralChange !== undefined) {\n        return collateralChange;\n    }\n    if (debtChange !== undefined) {\n        return debtChange;\n    }\n    throw new Error(\"TroveAdjustmentParams: must include at least one non-zero parameter\");\n};\n/** @internal */\nconst _normalizeTroveAdjustment = (params) => {\n    const definedEntries = Object.entries(params).filter(valueIsDefined);\n    checkAllowedTroveAdjustmentKeys(definedEntries);\n    const nonZeroEntries = definedEntries.map(decimalize).filter(nonZero);\n    return troveAdjustmentParamsFromEntries(nonZeroEntries);\n};\nexports._normalizeTroveAdjustment = _normalizeTroveAdjustment;\nconst applyFee = (borrowingRate, debtIncrease) => debtIncrease.mul(Decimal_1.Decimal.ONE.add(borrowingRate));\nconst unapplyFee = (borrowingRate, debtIncrease) => debtIncrease._divCeil(Decimal_1.Decimal.ONE.add(borrowingRate));\nconst NOMINAL_COLLATERAL_RATIO_PRECISION = Decimal_1.Decimal.from(100);\n/**\n * A combination of collateral and debt.\n *\n * @public\n */\nclass Trove {\n    /** @internal */\n    constructor(collateral = Decimal_1.Decimal.ZERO, debt = Decimal_1.Decimal.ZERO) {\n        this.collateral = collateral;\n        this.debt = debt;\n    }\n    get isEmpty() {\n        return this.collateral.isZero && this.debt.isZero;\n    }\n    /**\n     * Amount of LUSD that must be repaid to close this Trove.\n     *\n     * @remarks\n     * This doesn't include the liquidation reserve, which is refunded in case of normal closure.\n     */\n    get netDebt() {\n        if (this.debt.lt(constants_1.LUSD_LIQUIDATION_RESERVE)) {\n            throw new Error(`netDebt should not be used when debt < ${constants_1.LUSD_LIQUIDATION_RESERVE}`);\n        }\n        return this.debt.sub(constants_1.LUSD_LIQUIDATION_RESERVE);\n    }\n    /** @internal */\n    get _nominalCollateralRatio() {\n        return this.collateral.mulDiv(NOMINAL_COLLATERAL_RATIO_PRECISION, this.debt);\n    }\n    /** Calculate the Trove's collateralization ratio at a given price. */\n    collateralRatio(price) {\n        return this.collateral.mulDiv(price, this.debt);\n    }\n    /**\n     * Whether the Trove is undercollateralized at a given price.\n     *\n     * @returns\n     * `true` if the Trove's collateralization ratio is less than the\n     * {@link MINIMUM_COLLATERAL_RATIO}.\n     */\n    collateralRatioIsBelowMinimum(price) {\n        return this.collateralRatio(price).lt(constants_1.MINIMUM_COLLATERAL_RATIO);\n    }\n    /**\n     * Whether the collateralization ratio is less than the {@link CRITICAL_COLLATERAL_RATIO} at a\n     * given price.\n     *\n     * @example\n     * Can be used to check whether the Liquity protocol is in recovery mode by using it on the return\n     * value of {@link ReadableLiquity.getTotal | getTotal()}. For example:\n     *\n     * ```typescript\n     * const total = await liquity.getTotal();\n     * const price = await liquity.getPrice();\n     *\n     * if (total.collateralRatioIsBelowCritical(price)) {\n     *   // Recovery mode is active\n     * }\n     * ```\n     */\n    collateralRatioIsBelowCritical(price) {\n        return this.collateralRatio(price).lt(constants_1.CRITICAL_COLLATERAL_RATIO);\n    }\n    /** Whether the Trove is sufficiently collateralized to be opened during recovery mode. */\n    isOpenableInRecoveryMode(price) {\n        return this.collateralRatio(price).gte(constants_1.CRITICAL_COLLATERAL_RATIO);\n    }\n    /** @internal */\n    toString() {\n        return `{ collateral: ${this.collateral}, debt: ${this.debt} }`;\n    }\n    equals(that) {\n        return this.collateral.eq(that.collateral) && this.debt.eq(that.debt);\n    }\n    add(that) {\n        return new Trove(this.collateral.add(that.collateral), this.debt.add(that.debt));\n    }\n    addCollateral(collateral) {\n        return new Trove(this.collateral.add(collateral), this.debt);\n    }\n    addDebt(debt) {\n        return new Trove(this.collateral, this.debt.add(debt));\n    }\n    subtract(that) {\n        const { collateral, debt } = that;\n        return new Trove(this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal_1.Decimal.ZERO, this.debt.gt(debt) ? this.debt.sub(debt) : Decimal_1.Decimal.ZERO);\n    }\n    subtractCollateral(collateral) {\n        return new Trove(this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal_1.Decimal.ZERO, this.debt);\n    }\n    subtractDebt(debt) {\n        return new Trove(this.collateral, this.debt.gt(debt) ? this.debt.sub(debt) : Decimal_1.Decimal.ZERO);\n    }\n    multiply(multiplier) {\n        return new Trove(this.collateral.mul(multiplier), this.debt.mul(multiplier));\n    }\n    setCollateral(collateral) {\n        return new Trove(Decimal_1.Decimal.from(collateral), this.debt);\n    }\n    setDebt(debt) {\n        return new Trove(this.collateral, Decimal_1.Decimal.from(debt));\n    }\n    _debtChange({ debt }, borrowingRate) {\n        return debt.gt(this.debt)\n            ? { borrowLUSD: unapplyFee(borrowingRate, debt.sub(this.debt)) }\n            : { repayLUSD: this.debt.sub(debt) };\n    }\n    _collateralChange({ collateral }) {\n        return collateral.gt(this.collateral)\n            ? { depositCollateral: collateral.sub(this.collateral) }\n            : { withdrawCollateral: this.collateral.sub(collateral) };\n    }\n    /**\n     * Calculate the difference between this Trove and another.\n     *\n     * @param that - The other Trove.\n     * @param borrowingRate - Borrowing rate to use when calculating a borrowed amount.\n     *\n     * @returns\n     * An object representing the change, or `undefined` if the Troves are equal.\n     */\n    whatChanged(that, borrowingRate = constants_1.MINIMUM_BORROWING_RATE) {\n        var _a;\n        if (this.collateral.eq(that.collateral) && this.debt.eq(that.debt)) {\n            return undefined;\n        }\n        if (this.isEmpty) {\n            if (that.debt.lt(constants_1.LUSD_LIQUIDATION_RESERVE)) {\n                return invalidTroveCreation(that, \"missingLiquidationReserve\");\n            }\n            return troveCreation({\n                depositCollateral: that.collateral,\n                borrowLUSD: unapplyFee(borrowingRate, that.netDebt)\n            });\n        }\n        if (that.isEmpty) {\n            return troveClosure(this.netDebt.nonZero\n                ? { withdrawCollateral: this.collateral, repayLUSD: this.netDebt }\n                : { withdrawCollateral: this.collateral });\n        }\n        return this.collateral.eq(that.collateral)\n            ? troveAdjustment(this._debtChange(that, borrowingRate), that.debt.zero && \"debt\")\n            : this.debt.eq(that.debt)\n                ? troveAdjustment(this._collateralChange(that), that.collateral.zero && \"collateral\")\n                : troveAdjustment({\n                    ...this._debtChange(that, borrowingRate),\n                    ...this._collateralChange(that)\n                }, (_a = (that.debt.zero && \"debt\")) !== null && _a !== void 0 ? _a : (that.collateral.zero && \"collateral\"));\n    }\n    /**\n     * Make a new Trove by applying a {@link TroveChange} to this Trove.\n     *\n     * @param change - The change to apply.\n     * @param borrowingRate - Borrowing rate to use when adding a borrowed amount to the Trove's debt.\n     */\n    apply(change, borrowingRate = constants_1.MINIMUM_BORROWING_RATE) {\n        if (!change) {\n            return this;\n        }\n        switch (change.type) {\n            case \"invalidCreation\":\n                if (!this.isEmpty) {\n                    throw new Error(\"Can't create onto existing Trove\");\n                }\n                return change.invalidTrove;\n            case \"creation\": {\n                if (!this.isEmpty) {\n                    throw new Error(\"Can't create onto existing Trove\");\n                }\n                const { depositCollateral, borrowLUSD } = change.params;\n                return new Trove(depositCollateral, constants_1.LUSD_LIQUIDATION_RESERVE.add(applyFee(borrowingRate, borrowLUSD)));\n            }\n            case \"closure\":\n                if (this.isEmpty) {\n                    throw new Error(\"Can't close empty Trove\");\n                }\n                return exports._emptyTrove;\n            case \"adjustment\": {\n                const { setToZero, params: { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD } } = change;\n                const collateralDecrease = withdrawCollateral !== null && withdrawCollateral !== void 0 ? withdrawCollateral : Decimal_1.Decimal.ZERO;\n                const collateralIncrease = depositCollateral !== null && depositCollateral !== void 0 ? depositCollateral : Decimal_1.Decimal.ZERO;\n                const debtDecrease = repayLUSD !== null && repayLUSD !== void 0 ? repayLUSD : Decimal_1.Decimal.ZERO;\n                const debtIncrease = borrowLUSD ? applyFee(borrowingRate, borrowLUSD) : Decimal_1.Decimal.ZERO;\n                return setToZero === \"collateral\"\n                    ? this.setCollateral(Decimal_1.Decimal.ZERO).addDebt(debtIncrease).subtractDebt(debtDecrease)\n                    : setToZero === \"debt\"\n                        ? this.setDebt(Decimal_1.Decimal.ZERO)\n                            .addCollateral(collateralIncrease)\n                            .subtractCollateral(collateralDecrease)\n                        : this.add(new Trove(collateralIncrease, debtIncrease)).subtract(new Trove(collateralDecrease, debtDecrease));\n            }\n        }\n    }\n    /**\n     * Calculate the result of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n     *\n     * @param params - Parameters of the transaction.\n     * @param borrowingRate - Borrowing rate to use when calculating the Trove's debt.\n     */\n    static create(params, borrowingRate) {\n        return exports._emptyTrove.apply(troveCreation(exports._normalizeTroveCreation(params)), borrowingRate);\n    }\n    /**\n     * Calculate the parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction\n     * that will result in the given Trove.\n     *\n     * @param that - The Trove to recreate.\n     * @param borrowingRate - Current borrowing rate.\n     */\n    static recreate(that, borrowingRate) {\n        const change = exports._emptyTrove.whatChanged(that, borrowingRate);\n        assert_1.default((change === null || change === void 0 ? void 0 : change.type) === \"creation\");\n        return change.params;\n    }\n    /**\n     * Calculate the result of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction\n     * on this Trove.\n     *\n     * @param params - Parameters of the transaction.\n     * @param borrowingRate - Borrowing rate to use when adding to the Trove's debt.\n     */\n    adjust(params, borrowingRate) {\n        return this.apply(troveAdjustment(exports._normalizeTroveAdjustment(params)), borrowingRate);\n    }\n    /**\n     * Calculate the parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()}\n     * transaction that will change this Trove into the given Trove.\n     *\n     * @param that - The desired result of the transaction.\n     * @param borrowingRate - Current borrowing rate.\n     */\n    adjustTo(that, borrowingRate) {\n        const change = this.whatChanged(that, borrowingRate);\n        assert_1.default((change === null || change === void 0 ? void 0 : change.type) === \"adjustment\");\n        return change.params;\n    }\n}\nexports.Trove = Trove;\n/** @internal */\nexports._emptyTrove = new Trove();\n/**\n * A Trove that is associated with a single owner.\n *\n * @remarks\n * The SDK uses the base {@link Trove} class as a generic container of collateral and debt, for\n * example to represent the {@link ReadableLiquity.getTotal | total collateral and debt} locked up\n * in the protocol.\n *\n * The `UserTrove` class extends `Trove` with extra information that's only available for Troves\n * that are associated with a single owner (such as the owner's address, or the Trove's status).\n *\n * @public\n */\nclass UserTrove extends Trove {\n    /** @internal */\n    constructor(ownerAddress, status, collateral, debt) {\n        super(collateral, debt);\n        this.ownerAddress = ownerAddress;\n        this.status = status;\n    }\n    equals(that) {\n        return (super.equals(that) && this.ownerAddress === that.ownerAddress && this.status === that.status);\n    }\n    /** @internal */\n    toString() {\n        return (`{ ownerAddress: \"${this.ownerAddress}\"` +\n            `, collateral: ${this.collateral}` +\n            `, debt: ${this.debt}` +\n            `, status: \"${this.status}\" }`);\n    }\n}\nexports.UserTrove = UserTrove;\n/**\n * A Trove in its state after the last direct modification.\n *\n * @remarks\n * The Trove may have received collateral and debt shares from liquidations since then.\n * Use {@link TroveWithPendingRedistribution.applyRedistribution | applyRedistribution()} to\n * calculate the Trove's most up-to-date state.\n *\n * @public\n */\nclass TroveWithPendingRedistribution extends UserTrove {\n    /** @internal */\n    constructor(ownerAddress, status, collateral, debt, stake = Decimal_1.Decimal.ZERO, snapshotOfTotalRedistributed = exports._emptyTrove) {\n        super(ownerAddress, status, collateral, debt);\n        this.stake = stake;\n        this.snapshotOfTotalRedistributed = snapshotOfTotalRedistributed;\n    }\n    applyRedistribution(totalRedistributed) {\n        const afterRedistribution = this.add(totalRedistributed.subtract(this.snapshotOfTotalRedistributed).multiply(this.stake));\n        return new UserTrove(this.ownerAddress, this.status, afterRedistribution.collateral, afterRedistribution.debt);\n    }\n    equals(that) {\n        return (super.equals(that) &&\n            this.stake.eq(that.stake) &&\n            this.snapshotOfTotalRedistributed.equals(that.snapshotOfTotalRedistributed));\n    }\n}\nexports.TroveWithPendingRedistribution = TroveWithPendingRedistribution;\n//# sourceMappingURL=Trove.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StabilityDeposit = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * A Stability Deposit and its accrued gains.\n *\n * @public\n */\nclass StabilityDeposit {\n    /** @internal */\n    constructor(initialLUSD, currentLUSD, collateralGain, lqtyReward, frontendTag) {\n        this.initialLUSD = initialLUSD;\n        this.currentLUSD = currentLUSD;\n        this.collateralGain = collateralGain;\n        this.lqtyReward = lqtyReward;\n        this.frontendTag = frontendTag;\n        if (this.currentLUSD.gt(this.initialLUSD)) {\n            throw new Error(\"currentLUSD can't be greater than initialLUSD\");\n        }\n    }\n    get isEmpty() {\n        return (this.initialLUSD.isZero &&\n            this.currentLUSD.isZero &&\n            this.collateralGain.isZero &&\n            this.lqtyReward.isZero);\n    }\n    /** @internal */\n    toString() {\n        return (`{ initialLUSD: ${this.initialLUSD}` +\n            `, currentLUSD: ${this.currentLUSD}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lqtyReward: ${this.lqtyReward}` +\n            `, frontendTag: \"${this.frontendTag}\" }`);\n    }\n    /**\n     * Compare to another instance of `StabilityDeposit`.\n     */\n    equals(that) {\n        return (this.initialLUSD.eq(that.initialLUSD) &&\n            this.currentLUSD.eq(that.currentLUSD) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lqtyReward.eq(that.lqtyReward) &&\n            this.frontendTag === that.frontendTag);\n    }\n    /**\n     * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n     *\n     * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n     */\n    whatChanged(thatLUSD) {\n        thatLUSD = Decimal_1.Decimal.from(thatLUSD);\n        if (thatLUSD.lt(this.currentLUSD)) {\n            return { withdrawLUSD: this.currentLUSD.sub(thatLUSD), withdrawAllLUSD: thatLUSD.isZero };\n        }\n        if (thatLUSD.gt(this.currentLUSD)) {\n            return { depositLUSD: thatLUSD.sub(this.currentLUSD) };\n        }\n    }\n    /**\n     * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n     *\n     * @returns The new deposited LUSD amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.currentLUSD;\n        }\n        if (change.withdrawLUSD !== undefined) {\n            return change.withdrawAllLUSD || this.currentLUSD.lte(change.withdrawLUSD)\n                ? Decimal_1.Decimal.ZERO\n                : this.currentLUSD.sub(change.withdrawLUSD);\n        }\n        else {\n            return this.currentLUSD.add(change.depositLUSD);\n        }\n    }\n}\nexports.StabilityDeposit = StabilityDeposit;\n//# sourceMappingURL=StabilityDeposit.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LQTYStake = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\nclass LQTYStake {\n    /** @internal */\n    constructor(stakedLQTY = Decimal_1.Decimal.ZERO, collateralGain = Decimal_1.Decimal.ZERO, lusdGain = Decimal_1.Decimal.ZERO) {\n        this.stakedLQTY = stakedLQTY;\n        this.collateralGain = collateralGain;\n        this.lusdGain = lusdGain;\n    }\n    get isEmpty() {\n        return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n    }\n    /** @internal */\n    toString() {\n        return (`{ stakedLQTY: ${this.stakedLQTY}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lusdGain: ${this.lusdGain} }`);\n    }\n    /**\n     * Compare to another instance of `LQTYStake`.\n     */\n    equals(that) {\n        return (this.stakedLQTY.eq(that.stakedLQTY) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lusdGain.eq(that.lusdGain));\n    }\n    /**\n     * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n     *\n     * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n     */\n    whatChanged(thatStakedLQTY) {\n        thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n        if (thatStakedLQTY.lt(this.stakedLQTY)) {\n            return {\n                unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n                unstakeAllLQTY: thatStakedLQTY.isZero\n            };\n        }\n        if (thatStakedLQTY.gt(this.stakedLQTY)) {\n            return { stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY) };\n        }\n    }\n    /**\n     * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n     *\n     * @returns The new staked LQTY amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.stakedLQTY;\n        }\n        if (change.unstakeLQTY !== undefined) {\n            return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY)\n                ? Decimal_1.Decimal.ZERO\n                : this.stakedLQTY.sub(change.unstakeLQTY);\n        }\n        else {\n            return this.stakedLQTY.add(change.stakeLQTY);\n        }\n    }\n}\nexports.LQTYStake = LQTYStake;\n//# sourceMappingURL=LQTYStake.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fees = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst Decimal_1 = require(\"./Decimal\");\nconst constants_1 = require(\"./constants\");\n/**\n * Calculator for fees.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getFees | getFees()} function.\n *\n * @public\n */\nclass Fees {\n    /** @internal */\n    constructor(baseRateWithoutDecay, minuteDecayFactor, beta, lastFeeOperation, timeOfLatestBlock, recoveryMode) {\n        this._baseRateWithoutDecay = Decimal_1.Decimal.from(baseRateWithoutDecay);\n        this._minuteDecayFactor = Decimal_1.Decimal.from(minuteDecayFactor);\n        this._beta = Decimal_1.Decimal.from(beta);\n        this._lastFeeOperation = lastFeeOperation;\n        this._timeOfLatestBlock = timeOfLatestBlock;\n        this._recoveryMode = recoveryMode;\n        assert_1.default(this._minuteDecayFactor.lt(1));\n    }\n    /** @internal */\n    _setRecoveryMode(recoveryMode) {\n        return new Fees(this._baseRateWithoutDecay, this._minuteDecayFactor, this._beta, this._lastFeeOperation, this._timeOfLatestBlock, recoveryMode);\n    }\n    /**\n     * Compare to another instance of `Fees`.\n     */\n    equals(that) {\n        return (this._baseRateWithoutDecay.eq(that._baseRateWithoutDecay) &&\n            this._minuteDecayFactor.eq(that._minuteDecayFactor) &&\n            this._beta.eq(that._beta) &&\n            this._lastFeeOperation.getTime() === that._lastFeeOperation.getTime() &&\n            this._timeOfLatestBlock.getTime() === that._timeOfLatestBlock.getTime() &&\n            this._recoveryMode === that._recoveryMode);\n    }\n    /** @internal */\n    toString() {\n        return (`{ baseRateWithoutDecay: ${this._baseRateWithoutDecay}` +\n            `, lastFeeOperation: \"${this._lastFeeOperation.toLocaleString()}\"` +\n            `, recoveryMode: ${this._recoveryMode} } `);\n    }\n    /** @internal */\n    baseRate(when = this._timeOfLatestBlock) {\n        const millisecondsSinceLastFeeOperation = Math.max(when.getTime() - this._lastFeeOperation.getTime(), 0 // Clamp negative elapsed time to 0, in case the client's time is in the past.\n        // We will calculate slightly higher than actual fees, which is fine.\n        );\n        const minutesSinceLastFeeOperation = Math.floor(millisecondsSinceLastFeeOperation / 60000);\n        return this._minuteDecayFactor.pow(minutesSinceLastFeeOperation).mul(this._baseRateWithoutDecay);\n    }\n    /**\n     * Calculate the current borrowing rate.\n     *\n     * @param when - Optional timestamp that can be used to calculate what the borrowing rate would\n     *               decay to at a point of time in the future.\n     *\n     * @remarks\n     * By default, the fee is calculated at the time of the latest block. This can be overridden using\n     * the `when` parameter.\n     *\n     * To calculate the borrowing fee in LUSD, multiply the borrowed LUSD amount by the borrowing rate.\n     *\n     * @example\n     * ```typescript\n     * const fees = await liquity.getFees();\n     *\n     * const borrowedLUSDAmount = 100;\n     * const borrowingRate = fees.borrowingRate();\n     * const borrowingFeeLUSD = borrowingRate.mul(borrowedLUSDAmount);\n     * ```\n     */\n    borrowingRate(when) {\n        return this._recoveryMode\n            ? Decimal_1.Decimal.ZERO\n            : Decimal_1.Decimal.min(constants_1.MINIMUM_BORROWING_RATE.add(this.baseRate(when)), constants_1.MAXIMUM_BORROWING_RATE);\n    }\n    /**\n     * Calculate the current redemption rate.\n     *\n     * @param redeemedFractionOfSupply - The amount of LUSD being redeemed divided by the total supply.\n     * @param when - Optional timestamp that can be used to calculate what the redemption rate would\n     *               decay to at a point of time in the future.\n     *\n     * @remarks\n     * By default, the fee is calculated at the time of the latest block. This can be overridden using\n     * the `when` parameter.\n  \n     * Unlike the borrowing rate, the redemption rate depends on the amount being redeemed. To be more\n     * precise, it depends on the fraction of the redeemed amount compared to the total LUSD supply,\n     * which must be passed as a parameter.\n     *\n     * To calculate the redemption fee in LUSD, multiply the redeemed LUSD amount with the redemption\n     * rate.\n     *\n     * @example\n     * ```typescript\n     * const fees = await liquity.getFees();\n     * const total = await liquity.getTotal();\n     *\n     * const redeemedLUSDAmount = Decimal.from(100);\n     * const redeemedFractionOfSupply = redeemedLUSDAmount.div(total.debt);\n     * const redemptionRate = fees.redemptionRate(redeemedFractionOfSupply);\n     * const redemptionFeeLUSD = redemptionRate.mul(redeemedLUSDAmount);\n     * ```\n     */\n    redemptionRate(redeemedFractionOfSupply = Decimal_1.Decimal.ZERO, when) {\n        redeemedFractionOfSupply = Decimal_1.Decimal.from(redeemedFractionOfSupply);\n        let baseRate = this.baseRate(when);\n        if (redeemedFractionOfSupply.nonZero) {\n            baseRate = redeemedFractionOfSupply.div(this._beta).add(baseRate);\n        }\n        return Decimal_1.Decimal.min(constants_1.MINIMUM_REDEMPTION_RATE.add(baseRate), Decimal_1.Decimal.ONE);\n    }\n}\nexports.Fees = Fees;\n//# sourceMappingURL=Fees.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFailedError = void 0;\n/**\n * Thrown by {@link TransactableLiquity} functions in case of transaction failure.\n *\n * @public\n */\nclass TransactionFailedError extends Error {\n    /** @internal */\n    constructor(name, message, failedReceipt) {\n        super(message);\n        this.name = name;\n        this.failedReceipt = failedReceipt;\n    }\n}\nexports.TransactionFailedError = TransactionFailedError;\n//# sourceMappingURL=TransactableLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._successfulReceipt = exports._failedReceipt = exports._pendingReceipt = void 0;\n/** @internal */\nexports._pendingReceipt = { status: \"pending\" };\n/** @internal */\nconst _failedReceipt = (rawReceipt) => ({\n    status: \"failed\",\n    rawReceipt\n});\nexports._failedReceipt = _failedReceipt;\n/** @internal */\nconst _successfulReceipt = (rawReceipt, details, toString) => ({\n    status: \"succeeded\",\n    rawReceipt,\n    details,\n    ...(toString ? { toString } : {})\n});\nexports._successfulReceipt = _successfulReceipt;\n//# sourceMappingURL=SendableLiquity.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LiquityStore = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst strictEquals = (a, b) => a === b;\nconst eq = (a, b) => a.eq(b);\nconst equals = (a, b) => a.equals(b);\nconst frontendStatusEquals = (a, b) => a.status === \"unregistered\"\n    ? b.status === \"unregistered\"\n    : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\nconst showFrontendStatus = (x) => x.status === \"unregistered\"\n    ? '{ status: \"unregistered\" }'\n    : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\nconst wrap = (f) => (...args) => f(...args);\nconst difference = (a, b) => Object.fromEntries(Object.entries(a).filter(([key, value]) => value !== b[key]));\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @fluidity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\nclass LiquityStore {\n    constructor() {\n        /** Turn console logging on/off. */\n        this.logging = false;\n        /** @internal */\n        this._loaded = false;\n        this._listeners = new Set();\n    }\n    /**\n     * The current store state.\n     *\n     * @remarks\n     * Should not be accessed before the store is loaded. Assign a function to\n     * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n     *\n     * See {@link LiquityStoreState} for the list of properties returned.\n     */\n    get state() {\n        return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n    }\n    /**\n     * Start monitoring the blockchain for Liquity state changes.\n     *\n     * @remarks\n     * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n     * for the first time.\n     *\n     * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n     *\n     * @returns Function to stop the monitoring.\n     */\n    start() {\n        const doStop = this._doStart();\n        return () => {\n            doStop();\n            this._cancelUpdateIfScheduled();\n        };\n    }\n    _cancelUpdateIfScheduled() {\n        if (this._updateTimeoutId !== undefined) {\n            clearTimeout(this._updateTimeoutId);\n        }\n    }\n    _scheduleUpdate() {\n        this._cancelUpdateIfScheduled();\n        this._updateTimeoutId = setTimeout(() => {\n            this._updateTimeoutId = undefined;\n            this._update();\n        }, 30000);\n    }\n    _logUpdate(name, next, show) {\n        if (this.logging) {\n            console.log(`${name} updated to ${show ? show(next) : next}`);\n        }\n        return next;\n    }\n    _updateIfChanged(equals, name, prev, next, show) {\n        return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n    }\n    _silentlyUpdateIfChanged(equals, prev, next) {\n        return next !== undefined && !equals(prev, next) ? next : prev;\n    }\n    _updateFees(name, prev, next) {\n        if (next && !next.equals(prev)) {\n            // Filter out fee update spam that happens on every new block by only logging when string\n            // representation changes.\n            if (`${next}` !== `${prev}`) {\n                this._logUpdate(name, next);\n            }\n            return next;\n        }\n        else {\n            return prev;\n        }\n    }\n    _reduce(baseState, baseStateUpdate) {\n        return {\n            frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n            ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n            numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n            accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n            lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n            lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n            uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n            uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n            remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n            liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n            totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n            liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n            collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n            price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n            lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n            total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n            totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n            troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n            stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n            remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n            _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n            lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n            totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n            _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n        };\n    }\n    _derive({ troveBeforeRedistribution, totalRedistributed, _feesInNormalMode, total, price, _riskiestTroveBeforeRedistribution }) {\n        const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n        return {\n            trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n            fees,\n            borrowingRate: fees.borrowingRate(),\n            redemptionRate: fees.redemptionRate(),\n            haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution\n                .applyRedistribution(totalRedistributed)\n                .collateralRatioIsBelowMinimum(price)\n        };\n    }\n    _reduceDerived(derivedState, derivedStateUpdate) {\n        return {\n            fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n            trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n            borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n            redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n            haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n        };\n    }\n    _notify(params) {\n        // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n        // existing listeners, as that could result in infinite loops.\n        //\n        // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n        // the original set. This way we avoid calling listeners that have already been unsubscribed\n        // by an earlier listener callback.\n        [...this._listeners].forEach(listener => {\n            if (this._listeners.has(listener)) {\n                listener(params);\n            }\n        });\n    }\n    /**\n     * Register a state change listener.\n     *\n     * @param listener - Function that will be called whenever state changes.\n     * @returns Function to unregister this listener.\n     */\n    subscribe(listener) {\n        const uniqueListener = wrap(listener);\n        this._listeners.add(uniqueListener);\n        return () => {\n            this._listeners.delete(uniqueListener);\n        };\n    }\n    /** @internal */\n    _load(baseState, extraState) {\n        assert_1.default(!this._loaded);\n        this._baseState = baseState;\n        this._derivedState = this._derive(baseState);\n        this._extraState = extraState;\n        this._loaded = true;\n        this._scheduleUpdate();\n        if (this.onLoaded) {\n            this.onLoaded();\n        }\n    }\n    /** @internal */\n    _update(baseStateUpdate, extraStateUpdate) {\n        assert_1.default(this._baseState && this._derivedState);\n        const oldState = this.state;\n        if (baseStateUpdate) {\n            this._baseState = this._reduce(this._baseState, baseStateUpdate);\n        }\n        // Always running this lets us derive state based on passage of time, like baseRate decay\n        this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n        if (extraStateUpdate) {\n            assert_1.default(this._extraState);\n            this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n        }\n        this._scheduleUpdate();\n        this._notify({\n            newState: this.state,\n            oldState,\n            stateChange: difference(this.state, oldState)\n        });\n    }\n}\nexports.LiquityStore = LiquityStore;\n//# sourceMappingURL=LiquityStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._CachedReadableLiquity = void 0;\n/** @internal */\nclass _CachedReadableLiquity {\n    constructor(readable, cache) {\n        this._readable = readable;\n        this._cache = cache;\n    }\n    async getTotalRedistributed(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalRedistributed(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalRedistributed(...extraParams));\n    }\n    async getTroveBeforeRedistribution(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTroveBeforeRedistribution(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTroveBeforeRedistribution(address, ...extraParams));\n    }\n    async getTrove(address, ...extraParams) {\n        const [troveBeforeRedistribution, totalRedistributed] = await Promise.all([\n            this.getTroveBeforeRedistribution(address, ...extraParams),\n            this.getTotalRedistributed(...extraParams)\n        ]);\n        return troveBeforeRedistribution.applyRedistribution(totalRedistributed);\n    }\n    async getNumberOfTroves(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getNumberOfTroves(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getNumberOfTroves(...extraParams));\n    }\n    async getPrice(...extraParams) {\n        var _a;\n        return (_a = this._cache.getPrice(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getPrice(...extraParams);\n    }\n    async getTotal(...extraParams) {\n        var _a;\n        return (_a = this._cache.getTotal(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotal(...extraParams);\n    }\n    async getStabilityDeposit(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getStabilityDeposit(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getStabilityDeposit(address, ...extraParams));\n    }\n    async getRemainingStabilityPoolLQTYReward(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getRemainingStabilityPoolLQTYReward(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getRemainingStabilityPoolLQTYReward(...extraParams));\n    }\n    async getLUSDInStabilityPool(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLUSDInStabilityPool(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLUSDInStabilityPool(...extraParams));\n    }\n    async getLUSDBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLUSDBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLUSDBalance(address, ...extraParams));\n    }\n    async getLQTYBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLQTYBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLQTYBalance(address, ...extraParams));\n    }\n    async getUniTokenBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getUniTokenBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getUniTokenBalance(address, ...extraParams));\n    }\n    async getUniTokenAllowance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getUniTokenAllowance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getUniTokenAllowance(address, ...extraParams));\n    }\n    async getRemainingLiquidityMiningLQTYReward(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getRemainingLiquidityMiningLQTYReward(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getRemainingLiquidityMiningLQTYReward(...extraParams));\n    }\n    async getLiquidityMiningStake(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLiquidityMiningStake(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLiquidityMiningStake(address, ...extraParams));\n    }\n    async getTotalStakedUniTokens(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalStakedUniTokens(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalStakedUniTokens(...extraParams));\n    }\n    async getLiquidityMiningLQTYReward(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLiquidityMiningLQTYReward(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLiquidityMiningLQTYReward(address, ...extraParams));\n    }\n    async getCollateralSurplusBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getCollateralSurplusBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getCollateralSurplusBalance(address, ...extraParams));\n    }\n    async getTroves(params, ...extraParams) {\n        var _a;\n        const { beforeRedistribution, ...restOfParams } = params;\n        const [totalRedistributed, troves] = await Promise.all([\n            beforeRedistribution ? undefined : this.getTotalRedistributed(...extraParams),\n            (_a = this._cache.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams)\n        ]);\n        if (totalRedistributed) {\n            return troves.map(trove => trove.applyRedistribution(totalRedistributed));\n        }\n        else {\n            return troves;\n        }\n    }\n    async getFees(...extraParams) {\n        var _a;\n        return (_a = this._cache.getFees(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getFees(...extraParams);\n    }\n    async getLQTYStake(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLQTYStake(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLQTYStake(address, ...extraParams));\n    }\n    async getTotalStakedLQTY(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalStakedLQTY(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalStakedLQTY(...extraParams));\n    }\n    async getFrontendStatus(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getFrontendStatus(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getFrontendStatus(address, ...extraParams));\n    }\n}\nexports._CachedReadableLiquity = _CachedReadableLiquity;\n//# sourceMappingURL=_CachedReadableLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connectToMulticall = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst multicallAbi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"getCurrentBlockTimestamp\",\n        outputs: [\n            {\n                name: \"timestamp\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n];\nconst multicallAddress = {\n    1: \"0xeefba1e63905ef1d7acba5a8513c70307c1ce441\",\n    3: \"0x53c43764255c17bd724f74c4ef150724ac50a3ed\",\n    4: \"0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821\",\n    5: \"0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e\",\n    42: \"0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a\"\n};\nconst hasMulticall = (chainId) => chainId in multicallAddress;\nconst _connectToMulticall = (signerOrProvider, chainId) => hasMulticall(chainId)\n    ? new contracts_1.Contract(multicallAddress[chainId], multicallAbi, signerOrProvider)\n    : undefined;\nexports._connectToMulticall = _connectToMulticall;\n//# sourceMappingURL=_Multicall.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObservableEthersLiquity = void 0;\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst debouncingDelayMs = 50;\nconst debounce = (listener) => {\n    let timeoutId = undefined;\n    let latestBlock = 0;\n    return (...args) => {\n        const event = args[args.length - 1];\n        if (event.blockNumber !== undefined && event.blockNumber > latestBlock) {\n            latestBlock = event.blockNumber;\n        }\n        if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            listener(latestBlock);\n            timeoutId = undefined;\n        }, debouncingDelayMs);\n    };\n};\n/** @alpha */\nclass ObservableEthersLiquity {\n    constructor(readable) {\n        this._readable = readable;\n    }\n    watchTotalRedistributed(onTotalRedistributedChanged) {\n        const { activePool, defaultPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const etherSent = activePool.filters.EtherSent();\n        const redistributionListener = debounce((blockTag) => {\n            this._readable.getTotalRedistributed({ blockTag }).then(onTotalRedistributedChanged);\n        });\n        const etherSentListener = (toAddress, _amount, event) => {\n            if (toAddress === defaultPool.address) {\n                redistributionListener(event);\n            }\n        };\n        activePool.on(etherSent, etherSentListener);\n        return () => {\n            activePool.removeListener(etherSent, etherSentListener);\n        };\n    }\n    watchTroveWithoutRewards(onTroveChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { troveManager, borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const troveUpdatedByTroveManager = troveManager.filters.TroveUpdated(address);\n        const troveUpdatedByBorrowerOperations = borrowerOperations.filters.TroveUpdated(address);\n        const troveListener = debounce((blockTag) => {\n            this._readable.getTroveBeforeRedistribution(address, { blockTag }).then(onTroveChanged);\n        });\n        troveManager.on(troveUpdatedByTroveManager, troveListener);\n        borrowerOperations.on(troveUpdatedByBorrowerOperations, troveListener);\n        return () => {\n            troveManager.removeListener(troveUpdatedByTroveManager, troveListener);\n            borrowerOperations.removeListener(troveUpdatedByBorrowerOperations, troveListener);\n        };\n    }\n    watchNumberOfTroves(onNumberOfTrovesChanged) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { TroveUpdated } = troveManager.filters;\n        const troveUpdated = TroveUpdated();\n        const troveUpdatedListener = debounce((blockTag) => {\n            this._readable.getNumberOfTroves({ blockTag }).then(onNumberOfTrovesChanged);\n        });\n        troveManager.on(troveUpdated, troveUpdatedListener);\n        return () => {\n            troveManager.removeListener(troveUpdated, troveUpdatedListener);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    watchPrice(onPriceChanged) {\n        // TODO revisit\n        // We no longer have our own PriceUpdated events. If we want to implement this in an event-based\n        // manner, we'll need to listen to aggregator events directly. Or we could do polling.\n        throw new Error(\"Method not implemented.\");\n    }\n    watchTotal(onTotalChanged) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { TroveUpdated } = troveManager.filters;\n        const troveUpdated = TroveUpdated();\n        const totalListener = debounce((blockTag) => {\n            this._readable.getTotal({ blockTag }).then(onTotalChanged);\n        });\n        troveManager.on(troveUpdated, totalListener);\n        return () => {\n            troveManager.removeListener(troveUpdated, totalListener);\n        };\n    }\n    watchStabilityDeposit(onStabilityDepositChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { activePool, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { UserDepositChanged } = stabilityPool.filters;\n        const { EtherSent } = activePool.filters;\n        const userDepositChanged = UserDepositChanged(address);\n        const etherSent = EtherSent();\n        const depositListener = debounce((blockTag) => {\n            this._readable.getStabilityDeposit(address, { blockTag }).then(onStabilityDepositChanged);\n        });\n        const etherSentListener = (toAddress, _amount, event) => {\n            if (toAddress === stabilityPool.address) {\n                // Liquidation while Stability Pool has some deposits\n                // There may be new gains\n                depositListener(event);\n            }\n        };\n        stabilityPool.on(userDepositChanged, depositListener);\n        activePool.on(etherSent, etherSentListener);\n        return () => {\n            stabilityPool.removeListener(userDepositChanged, depositListener);\n            activePool.removeListener(etherSent, etherSentListener);\n        };\n    }\n    watchLUSDInStabilityPool(onLUSDInStabilityPoolChanged) {\n        const { lusdToken, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { Transfer } = lusdToken.filters;\n        const transferLUSDFromStabilityPool = Transfer(stabilityPool.address);\n        const transferLUSDToStabilityPool = Transfer(null, stabilityPool.address);\n        const stabilityPoolLUSDFilters = [transferLUSDFromStabilityPool, transferLUSDToStabilityPool];\n        const stabilityPoolLUSDListener = debounce((blockTag) => {\n            this._readable.getLUSDInStabilityPool({ blockTag }).then(onLUSDInStabilityPoolChanged);\n        });\n        stabilityPoolLUSDFilters.forEach(filter => lusdToken.on(filter, stabilityPoolLUSDListener));\n        return () => stabilityPoolLUSDFilters.forEach(filter => lusdToken.removeListener(filter, stabilityPoolLUSDListener));\n    }\n    watchLUSDBalance(onLUSDBalanceChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { Transfer } = lusdToken.filters;\n        const transferLUSDFromUser = Transfer(address);\n        const transferLUSDToUser = Transfer(null, address);\n        const lusdTransferFilters = [transferLUSDFromUser, transferLUSDToUser];\n        const lusdTransferListener = debounce((blockTag) => {\n            this._readable.getLUSDBalance(address, { blockTag }).then(onLUSDBalanceChanged);\n        });\n        lusdTransferFilters.forEach(filter => lusdToken.on(filter, lusdTransferListener));\n        return () => lusdTransferFilters.forEach(filter => lusdToken.removeListener(filter, lusdTransferListener));\n    }\n}\nexports.ObservableEthersLiquity = ObservableEthersLiquity;\n//# sourceMappingURL=ObservableEthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logsToString = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst interfaceLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([, contract]) => [contract.address, contract.interface]));\n};\nconst nameLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([name, contract]) => [contract.address, name]));\n};\nconst tryToParseLog = (log, interfaceLookup) => {\n    const { address } = log;\n    if (address in interfaceLookup) {\n        try {\n            return { address, logDescription: interfaceLookup[address].parseLog(log) };\n        }\n        catch (err) {\n            console.warn(\"Failed to parse log:\");\n            console.warn(log);\n            console.warn(\"Caught:\");\n            console.warn(err);\n        }\n    }\n};\nconst parseLogs = (logs, interfaceLookup) => {\n    const parsedLogs = [];\n    const unparsedLogs = [];\n    logs.forEach(log => {\n        const parsedLog = tryToParseLog(log, interfaceLookup);\n        if (parsedLog) {\n            parsedLogs.push(parsedLog);\n        }\n        else {\n            unparsedLogs.push(log);\n        }\n    });\n    return [parsedLogs, unparsedLogs];\n};\nconst VERY_BIG = bignumber_1.BigNumber.from(10).pow(9);\nconst prettify = (arg, nameLookup) => {\n    if (bignumber_1.BigNumber.isBigNumber(arg)) {\n        if (arg.gte(VERY_BIG)) {\n            return `${lib_base_1.Decimal.fromBigNumberString(arg.toHexString())}e18`;\n        }\n        else {\n            return arg.toString();\n        }\n    }\n    else if (typeof arg === \"string\") {\n        return arg === constants_1.AddressZero\n            ? \"address(0)\"\n            : nameLookup && arg in nameLookup\n                ? nameLookup[arg]\n                : arg;\n    }\n    else {\n        return String(arg);\n    }\n};\nconst logDescriptionToString = (logDescription, nameLookup) => {\n    const prettyEntries = Object.entries(logDescription.args)\n        .filter(([key]) => !key.match(/^[0-9]/))\n        .map(([key, value]) => `${key}: ${prettify(value, nameLookup)}`);\n    return `${logDescription.name}({ ${prettyEntries.join(\", \")} })`;\n};\nconst logsToString = (receipt, contracts) => {\n    const contractLookup = contracts;\n    const interfaceLookup = interfaceLookupFrom(contractLookup);\n    const contractNameLookup = nameLookupFrom(contractLookup);\n    const nameLookup = {\n        [receipt.from]: \"user\",\n        ...contractNameLookup\n    };\n    const [parsedLogs, unparsedLogs] = parseLogs(receipt.logs, interfaceLookup);\n    if (unparsedLogs.length > 0) {\n        console.warn(\"Warning: not all logs were parsed. Unparsed logs:\");\n        console.warn(unparsedLogs);\n    }\n    if (parsedLogs.length > 0) {\n        return (`Logs of tx ${receipt.transactionHash}:\\n` +\n            parsedLogs\n                .map(({ address, logDescription }) => `  ${contractNameLookup[address]}.${logDescriptionToString(logDescription, nameLookup)}`)\n                .join(\"\\n\"));\n    }\n    else {\n        return `No logs were parsed in tx ${receipt.transactionHash}`;\n    }\n};\nexports.logsToString = logsToString;\n//# sourceMappingURL=parseLogs.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\nconst lib_base_1 = require(\"@fluidity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\nconst ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\nconst SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\nclass EthersTransactionFailedError extends lib_base_1.TransactionFailedError {\n    constructor(message, failedReceipt) {\n        super(\"EthersTransactionFailedError\", message, failedReceipt);\n    }\n}\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\nconst waitForSuccess = async (tx) => {\n    const receipt = await tx.waitForReceipt();\n    if (receipt.status !== \"succeeded\") {\n        throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n    }\n    return receipt.details;\n};\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\nclass EthersLiquity {\n    /** @internal */\n    constructor(readable) {\n        this._readable = readable;\n        this.connection = readable.connection;\n        this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n        this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n    }\n    /** @internal */\n    static _from(connection) {\n        if (EthersLiquityConnection_1._usingStore(connection)) {\n            return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n        else {\n            return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n    }\n    static async connect(signerOrProvider, optionalParams) {\n        return EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    getTotalRedistributed(overrides) {\n        return this._readable.getTotalRedistributed(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    getTroveBeforeRedistribution(address, overrides) {\n        return this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTrove} */\n    getTrove(address, overrides) {\n        return this._readable.getTrove(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    getNumberOfTroves(overrides) {\n        return this._readable.getNumberOfTroves(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        return this._readable.getPrice(overrides);\n    }\n    /** @internal */\n    _getActivePool(overrides) {\n        return this._readable._getActivePool(overrides);\n    }\n    /** @internal */\n    _getDefaultPool(overrides) {\n        return this._readable._getDefaultPool(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotal} */\n    getTotal(overrides) {\n        return this._readable.getTotal(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    getStabilityDeposit(address, overrides) {\n        return this._readable.getStabilityDeposit(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    getRemainingStabilityPoolLQTYReward(overrides) {\n        return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        return this._readable.getLUSDInStabilityPool(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        return this._readable.getLUSDBalance(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        return this._readable.getLQTYBalance(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        return this._readable.getUniTokenBalance(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        return this._readable.getUniTokenAllowance(address, overrides);\n    }\n    /** @internal */\n    _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    getRemainingLiquidityMiningLQTYReward(overrides) {\n        return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        return this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        return this._readable.getTotalStakedUniTokens(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        return this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n    getTroves(params, overrides) {\n        return this._readable.getTroves(params, overrides);\n    }\n    /** @internal */\n    _getBlockTimestamp(blockTag) {\n        return this._readable._getBlockTimestamp(blockTag);\n    }\n    /** @internal */\n    _getFeesFactory(overrides) {\n        return this._readable._getFeesFactory(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getFees} */\n    getFees(overrides) {\n        return this._readable.getFees(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getLQTYStake} */\n    getLQTYStake(address, overrides) {\n        return this._readable.getLQTYStake(address, overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    getTotalStakedLQTY(overrides) {\n        return this._readable.getTotalStakedLQTY(overrides);\n    }\n    /** {@inheritDoc @fluidity/lib-base#ReadableLiquity.getFrontendStatus} */\n    getFrontendStatus(address, overrides) {\n        return this._readable.getFrontendStatus(address, overrides);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.openTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    openTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        return this.send\n            .openTrove(params, maxBorrowingRateOrOptionalParams, overrides)\n            .then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.closeTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    closeTrove(overrides) {\n        return this.send.closeTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.adjustTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides) {\n        return this.send\n            .adjustTrove(params, maxBorrowingRateOrOptionalParams, overrides)\n            .then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.depositCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    depositCollateral(amount, overrides) {\n        return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.withdrawCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    withdrawCollateral(amount, overrides) {\n        return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.borrowLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.repayLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    repayLUSD(amount, overrides) {\n        return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this.send.setPrice(price, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.liquidate}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    liquidate(address, overrides) {\n        return this.send.liquidate(address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.liquidateUpTo}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    transferCollateralGainToTrove(overrides) {\n        return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.sendLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    sendLUSD(toAddress, amount, overrides) {\n        return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.sendLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    sendLQTY(toAddress, amount, overrides) {\n        return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.redeemLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.claimCollateralSurplus}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    claimCollateralSurplus(overrides) {\n        return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.stakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    stakeLQTY(amount, overrides) {\n        return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.unstakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    unstakeLQTY(amount, overrides) {\n        return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    withdrawGainsFromStaking(overrides) {\n        return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.registerFrontend}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    registerFrontend(kickbackRate, overrides) {\n        return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.approveUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    approveUniTokens(allowance, overrides) {\n        return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.stakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    stakeUniTokens(amount, overrides) {\n        return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.unstakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    unstakeUniTokens(amount, overrides) {\n        return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @fluidity/lib-base#TransactableLiquity.exitLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     * Throws {@link EthersTransactionCancelledError} if the transaction is cancelled or replaced.\n     */\n    exitLiquidityMining(overrides) {\n        return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n    }\n}\nexports.EthersLiquity = EthersLiquity;\nclass _EthersLiquityWithStore extends EthersLiquity {\n    constructor(readable) {\n        super(readable);\n        this.store = readable.store;\n    }\n    hasStore(store) {\n        return store === undefined || store === this.connection.useStore;\n    }\n}\n//# sourceMappingURL=EthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useLiquityReducer = void 0;\nconst react_1 = require(\"react\");\nconst equals_1 = require(\"../utils/equals\");\nconst useLiquityStore_1 = require(\"./useLiquityStore\");\nconst useLiquityReducer = (reduce, init) => {\n    const store = useLiquityStore_1.useLiquityStore();\n    const oldStore = react_1.useRef(store);\n    const state = react_1.useRef(init(store.state));\n    const [, rerender] = react_1.useReducer(() => ({}), {});\n    const dispatch = react_1.useCallback((action) => {\n        const newState = reduce(state.current, action);\n        if (!equals_1.equals(newState, state.current)) {\n            state.current = newState;\n            rerender();\n        }\n    }, [reduce]);\n    react_1.useEffect(() => store.subscribe(params => dispatch({ type: \"updateStore\", ...params })), [\n        store,\n        dispatch\n    ]);\n    if (oldStore.current !== store) {\n        state.current = init(store.state);\n        oldStore.current = store;\n    }\n    return [state.current, dispatch];\n};\nexports.useLiquityReducer = useLiquityReducer;\n//# sourceMappingURL=useLiquityReducer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useLiquitySelector = void 0;\nconst react_1 = require(\"react\");\nconst equals_1 = require(\"../utils/equals\");\nconst useLiquityStore_1 = require(\"./useLiquityStore\");\nconst useLiquitySelector = (select) => {\n    const store = useLiquityStore_1.useLiquityStore();\n    const [, rerender] = react_1.useReducer(() => ({}), {});\n    react_1.useEffect(() => store.subscribe(({ newState, oldState }) => {\n        if (!equals_1.equals(select(newState), select(oldState))) {\n            rerender();\n        }\n    }), [store, select]);\n    return select(store.state);\n};\nexports.useLiquitySelector = useLiquitySelector;\n//# sourceMappingURL=useLiquitySelector.js.map","import { NetworkConnector as NetworkConnectorCore } from '@web3-react/network-connector'\n\nexport class NetworkConnector extends NetworkConnectorCore {\n  pause() {\n    if (this.active) {\n      this.providers[this.currentChainId].stop()\n    }\n  }\n\n  resume() {\n    if (this.active) {\n      this.providers[this.currentChainId].start()\n    }\n  }\n}","//import { InjectedConnector } from './Injected'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from './Network'\n\nconst POLLING_INTERVAL = 10000\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [17, 444900]\n})\n\nexport const network = new NetworkConnector({\n  urls: { 444900: \"https://rpc1.bakerloo.autonity.network:8545\"  }, //TODO: Use a env variable\n  pollingInterval: POLLING_INTERVAL\n})\n","import { useState, useEffect } from 'react'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\n\nimport { injected } from '../connectors'\n\nexport function useWeb3React() {\n  const context = useWeb3ReactCore()\n  const contextNetwork = useWeb3ReactCore('NETWORK')\n\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleNetworkChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(() => {})\n      }\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(() => {})\n        }\n      }\n\n      ethereum.on('networkChanged', handleNetworkChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        ethereum.removeListener('networkChanged', handleNetworkChanged)\n        ethereum.removeListener('accountsChanged', handleAccountsChanged)\n      }\n    }\n\n    return () => {}\n  }, [active, error, suppress, activate])\n}\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\n\nexport default function Web3ReactManager({ children }) {\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React('NETWORK')\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  // TODO think about not doing this at all\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n        <p>{'unknown-error: ' + networkError}</p>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <p>{'Spinner'}</p>\n    ) : null\n  }\n\n  return children\n}","import { AddressZero } from \"@ethersproject/constants\";\nimport { isAddress, getAddress } from \"@ethersproject/address\";\n\nexport type LiquityFrontendConfig = {\n  frontendTag: string;\n  infuraApiKey?: string;\n  testnetOnly?: boolean;\n};\n\nconst defaultConfig: LiquityFrontendConfig = {\n  frontendTag: AddressZero\n};\n\nfunction hasKey<K extends string>(o: object, k: K): o is Record<K, unknown> {\n  return k in o;\n}\n\nconst parseConfig = (json: unknown): LiquityFrontendConfig => {\n  const config = { ...defaultConfig };\n\n  if (typeof json === \"object\" && json !== null) {\n    if (hasKey(json, \"frontendTag\") && json.frontendTag !== \"\") {\n      const { frontendTag } = json;\n\n      if (typeof frontendTag === \"string\" && isAddress(frontendTag)) {\n        config.frontendTag = getAddress(frontendTag);\n      } else {\n        console.error(\"Malformed frontendTag:\");\n        console.log(frontendTag);\n      }\n    }\n\n    if (hasKey(json, \"infuraApiKey\") && json.infuraApiKey !== \"\") {\n      const { infuraApiKey } = json;\n\n      if (typeof infuraApiKey === \"string\") {\n        config.infuraApiKey = infuraApiKey;\n      } else {\n        console.error(\"Malformed infuraApiKey:\");\n        console.log(infuraApiKey);\n      }\n    }\n\n    if (hasKey(json, \"testnetOnly\")) {\n      const { testnetOnly } = json;\n\n      if (typeof testnetOnly === \"boolean\") {\n        config.testnetOnly = testnetOnly;\n      } else {\n        console.error(\"Malformed testnetOnly:\");\n        console.log(testnetOnly);\n      }\n    }\n  } else {\n    console.error(\"Malformed config:\");\n    console.log(json);\n  }\n\n  return config;\n};\n\nlet configPromise: Promise<LiquityFrontendConfig> | undefined = undefined;\n\nconst fetchConfig = async () => {\n  try {\n    const response = await fetch(\"config.json\");\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch config.json (status ${response.status})`);\n    }\n\n    return parseConfig(await response.json());\n  } catch (err) {\n    console.error(err);\n    return { ...defaultConfig };\n  }\n};\n\nexport const getConfig = (): Promise<LiquityFrontendConfig> => {\n  if (!configPromise) {\n    configPromise = fetchConfig();\n  }\n\n  return configPromise;\n};\n","import React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { useWeb3React } from \"./index\";\nimport { Network, Networkish, getNetwork as getEthersNetwork } from \"@ethersproject/networks\";\n\nimport { isBatchedProvider, isWebSocketAugmentedProvider } from \"@fluidity/providers\";\nimport {\n  BlockPolledLiquityStore,\n  EthersLiquity,\n  EthersLiquityWithStore,\n  _connectByChainId\n} from \"@fluidity/lib-ethers\";\n\nimport { LiquityFrontendConfig, getConfig } from \"../config\";\n\ntype LiquityContextValue = {\n  config: LiquityFrontendConfig;\n  account: string | null | undefined;\n  provider: Provider;\n  liquity: EthersLiquityWithStore<BlockPolledLiquityStore>;\n};\n\nconst LiquityContext = createContext<LiquityContextValue | undefined>(undefined);\n\ntype LiquityProviderProps = {\n  loader?: React.ReactNode;\n  unsupportedNetworkFallback?: (chainId: number) => React.ReactNode;\n  unsupportedMainnetFallback?: React.ReactNode;\n};\n\nconst wsParams = (network: string, infuraApiKey: string): [string, string] => [\n  `wss://${network === \"homestead\" ? \"mainnet\" : network}.infura.io/ws/v3/${infuraApiKey}`,\n  network\n];\n\nconst projectNetworks: { [name: string]: Network } = {\n    bakerloo: { chainId: 444900, name: \"bakerloo\" }\n}\n\nconst getNetwork = (network: Networkish): Network => {\n    if (typeof(network) === \"number\") {\n        const standard = Object.values(projectNetworks).find((net: Network) => net.chainId === network);\n        if (standard) {\n            return {\n                name: standard.name,\n                chainId: standard.chainId,\n                ensAddress: (standard.ensAddress || undefined),\n                _defaultProvider: (standard._defaultProvider || undefined)\n            }\n        }\n    }\n    if (typeof(network) === \"string\") {\n        const standard = projectNetworks[network];\n        if (standard) {\n            return {\n                name: standard.name,\n                chainId: standard.chainId,\n                ensAddress: (standard.ensAddress || undefined),\n                _defaultProvider: (standard._defaultProvider || undefined)\n            }\n        }\n    }\n\n    return getEthersNetwork(network);\n}\n\n// NOTE: Able / disable ETH networks\n// const infuraSupportedNetworks = [\"homestead\", \"kovan\", \"rinkeby\", \"ropsten\", \"goerli\"];\nconst infuraSupportedNetworks = [\"\"];\nconst webSocketSupportedNetworks = [\"bakerloo\"];\n\nexport const isWalletConnected = (account: string | null | undefined) => account && account !== \"0x0000000000000000000000000000000000000000\"\n\nexport const LiquityProvider: React.FC<LiquityProviderProps> = ({\n  children,\n  loader,\n  unsupportedNetworkFallback,\n  unsupportedMainnetFallback\n}) => {\n  const { library: provider, account, chainId } = useWeb3React();\n  const [config, setConfig] = useState<LiquityFrontendConfig>();\n\n  console.log({provider, account, chainId});\n\n  const connection = useMemo(() => {\n    if (config && provider && chainId) {\n      let tempAccount = account || '0x0000000000000000000000000000000000000000'\n      try {\n        return _connectByChainId(provider, provider.getSigner(tempAccount), chainId, {\n          userAddress: tempAccount,\n          frontendTag: config.frontendTag,\n          useStore: \"blockPolled\"\n        });\n      } catch {}\n    }\n  }, [config, provider, account, chainId]);\n\n  useEffect(() => {\n    getConfig().then(setConfig);\n  }, []);\n\n  useEffect(() => {\n    if (config && connection) {\n      const { provider, chainId } = connection;\n\n      if (isBatchedProvider(provider) && provider.chainId !== chainId) {\n        provider.chainId = chainId;\n      }\n\n      if (isWebSocketAugmentedProvider(provider)) {\n        const network = getNetwork(chainId);\n\n        if (\n          network.name &&\n          infuraSupportedNetworks.includes(network.name) &&\n          config.infuraApiKey\n        ) {\n          provider.openWebSocket(...wsParams(network.name, config.infuraApiKey));\n        } else if (webSocketSupportedNetworks.includes(network.name)) {\n          provider.openWebSocket(`wss://rpc1.bakerloo.autonity.network:8546`, chainId);\n        } else if (connection._isDev) {\n          provider.openWebSocket(`ws://${window.location.hostname}:8546`, chainId);\n        }\n\n        return () => {\n          provider.closeWebSocket();\n        };\n      }\n    }\n  }, [config, connection]);\n\n  if (!config || !provider || !chainId) {\n    return <>{loader}</>;\n  }\n\n  if (config.testnetOnly && chainId === 1) {\n    return <>{unsupportedMainnetFallback}</>;\n  }\n\n  if (!connection) {\n    return unsupportedNetworkFallback ? <>{unsupportedNetworkFallback(chainId)}</> : null;\n  }\n\n  const liquity = EthersLiquity._from(connection);\n  liquity.store.logging = true;\n\n  return (\n    <LiquityContext.Provider value={{ config, account, provider, liquity }}>\n      {children}\n    </LiquityContext.Provider>\n  );\n};\n\nexport const useLiquity = () => {\n  const liquityContext = useContext(LiquityContext);\n\n  if (!liquityContext) {\n    throw new Error(\"You must provide a LiquityContext via LiquityProvider\");\n  }\n\n  return liquityContext;\n};\n","import React from \"react\";\nimport { library, IconName, IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCircleNotch,\n  faCheckCircle,\n  faExclamationTriangle,\n  faInfoCircle,\n  faTimes,\n  faTrash,\n  faChartLine,\n  faRedo,\n  faHistory,\n  faChevronLeft,\n  faChevronRight,\n  faUserCircle,\n  faWallet,\n  faExternalLinkAlt,\n  faClipboardCheck,\n  faCog,\n  faCheck,\n  faPlug,\n  faExclamationCircle,\n  faAngleUp,\n  faAngleDoubleUp,\n  faAngleDown,\n  faAngleDoubleDown,\n  faPen,\n  faHandPaper,\n  faHeartbeat,\n  faBars\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faClipboard, faQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon, FontAwesomeIconProps } from \"@fortawesome/react-fontawesome\";\n\nlibrary.add(\n  faCircleNotch,\n  faCheck,\n  faCheckCircle,\n  faExclamationTriangle,\n  faInfoCircle,\n  faTimes,\n  faTrash,\n  faChartLine,\n  faRedo,\n  faHistory,\n  faChevronLeft,\n  faChevronRight,\n  faClipboard,\n  faClipboardCheck,\n  faUserCircle,\n  faWallet,\n  faExternalLinkAlt,\n  faCog,\n  faPlug,\n  faExclamationCircle,\n  faAngleUp,\n  faAngleDoubleUp,\n  faAngleDown,\n  faAngleDoubleDown,\n  faPen,\n  faHandPaper,\n  faHeartbeat,\n  faBars,\n  faQuestionCircle\n);\n\nconst getIcon = (name: IconName): IconProp => {\n  switch (name) {\n    case \"clipboard\":\n      return [\"far\", \"clipboard\"];\n    case \"question-circle\":\n      return [\"far\", \"question-circle\"];\n    default:\n      return name;\n  }\n};\n\nexport type IconProps = Pick<FontAwesomeIconProps, \"style\" | \"size\" | \"color\" | \"spin\"> & {\n  name: IconName;\n};\n\nexport const Icon: React.FC<IconProps> = ({ name, style, ...rest }) => (\n  <FontAwesomeIcon style={style} icon={getIcon(name)} {...rest} />\n);\n","import React, { useState, useRef } from \"react\";\nimport { VirtualElement } from \"@popperjs/core\";\nimport { usePopper } from \"react-popper\";\nimport { Card } from \"theme-ui\";\n\nexport type Hoverable = {\n  onMouseOver: () => void;\n  onMouseOut: () => void;\n  ref: (instance: Element | VirtualElement | null) => void;\n};\n\nexport type TooltipProps<C> = {\n  children: C;\n  message: string;\n  placement?: \"top\" | \"bottom\" | \"left\" | \"right\";\n};\n\nexport function Tooltip<C extends React.ReactElement<Hoverable>>({\n  children,\n  message,\n  placement = \"top\"\n}: TooltipProps<C>) {\n  const event = useRef<\"over\" | \"out\">();\n  const [show, setShow] = useState(false);\n  const [referenceElement, setReferenceElement] = useState<Element | VirtualElement | null>();\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>();\n\n  const { styles, attributes } = usePopper(referenceElement, popperElement, { placement });\n\n  return (\n    <>\n      {React.cloneElement(React.Children.only<C>(children), {\n        // Use a debounced onMouseOver/onMouseOut instead of onMouseEnter/onMouseLeave to\n        // work around https://github.com/facebook/react/issues/10109\n\n        onMouseOver: () => {\n          event.current = \"over\";\n\n          if (!show) {\n            setShow(true);\n          }\n        },\n\n        onMouseOut: () => {\n          event.current = \"out\";\n\n          setTimeout(() => {\n            if (event.current === \"out\") {\n              setShow(false);\n            }\n          }, 0);\n        },\n\n        ref: setReferenceElement\n      })}\n\n      {show && (\n        <Card variant=\"tooltip\" ref={setPopperElement} style={styles.popper} {...attributes.popper}>\n          {message}\n        </Card>\n      )}\n    </>\n  );\n}\n","import React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { Flex, Text, Box } from \"theme-ui\";\nimport { Provider, TransactionResponse, TransactionReceipt } from \"@ethersproject/abstract-provider\";\nimport { hexDataSlice, hexDataLength } from \"@ethersproject/bytes\";\nimport { defaultAbiCoder } from \"@ethersproject/abi\";\n\nimport { buildStyles, CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport { EthersTransactionOverrides, EthersTransactionCancelledError } from \"@fluidity/lib-ethers\";\nimport { SentLiquityTransaction, LiquityReceipt } from \"@fluidity/lib-base\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Icon } from \"./Icon\";\nimport { Tooltip, TooltipProps, Hoverable } from \"./Tooltip\";\n\nconst strokeWidth = 10;\n\nconst circularProgressbarStyle = {\n  strokeLinecap: \"butt\",\n  pathColor: \"white\",\n  trailColor: \"rgba(255, 255, 255, 0.33)\"\n};\n\nconst slowProgress = {\n  strokeWidth,\n  styles: buildStyles({\n    ...circularProgressbarStyle,\n    pathTransitionDuration: 30\n  })\n};\n\nconst fastProgress = {\n  strokeWidth,\n  styles: buildStyles({\n    ...circularProgressbarStyle,\n    pathTransitionDuration: 0.75\n  })\n};\n\ntype TransactionIdle = {\n  type: \"idle\";\n};\n\ntype TransactionFailed = {\n  type: \"failed\";\n  id: string;\n  error: Error;\n};\n\ntype TransactionWaitingForApproval = {\n  type: \"waitingForApproval\";\n  id: string;\n};\n\ntype TransactionCancelled = {\n  type: \"cancelled\";\n  id: string;\n};\n\ntype TransactionWaitingForConfirmations = {\n  type: \"waitingForConfirmation\";\n  id: string;\n  tx: SentTransaction;\n};\n\ntype TransactionConfirmed = {\n  type: \"confirmed\";\n  id: string;\n};\n\ntype TransactionConfirmedOneShot = {\n  type: \"confirmedOneShot\";\n  id: string;\n};\n\ntype TransactionState =\n  | TransactionIdle\n  | TransactionFailed\n  | TransactionWaitingForApproval\n  | TransactionCancelled\n  | TransactionWaitingForConfirmations\n  | TransactionConfirmed\n  | TransactionConfirmedOneShot;\n\nconst TransactionContext = React.createContext<\n  [TransactionState, (state: TransactionState) => void] | undefined\n>(undefined);\n\nexport const TransactionProvider: React.FC = ({ children }) => {\n  const transactionState = useState<TransactionState>({ type: \"idle\" });\n  return (\n    <TransactionContext.Provider value={transactionState}>{children}</TransactionContext.Provider>\n  );\n};\n\nconst useTransactionState = () => {\n  const transactionState = useContext(TransactionContext);\n\n  if (!transactionState) {\n    throw new Error(\"You must provide a TransactionContext via TransactionProvider\");\n  }\n\n  return transactionState;\n};\n\nexport const useMyTransactionState = (myId: string | RegExp): TransactionState => {\n  const [transactionState] = useTransactionState();\n\n  return transactionState.type !== \"idle\" &&\n    (typeof myId === \"string\" ? transactionState.id === myId : transactionState.id.match(myId))\n    ? transactionState\n    : { type: \"idle\" };\n};\n\nconst hasMessage = (error: unknown): error is { message: string } =>\n  typeof error === \"object\" &&\n  error !== null &&\n  \"message\" in error &&\n  typeof (error as { message: unknown }).message === \"string\";\n\ntype ButtonlikeProps = {\n  disabled?: boolean;\n  variant?: string;\n  onClick?: () => void;\n};\n\ntype SentTransaction = SentLiquityTransaction<\n  TransactionResponse,\n  LiquityReceipt<TransactionReceipt>\n>;\n\nexport type TransactionFunction = (\n  overrides?: EthersTransactionOverrides\n) => Promise<SentTransaction>;\n\ntype TransactionProps<C> = {\n  id: string;\n  tooltip?: string;\n  tooltipPlacement?: TooltipProps<C>[\"placement\"];\n  showFailure?: \"asTooltip\" | \"asChildText\";\n  requires?: readonly (readonly [boolean, string])[];\n  send: TransactionFunction;\n  children: C;\n};\n\nexport const useTransactionFunction = (\n  id: string,\n  send: TransactionFunction\n): [sendTransaction: () => Promise<void>, transactionState: TransactionState] => {\n  const [transactionState, setTransactionState] = useTransactionState();\n\n  const sendTransaction = useCallback(async () => {\n    setTransactionState({ type: \"waitingForApproval\", id });\n\n    try {\n      const tx = await send();\n\n      setTransactionState({\n        type: \"waitingForConfirmation\",\n        id,\n        tx\n      });\n    } catch (error) {\n      if (hasMessage(error) && error.message.includes(\"User denied transaction signature\")) {\n        setTransactionState({ type: \"cancelled\", id });\n      } else {\n        console.error(error);\n\n        setTransactionState({\n          type: \"failed\",\n          id,\n          error: new Error(\"Failed to send transaction (try again)\")\n        });\n      }\n    }\n  }, [send, id, setTransactionState]);\n\n  return [sendTransaction, transactionState];\n};\n\nexport function Transaction<C extends React.ReactElement<ButtonlikeProps & Hoverable>>({\n  id,\n  tooltip,\n  tooltipPlacement,\n  showFailure,\n  requires,\n  send,\n  children\n}: TransactionProps<C>) {\n  const [sendTransaction, transactionState] = useTransactionFunction(id, send);\n  const trigger = React.Children.only<C>(children);\n\n  const failureReasons = (requires || [])\n    .filter(([requirement]) => !requirement)\n    .map(([, reason]) => reason);\n\n  if (\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\"\n  ) {\n    failureReasons.push(\"You must wait for confirmation\");\n  }\n\n  showFailure =\n    failureReasons.length > 0 ? showFailure ?? (tooltip ? \"asTooltip\" : \"asChildText\") : undefined;\n\n  const clonedTrigger =\n    showFailure === \"asChildText\"\n      ? React.cloneElement(\n          trigger,\n          {\n            disabled: true,\n            variant: \"danger\"\n          },\n          failureReasons[0]\n        )\n      : showFailure === \"asTooltip\"\n      ? React.cloneElement(trigger, { disabled: true })\n      : React.cloneElement(trigger, { onClick: sendTransaction });\n\n  if (showFailure === \"asTooltip\") {\n    tooltip = failureReasons[0];\n  }\n\n  return tooltip ? (\n    <>\n      <Tooltip message={tooltip} placement={tooltipPlacement || \"right\"}>\n        {clonedTrigger}\n      </Tooltip>\n    </>\n  ) : (\n    clonedTrigger\n  );\n}\n\n// Doesn't work on Kovan:\n// https://github.com/MetaMask/metamask-extension/issues/5579\nconst tryToGetRevertReason = async (provider: Provider, tx: TransactionReceipt) => {\n  try {\n    const result = await provider.call(tx, tx.blockNumber);\n\n    if (hexDataLength(result) % 32 === 4 && hexDataSlice(result, 0, 4) === \"0x08c379a0\") {\n      return (defaultAbiCoder.decode([\"string\"], hexDataSlice(result, 4)) as [string])[0];\n    }\n  } catch {\n    return undefined;\n  }\n};\n\nconst Donut = React.memo(\n  CircularProgressbarWithChildren,\n  ({ value: prev }, { value: next }) => prev === next\n);\n\ntype TransactionProgressDonutProps = {\n  state: TransactionState[\"type\"];\n};\n\nconst TransactionProgressDonut: React.FC<TransactionProgressDonutProps> = ({ state }) => {\n  const [value, setValue] = useState(0);\n  const maxValue = 1;\n\n  useEffect(() => {\n    if (state === \"confirmed\") {\n      setTimeout(() => setValue(maxValue), 40);\n    } else {\n      setTimeout(() => setValue(maxValue * 0.67), 20);\n    }\n  }, [state]);\n\n  return state === \"confirmed\" ? (\n    <Donut {...{ value, maxValue, ...fastProgress }}>\n      <Icon name=\"check\" color=\"white\" size=\"lg\" />\n    </Donut>\n  ) : state === \"failed\" || state === \"cancelled\" ? (\n    <Donut value={0} {...{ maxValue, ...fastProgress }}>\n      <Icon name=\"times\" color=\"white\" size=\"lg\" />\n    </Donut>\n  ) : (\n    <Donut {...{ value, maxValue, ...slowProgress }}>\n      <Icon name=\"cog\" color=\"white\" size=\"lg\" spin />\n    </Donut>\n  );\n};\n\nexport const TransactionMonitor: React.FC = () => {\n  const { provider } = useLiquity();\n  const [transactionState, setTransactionState] = useTransactionState();\n\n  const id = transactionState.type !== \"idle\" ? transactionState.id : undefined;\n  const tx = transactionState.type === \"waitingForConfirmation\" ? transactionState.tx : undefined;\n\n  useEffect(() => {\n    if (id && tx) {\n      let cancelled = false;\n      let finished = false;\n\n      const txHash = tx.rawSentTransaction.hash;\n\n      const waitForConfirmation = async () => {\n        try {\n          const receipt = await tx.waitForReceipt();\n\n          if (cancelled) {\n            return;\n          }\n\n          const { confirmations } = receipt.rawReceipt;\n          const blockNumber = receipt.rawReceipt.blockNumber + confirmations - 1;\n          console.log(`Block #${blockNumber} ${confirmations}-confirms tx ${txHash}`);\n          console.log(`Finish monitoring tx ${txHash}`);\n          finished = true;\n\n          if (receipt.status === \"succeeded\") {\n            console.log(`${receipt}`);\n\n            setTransactionState({\n              type: \"confirmedOneShot\",\n              id\n            });\n          } else {\n            const reason = await tryToGetRevertReason(provider, receipt.rawReceipt);\n\n            if (cancelled) {\n              return;\n            }\n\n            console.error(`Tx ${txHash} failed`);\n            if (reason) {\n              console.error(`Revert reason: ${reason}`);\n            }\n\n            setTransactionState({\n              type: \"failed\",\n              id,\n              error: new Error(reason ? `Reverted: ${reason}` : \"Failed\")\n            });\n          }\n        } catch (rawError) {\n          if (cancelled) {\n            return;\n          }\n\n          finished = true;\n\n          if (rawError instanceof EthersTransactionCancelledError) {\n            console.log(`Cancelled tx ${txHash}`);\n            setTransactionState({ type: \"cancelled\", id });\n          } else {\n            console.error(`Failed to get receipt for tx ${txHash}`);\n            console.error(rawError);\n\n            setTransactionState({\n              type: \"failed\",\n              id,\n              error: new Error(\"Failed\")\n            });\n          }\n        }\n      };\n\n      console.log(`Start monitoring tx ${txHash}`);\n      waitForConfirmation();\n\n      return () => {\n        if (!finished) {\n          setTransactionState({ type: \"idle\" });\n          console.log(`Cancel monitoring tx ${txHash}`);\n          cancelled = true;\n        }\n      };\n    }\n  }, [provider, id, tx, setTransactionState]);\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\" && id) {\n      // hack: the txn confirmed state lasts 5 seconds which blocks other states, review with Dani\n      setTransactionState({ type: \"confirmed\", id });\n    } else if (\n      transactionState.type === \"confirmed\" ||\n      transactionState.type === \"failed\" ||\n      transactionState.type === \"cancelled\"\n    ) {\n      let cancelled = false;\n\n      setTimeout(() => {\n        if (!cancelled) {\n          setTransactionState({ type: \"idle\" });\n        }\n      }, 5000);\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [transactionState.type, setTransactionState, id]);\n\n  if (transactionState.type === \"idle\" || transactionState.type === \"waitingForApproval\") {\n    return null;\n  }\n\n  return (\n    <Flex\n      sx={{\n        alignItems: \"center\",\n        bg:\n          transactionState.type === \"confirmed\"\n            ? \"success\"\n            : transactionState.type === \"cancelled\"\n            ? \"warning\"\n            : transactionState.type === \"failed\"\n            ? \"danger\"\n            : \"primary\",\n        p: 3,\n        pl: 4,\n        position: \"fixed\",\n        width: \"100vw\",\n        bottom: 0,\n        overflow: \"hidden\"\n      }}\n    >\n      <Box sx={{ mr: 3, width: \"40px\", height: \"40px\" }}>\n        <TransactionProgressDonut state={transactionState.type} />\n      </Box>\n\n      <Text sx={{ fontSize: 3, color: \"white\" }}>\n        {transactionState.type === \"waitingForConfirmation\"\n          ? \"Waiting for confirmation\"\n          : transactionState.type === \"cancelled\"\n          ? \"Cancelled\"\n          : transactionState.type === \"failed\"\n          ? transactionState.error.message\n          : \"Confirmed\"}\n      </Text>\n    </Flex>\n  );\n};\n","import { Theme, ThemeUIStyleObject } from \"theme-ui\";\n\nconst baseColors = {\n    blue: \"#6378EF\",\n    purple: \"#723FC6\",\n    cyan: \"#17BEBB\",\n    green: \"#5beab7\",\n    yellow: \"#FFC145\",\n    red: \"#FF6B6C\",\n    lightRed: \"#FF6B6C\"\n};\n\nconst colors = {\n    primary: baseColors.blue,\n    secondary: baseColors.purple,\n    accent: baseColors.blue,\n\n    success: baseColors.green,\n    warning: baseColors.yellow,\n    danger: baseColors.red,\n    dangerHover: baseColors.lightRed,\n    info: baseColors.blue,\n    invalid: \"pink\",\n\n    text: \"#293147\",\n    background: \"#F8F8F8\",\n    muted: \"#eaebed\"\n};\n\nconst badge: ThemeUIStyleObject = {\n    border: 0,\n    borderRadius: 16,\n    p: 1,\n    px: 2,\n    fontSize: 1,\n    fontWeight: \"body\"\n};\n\nconst buttonBase: ThemeUIStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n\n    \":enabled\": { cursor: \"pointer\" }\n};\n\nconst button: ThemeUIStyleObject = {\n    ...buttonBase,\n\n    px: \"32px\",\n    py: \"12px\",\n\n    color: \"white\",\n    border: 1,\n    borderRadius: 16,\n\n    fontWeight: \"bold\",\n\n    \":disabled\": {\n        opacity: 0.5\n    }\n};\n\nconst buttonOutline = (color: string, hoverColor: string): ThemeUIStyleObject => ({\n    color,\n    borderColor: color,\n    background: \"none\",\n\n    \":enabled:hover\": {\n        color: \"background\",\n        bg: hoverColor,\n        borderColor: hoverColor\n    }\n});\n\nconst iconButton: ThemeUIStyleObject = {\n    ...buttonBase,\n\n    padding: 0,\n    width: \"40px\",\n    height: \"40px\",\n\n    background: \"none\",\n\n    \":disabled\": {\n        color: \"text\",\n        opacity: 0.25\n    }\n};\n\nconst cardHeadingFontSize = 18.7167;\n\nconst cardGapX = [0, 3, 4];\nconst cardGapY = 3;\n\nconst card: ThemeUIStyleObject = {\n    position: \"relative\",\n    mt: cardGapY,\n    mb: cardGapY,\n    borderColor: \"background\",\n    borderRadius: 16,\n    boxShadow: \"0px 4px 8px #723fc61a\"\n};\n\nconst infoCard: ThemeUIStyleObject = {\n    ...card,\n\n    padding: 3,\n    boxShadow: \"0px 4px 5px #F2F4FF\",\n    // backgroundColor: \"rgba(3, 216, 195, 0.03)\",\n    backgroundColor: \"#F2F4FF\",\n\n    h2: {\n        mb: 2,\n        fontSize: cardHeadingFontSize\n    }\n};\n\nconst formBase: ThemeUIStyleObject = {\n    display: \"block\",\n    width: \"auto\",\n    flexShrink: 0,\n    padding: 2,\n    fontSize: 3\n};\n\nconst formCell: ThemeUIStyleObject = {\n    ...formBase,\n\n    bg: \"background\",\n    border: 1,\n    borderColor: \"muted\",\n    borderRadius: 16,\n    // boxShadow: [1, 2]\n};\n\nconst overlay: ThemeUIStyleObject = {\n    position: \"absolute\",\n\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\n\nconst modalOverlay: ThemeUIStyleObject = {\n    position: \"fixed\",\n\n    left: 0,\n    top: 0,\n    // width: \"100vw\",\n    height: \"100vh\"\n};\n\nconst theme: Theme = {\n    breakpoints: [\"48em\", \"52em\", \"64em\"],\n\n    space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n\n    fonts: {\n        body: \"Visby CF\",\n        heading: \"inherit\",\n        monospace: \"Menlo, monospace\"\n    },\n\n    fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n\n    fontWeights: {\n        body: 400,\n        heading: 600,\n\n        light: 200,\n        medium: 400,\n        bold: 600\n    },\n\n    lineHeights: {\n        body: 1.5,\n        heading: 1.25\n    },\n\n    colors,\n\n    borders: [0, \"1px solid\", \"2px solid\"],\n\n    shadows: [\"0\", \"0px 4px 8px rgba(41, 49, 71, 0.1)\", \"0px 8px 16px rgba(41, 49, 71, 0.1)\"],\n\n    text: {\n        address: {\n            fontFamily: \"monospace\",\n            fontSize: 1\n        }\n    },\n\n    badges: {\n        muted: {\n            ...badge,\n\n            backgroundColor: \"muted\",\n            color: \"text\",\n        },\n\n        colors: {\n            ...badge,\n\n            color: \"white\",\n            backgroundColor: \"#414c6b\",\n            background: \"linear-gradient(135deg, #6378EF 0%, #723FC6 85%)\",\n        },\n\n        outline: {\n            ...badge,\n\n            border: 2,\n            color: \"accent\",\n            backgroundColor: \"transparent\",\n\n        }\n    },\n\n    buttons: {\n        primary: {\n            ...button,\n\n            bg: \"primary\",\n            borderColor: \"primary\",\n\n            \":enabled:hover\": {\n                bg: \"secondary\",\n                borderColor: \"secondary\"\n            }\n        },\n\n        outline: {\n            ...button,\n            ...buttonOutline(\"primary\", \"secondary\")\n        },\n\n        outlineAccent: {\n            ...button,\n            ...buttonOutline(\"accent\", \"secondary\"),\n        },\n\n        cancel: {\n            ...button,\n            ...buttonOutline(\"text\", \"text\"),\n\n            opacity: 0.8\n        },\n\n        danger: {\n            ...button,\n\n            bg: \"danger\",\n            borderColor: \"danger\",\n\n            \":enabled:hover\": {\n                bg: \"dangerHover\",\n                borderColor: \"dangerHover\"\n            }\n        },\n\n        token: {\n            ...button,\n            ...buttonOutline(\"accent\", \"accent\")\n        },\n\n        icon: {\n            ...iconButton,\n            color: \"primary\",\n            \":enabled:hover\": { color: \"accent\" }\n        },\n\n        dangerIcon: {\n            ...iconButton,\n            color: \"danger\",\n            \":enabled:hover\": { color: \"dangerHover\" }\n        },\n\n        titleIcon: {\n            ...iconButton,\n            color: \"text\",\n            \":enabled:hover\": { color: \"success\" }\n        },\n\n        colors: {\n            ...button,\n\n            color: \"white\",\n            backgroundColor: \"#414c6b\",\n            background: \"linear-gradient(135deg, #6378EF 0%, #723FC6 85%)\",\n            transition: \"border 200ms\",\n\n            \":enabled:hover\": {\n                border: 1,\n                borderColor: \"accent\"\n            },\n        }\n    },\n\n    cards: {\n        primary: {\n            ...card,\n\n            padding: 0,\n\n            borderColor: \"muted\",\n            bg: \"white\",\n\n            \"> h2\": {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n\n                height: \"56px\",\n\n                pl: 3,\n                py: 2,\n                pr: 2,\n\n                // bg: \"muted\",\n\n                fontSize: cardHeadingFontSize\n            }\n        },\n\n        info: {\n            ...infoCard,\n\n            border: 1,\n            color: \"accent\",\n\n            // display: [\"none\", \"block\"]\n        },\n\n        infoPopup: {\n            ...infoCard,\n\n            position: \"fixed\",\n            top: 0,\n            right: 3,\n            left: 3,\n            mt: \"72px\",\n            height: \"80%\",\n            overflowY: \"scroll\"\n        },\n\n        tooltip: {\n            padding: 2,\n\n            border: 1,\n            borderColor: \"muted\",\n            borderRadius: \"4px\",\n            bg: \"background\",\n            boxShadow: 1,\n\n            fontSize: 1,\n            color: \"text\",\n            fontWeight: \"body\",\n            zIndex: 1\n        },\n\n        tooltipInfo: {\n            padding: 2,\n            borderRadius: \"12px\",\n            boxShadow: 1,\n            bg: \"#F2F4FF\",\n            color: \"accent\",\n\n            zIndex: 1\n        },\n\n        userAccountModal: {\n            ...card,\n\n            mt: 0,\n            padding: 3,\n            bg: \"white\",\n            border: 2,\n        }\n    },\n\n    forms: {\n        label: {\n            ...formBase\n        },\n\n        unit: {\n            ...formCell,\n\n            textAlign: \"center\",\n            border: 0,\n            bg: \"none\",\n            // bg: \"muted\"\n        },\n\n        input: {\n            ...formCell,\n\n            flex: 1\n        },\n\n        editor: {}\n    },\n\n    layout: {\n        header: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"stretch\",\n\n            position: [\"fixed\", \"relative\"],\n            // width: \"100vw\",\n            top: 0,\n            zIndex: 1,\n\n            px: [2, \"12px\", \"12px\", 5],\n            py: [2, \"12px\", \"12px\"],\n\n            // ...headerGradient,\n            // boxShadow: [1, \"none\"]\n        },\n\n        footer: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n\n            mt: cardGapY,\n            px: 3,\n            minHeight: \"72px\",\n\n            bg: \"muted\"\n        },\n\n        main: {\n            width: \"100%\",\n            maxWidth: \"912px\",\n            mx: \"auto\",\n            mt: [\"40px\", \"20px\"],\n            mb: [\"40px\", \"40px\"],\n            px: cardGapX\n        },\n\n        columns: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyItems: \"center\",\n            p: [2, 0]\n        },\n\n        single: {\n            width: [\"100%\", \"56%\"]\n        },\n\n        left: {\n            pr: cardGapX,\n            width: [\"100%\", \"58%\"]\n        },\n\n        right: {\n            width: [\"100%\", \"42%\"]\n        },\n\n        actions: {\n            justifyContent: \"flex-end\",\n            mt: 2,\n\n            button: {\n                ml: 2\n            }\n        },\n\n        disabledOverlay: {\n            ...overlay,\n\n            bg: \"rgba(255, 255, 255, 0.5)\"\n        },\n\n        userOverlay: {\n            ...modalOverlay,\n\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            p: [2, 0],\n        },\n\n        blurFilter: {\n            position: \"fixed\",\n            left: 0,\n            top: 0,\n            zIndex: 1,\n            width: \"100%\",\n            height: \"100%\",\n            background: \"rgba(250, 250, 250, 0.6)\",\n            backdropFilter: \"blur(3px)\",\n            pointerEvents: \"none\"\n        },\n\n        modal: {\n            padding: 3,\n            width: [\"100%\", \"40em\"]\n        },\n\n        infoOverlay: {\n            ...modalOverlay,\n\n            display: [\"block\", \"none\"],\n\n            bg: \"rgba(255, 255, 255, 0.8)\"\n        },\n\n        infoMessage: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            m: 3,\n            alignItems: \"center\",\n            minWidth: \"128px\"\n        },\n\n        sidenav: {\n            display: [\"flex\", \"none\"],\n            flexDirection: \"column\",\n            p: 0,\n            m: 0,\n            borderColor: \"muted\",\n            mr: \"25vw\",\n            height: \"100%\",\n            // ...headerGradient\n        },\n\n    },\n\n    styles: {\n        root: {\n            fontFamily: \"body\",\n            lineHeight: \"body\",\n            fontWeight: \"body\",\n\n            height: \"100%\",\n\n            \"#root\": {\n                height: \"100%\"\n            }\n        },\n\n        a: {\n            color: \"primary\",\n            \":hover\": { color: \"accent\" },\n            textDecoration: \"none\",\n            fontWeight: \"bold\"\n        }\n    },\n\n    links: {\n        nav: {\n            px: 2,\n            py: 1,\n            fontWeight: \"medium\",\n            fontSize: 2,\n            textTransform: \"uppercase\",\n            letterSpacing: \"2px\",\n            width: [\"100%\", \"auto\"],\n            mt: [3, \"auto\"]\n        }\n    }\n};\n\nexport default theme;\n","import React from \"react\";\nimport { Box, Image } from \"theme-ui\";\n\ntype LiquityLogoProps = React.ComponentProps<typeof Box> & {\n    height?: number | string;\n};\n\nexport const LiquityLogo: React.FC<LiquityLogoProps> = ({ height, ...boxProps }) => (\n    <Box sx={{ lineHeight: 0 }} {...boxProps}>\n        <Image src=\"./opal-logo-h.png\" sx={{ height }} />\n    </Box>\n);\n","import { NavLink as RouterLink, NavLinkProps as RouterLinkProps } from \"react-router-dom\";\nimport { NavLink as ThemeUINavLink, NavLinkProps as ThemeUILinkProps } from \"theme-ui\";\n\ntype CombinedProps = ThemeUILinkProps & RouterLinkProps<{}>;\n\nconst ExactLink: React.FC<CombinedProps> = props => {\n  return <RouterLink exact {...props} />;\n};\n\nexport const Link: React.FC<CombinedProps> = props => {\n  return <ThemeUINavLink {...props} as={ExactLink} />;\n};\n","import { Flex, Box } from \"theme-ui\";\nimport { Link } from \"./Link\";\n\nexport const Nav: React.FC = () => {\n  return (\n    <Box as=\"nav\" sx={{ display: [\"none\", \"flex\"], alignItems: \"center\", justifyContent: \"center\", flex: 1 }}>\n      <Flex sx={{ justifyContent: \"flex-center\"}}>\n        <Link to=\"/\">Borrow</Link>\n        <Link to=\"/farm\">Farm</Link>\n        <Link to=\"/liquidate\">Liquidate</Link>\n      </Flex>\n    </Box>\n  );\n};\n","import React, { useState, useRef } from \"react\";\nimport { Box, Button, Container, Flex } from \"theme-ui\";\nimport { Icon } from \"./Icon\";\nimport { LiquityLogo } from \"./LiquityLogo\";\nimport { Link } from \"./Link\";\n\nconst logoHeight = \"32px\";\nexport const SideNav: React.FC = () => {\n    const [isVisible, setIsVisible] = useState(false);\n    const overlay = useRef<HTMLDivElement>(null);\n\n    const NavButton: React.FC = () => {\n        return (\n            <Button sx={{ display: [\"flex\", \"none\"] }} variant=\"icon\" onClick={() => setIsVisible(true)}>\n                <Icon name=\"bars\" size=\"lg\" />\n            </Button>\n        )\n    }\n\n    const NavModal: React.FC = () => {\n        return (\n            <Flex variant=\"layout.sidenav\">\n                <Button\n                    sx={{ position: \"fixed\", right: 0, m: 2, zIndex: 99}}\n                    variant=\"icon\"\n                    onClick={() => setIsVisible(false)}\n                >\n                    <Icon name=\"times\" size=\"2x\" />\n                </Button>\n                <LiquityLogo height={logoHeight} p={2} sx={{zIndex: 99}}/>\n                <Box as=\"nav\" sx={{ m: 3, mt: 1, p: 0, zIndex: 99}} onClick={() => setIsVisible(false)}>\n                    <Link to=\"/\">Dashboard</Link>\n                    <Link to=\"/farm\">Farm</Link>\n                    <Link to=\"/liquidate\">Liquidate</Link>\n                </Box>\n            </Flex>\n\n        )\n    }\n\n    return (\n        <>\n            <NavButton />\n            {isVisible &&\n                <Container\n                    variant=\"infoOverlay\"\n                    ref={overlay}\n                    onClick={e => {\n                        if (e.target === overlay.current) {\n                            setIsVisible(false);\n                        }\n                    }}\n                >\n                    <NavModal />\n                    <Container variant=\"blurFilter\"/>\n                </Container>\n            }\n        </>\n    );\n};\n","import { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { Text, Flex, Heading, Card, Button, Badge } from \"theme-ui\";\nimport { useLiquity } from \"../../hooks/LiquityContext\";\n\ntype tokenAddress = {\n    symbol: string,\n    address: string,\n}\n\nconst addToken = async (token: tokenAddress) => {\n    try {\n        (window as any).ethereum?.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address: token.address,\n                    symbol: token.symbol,\n                    decimals: 18,\n                },\n            },\n        })\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nconst ProtocolTokens: React.FC = () => {\n    const { liquity: { connection: { addresses } } } = useLiquity();\n\n    const tokens: tokenAddress[] = [\n        { symbol: \"LUSD\", address: addresses[\"lusdToken\"] },\n        { symbol: \"LQTY\", address: addresses[\"lqtyToken\"] }\n    ]\n\n    return (\n        <Flex sx={{ justifyContent: \"center\", flexDirection: \"column\", alignItems: \"centeer\", gap: 1}}>\n            <Flex sx={{ alignItems: \"center\", justifyContent: \"center\" }}>\n                {\n                    tokens.map((token) => (\n                        <Button\n                            variant=\"token\"\n                            onClick={() => { addToken(token) }}\n                            sx={{ py: 1, px: 2, mx: 2, fontSize: 1, border: 2 }}>\n                            {token.symbol}\n                        </Button>\n                    ))\n                }\n            </Flex>\n        </Flex>\n    )\n}\n\ntype tokenBalance = {\n    symbol: string,\n    balance: Decimal,\n}\n\nconst balanceSelector = ({ accountBalance, lusdBalance, lqtyBalance }: LiquityStoreState) => ({\n    accountBalance,\n    lusdBalance,\n    lqtyBalance\n});\n\nconst TokenBalances: React.FC = () => {\n    const { accountBalance, lusdBalance, lqtyBalance } = useLiquitySelector(balanceSelector);\n\n    const tokens: tokenBalance[] = [\n        { symbol: \"AUT\", balance: accountBalance },\n        { symbol: \"LUSD\", balance: lusdBalance },\n        { symbol: \"LQTY\", balance: lqtyBalance },\n    ];\n\n\n    return (\n        <>\n            <Flex sx={{\n                justifyContent: \"center\",\n                mt: 3,\n                mb: 1,\n                p: 2,\n                borderRadius: 16,\n                border: 1,\n                borderColor: \"muted\",\n                flexDirection: \"column\",\n            }}>\n                <Text sx={{ fontSize: 2 }}>Available</Text>\n                {\n                    tokens.map((token, i) => (\n                        <Flex key={i} sx={{ alignItems: \"center\", justifyContent: \"space-between\", my: 1 }}>\n                            <Text sx={{ fontSize: 2, fontWeight: \"bold\" }}>{token.symbol}</Text>\n                            <Text sx={{ fontSize: 2 }}>{token.balance.prettify()}</Text>\n                        </Flex>\n                    ))}\n            </Flex>\n        </>\n    )\n}\n\nconst AddressBadge: React.FC = () => {\n    const { account } = useLiquity();\n    return (\n        <Flex sx={{\n            justifyContent: \"center\",\n            mx: 3,\n            my: 3,\n        }}>\n            <Badge variant=\"outline\" sx={{\n                px: 3,\n                py: 2,\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n            }}>\n                <Text>\n                    {account}\n                </Text>\n            </Badge>\n        </Flex>\n\n    )\n}\n\nconst positionsSelector = ({ stabilityDeposit, lqtyStake }: LiquityStoreState) => ({\n    stabilityDeposit,\n    lqtyStake\n});\n\n\nconst AccountPositions: React.FC = () => {\n    const { stabilityDeposit, lqtyStake } = useLiquitySelector(positionsSelector);\n\n    return (\n        <Flex sx={{\n            justifyContent: \"center\",\n            mt: 3,\n            mb: 1,\n            p: 2,\n            borderRadius: 16,\n            border: 1,\n            borderColor: \"muted\",\n            flexDirection: \"column\",\n        }}>\n            <Text sx={{ fontSize: 2 }}>Staked</Text>\n            <Flex sx={{ alignItems: \"center\", justifyContent: \"space-between\", my: 1 }}>\n                <Text sx={{ fontSize: 2, fontWeight: \"bold\" }}>LUSD</Text>\n                <Text>{stabilityDeposit.currentLUSD.prettify()}</Text>\n            </Flex>\n            <Flex sx={{ alignItems: \"center\", justifyContent: \"space-between\", my: 1 }}>\n                <Text sx={{ fontSize: 2, fontWeight: \"bold\" }}>LQTY</Text>\n                <Text>{lqtyStake.stakedLQTY.prettify()}</Text>\n            </Flex>\n        </Flex>\n    )\n}\n\nexport const AccountInfo: React.FC = () => {\n\n    return (\n        <>\n            <Card variant=\"userAccountModal\" sx={{ justifyContent: \"center\", borderColor: \"muted\" }}>\n                <Heading sx={{ fontSize: 2 }}>Account</Heading>\n                <AddressBadge />\n                <ProtocolTokens />\n                <TokenBalances />\n                <AccountPositions />\n            </Card>\n        </>\n    );\n};\n\n\n","export const shortenAddress = (address: string) => address.substr(0, 6) + \"...\" + address.substr(-4);\n","import React from \"react\";\nimport Tippy, { TippyProps } from \"@tippyjs/react\";\nimport { Icon } from \"./Icon\";\nimport { FontAwesomeIconProps } from \"@fortawesome/react-fontawesome\";\n\nexport type InfoIconProps = Pick<TippyProps, \"placement\"> &\n  Pick<FontAwesomeIconProps, \"size\"> & {\n    tooltip: React.ReactNode;\n  };\n\nexport const InfoIcon: React.FC<InfoIconProps> = ({ placement = \"right\", tooltip, size = \"1x\" }) => {\n  return (\n    <Tippy interactive={true} placement={placement} content={tooltip} maxWidth=\"268px\">\n      <span>\n        &nbsp;\n        <Icon name=\"question-circle\" size={size} />\n      </span>\n    </Tippy>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Box, Heading, Flex, Button, Label, Input } from \"theme-ui\";\n\nimport { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Transaction } from \"./Transaction\";\nimport { InfoIcon } from \"./InfoIcon\";\n\nconst selectPrice = ({ price }: LiquityStoreState) => price;\n\nconst info = \"Only available when priceFeed is mocked for testing\";\n\nexport const PriceManager: React.FC = () => {\n    const {\n        liquity: {\n            send: liquity,\n            connection: { _priceFeedIsTestnet: canSetPrice }\n        }\n    } = useLiquity();\n\n    const price = useLiquitySelector(selectPrice);\n    const [editedPrice, setEditedPrice] = useState(price.toString(2));\n\n    useEffect(() => {\n        setEditedPrice(price.toString(2));\n    }, [price]);\n\n    return canSetPrice ? (\n        <Card sx={{\n            border: 1,\n            borderStyle: \"dashed\",\n            borderColor: \"accent\",\n            bg: \"#F2F4FF\",\n        }}>\n            <Flex sx={{ mt: 3, mx: 3, alignItems: \"center\" }}>\n                <Heading sx={{ fontSize: 2 }}>Price Manager</Heading>\n                <InfoIcon size=\"sm\" tooltip={<Card variant=\"tooltip\">\n                    {info}\n                </Card>} />\n            </Flex>\n\n            <Box sx={{ p: [2, 3] }}>\n                <Flex sx={{ alignItems: \"stretch\" }}>\n                    <Label>AUT</Label>\n                    <Label>=</Label>\n                    <Label variant=\"unit\">$</Label>\n\n                    <Input\n                        type={canSetPrice ? \"number\" : \"text\"}\n                        step=\"any\"\n                        value={editedPrice}\n                        onChange={e => setEditedPrice(e.target.value)}\n                        disabled={!canSetPrice}\n                    />\n\n                    <Flex sx={{ ml: 2, alignItems: \"center\" }}>\n                        <Transaction\n                            id=\"set-price\"\n                            tooltip=\"Set\"\n                            tooltipPlacement=\"bottom\"\n                            send={overrides => {\n                                if (!editedPrice) {\n                                    throw new Error(\"Invalid price\");\n                                }\n                                return liquity.setPrice(Decimal.from(editedPrice), overrides);\n                            }}\n                        >\n                            <Button variant=\"outlineAccent\">\n                                Set\n                            </Button>\n                        </Transaction>\n                    </Flex>\n                </Flex>\n            </Box>\n        </Card>\n    ) : (<></>);\n};\n","export const COIN = \"LUSD\";\nexport const GT = \"LQTY\";\nexport const LP = \"UNI LP\";\n// export const LP = \"ETH/LUSD LP\";\n","import React from \"react\";\nimport Tippy from \"@tippyjs/react\";\nimport 'tippy.js/animations/scale.css';\nimport { Card, Text } from \"theme-ui\";\n\ntype StatisticProps = {\n    name: React.ReactNode;\n    tooltip?: React.ReactNode;\n    variant?: string;\n};\n\nexport const BigStatistic: React.FC<StatisticProps> = ({ variant = \"info\", name, tooltip, children }) => {\n\n    return (\n        <Tippy delay={1000} interactive={true} placement=\"bottom\" animation=\"scale\" arrow={true} content={<Card variant=\"tooltipInfo\">{tooltip}</Card>} maxWidth=\"268px\">\n            <Card {...{ variant }}\n                sx={{\n                    m: 0,\n                    flex: [\"1 0 40%\", \"1 0 30%\"],\n                }}>\n                <Text sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                }}>{name}</Text>\n                <Text sx={{\n                    fontSize: \"x-large\",\n                    fontWeight: \"bold\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\"\n                }}>{children}</Text>\n            </Card>\n        </Tippy>\n    );\n};\n","import React, { ReactElement } from \"react\";\nimport { Box, Text } from \"theme-ui\";\nimport { Decimal, Percent, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { COIN, GT } from \"../strings\";\nimport { BigStatistic } from \"./BigStatistic\";\n\n// const GitHubCommit: React.FC<{ children?: string }> = ({ children }) =>\n//     children?.match(/[0-9a-f]{40}/) ? (\n//         <Link href={`https://github.com/goldmandao/fluidity/commit/${children}`}>{children.substr(0, 7)}</Link>\n//     ) : (\n//             <>unknown</>\n//         );\n\ntype Stat = {\n    name: string,\n    tooltip?: string,\n    body: ReactElement | string\n}\n\ntype ProtocolStatsProps = {\n    filterStats?: string[];\n}\n\nconst select = ({\n    numberOfTroves,\n    price,\n    total,\n    lusdInStabilityPool,\n    borrowingRate,\n    redemptionRate,\n    totalStakedLQTY,\n    accountBalance,\n    lusdBalance,\n    lqtyBalance\n}: LiquityStoreState) => ({\n    numberOfTroves,\n    price,\n    total,\n    lusdInStabilityPool,\n    borrowingRate,\n    redemptionRate,\n    totalStakedLQTY,\n    accountBalance,\n    lusdBalance,\n    lqtyBalance\n});\n\nconst ProtocolStats: React.FC<ProtocolStatsProps> = ({ filterStats }) => {\n\n    const {\n        numberOfTroves,\n        price,\n        lusdInStabilityPool,\n        total,\n        borrowingRate,\n        redemptionRate,\n        totalStakedLQTY,\n        accountBalance,\n        lusdBalance,\n        lqtyBalance,\n    } = useLiquitySelector(select);\n\n    const lusdInStabilityPoolPct =\n        total.debt.nonZero && new Percent(lusdInStabilityPool.div(total.debt));\n    const totalCollateralRatioPct = new Percent(total.collateralRatio(price));\n    const borrowingFeePct = new Percent(borrowingRate);\n    const redemptionFeePct = new Percent(redemptionRate);\n\n    // const showStat = (statSection: string): boolean => {\n    //     return filterStats ? filterStats.includes(statSection) : true;\n    // }\n\n    const statSelector = (stat: string): Stat => {\n        switch (stat) {\n            case \"borrow-fee\":\n                return {\n                    \"name\": \"Borrowing Fee\", \n                    \"tooltip\": \"The Borrowing Fee is a one-off fee charged as a percentage of the borrowed amount (in LUSD) and is part of a Trove's debt. The fee varies between 0.5% and 5% depending on LUSD redemption volumes.\",\n\n                    \"body\": borrowingFeePct.toString(2)\n                    }\n            case \"redeem-fee\":\n                return {\n                    \"name\": \"Redemption fee\",\n                    \"tooltip\": \"The Redemption Fee is a one-off fee charged as a percentage of the redeemed amount (in AUT). The fee varies from 0.5% depending on LUSD redemption volumes.\",\n                    \"body\": redemptionFeePct.toString(2)\n                }\n            case \"tvl\":\n                return {\n                    \"name\": \"TVL\",\n                    \"tooltip\": \"The Total Value Locked (TVL) is the total value of AUT locked as collateral in the system, given in AUT and USD.\",\n                    \"body\": <>{total.collateral.shorten()} <Text sx={{ fontSize: 2 }}>&nbsp;AUT</Text></>\n                }\n            case \"troves\":\n                return {\n                    \"name\": \"Opened Troves\",\n                    \"tooltip\": \"The total number of active Troves in the system.\",\n                    \"body\": Decimal.from(numberOfTroves).prettify(0)\n                }\n            case \"lusd-supply\":\n                return {\n                    \"name\": \"LUSD supply\",\n                    \"tooltip\": \"The total LUSD minted by the Liquity Protocol.\",\n                    \"body\": total.debt.shorten()\n                }\n            case \"lusd-sp\":\n                return {\n                    \"name\": \"LUSD in Stability Pool\",\n                    \"tooltip\": \"The total LUSD currently held in the Stability Pool, expressed as an amount and a fraction of the LUSD supply.\",\n                    \"body\": <>{lusdInStabilityPool.shorten()}<Text sx={{ fontSize: 1 }}>&nbsp;({lusdInStabilityPoolPct?.toString(1)})</Text></>\n                }\n            case \"staked-lqty\":\n                return {\n                    \"name\": \"Staked LQTY\",\n                    \"tooltip\": \"The total amount of LQTY that is staked for earning fee revenue.\",\n                    \"body\": totalStakedLQTY.shorten()\n                }\n            case \"tcr\":\n                return {\n                    \"name\": \"TCR\",\n                    \"tooltip\": \"The ratio of the Dollar value of the entire system collateral at the current AUT:USD price, to the entire system debt.\",\n                    \"body\": totalCollateralRatioPct.prettify()\n                }\n            case \"recovery\":\n                return {\n                    \"name\": \"Recovery Mode\",\n                    \"tooltip\": \"Recovery Mode is activated when the Total Collateral Ratio (TCR) falls below 150%. When active, your Trove can be liquidated if its collateral ratio is below the TCR. The maximum collateral you can lose from liquidation is capped at 110% of your Trove's debt. Operations are also restricted that would negatively impact the TCR.\",\n                    \"body\": <>{total.collateralRatioIsBelowCritical(price) ? <Box color=\"danger\">Yes</Box> : \"No\"}</>\n                }\n            case \"aut-balance\":\n                return {\n                    \"name\": \"AUT\",\n                    \"body\": accountBalance.prettify(4)\n                    }\n            case \"lusd-balance\":\n                return {\n                    \"name\": COIN,\n                    \"body\": lusdBalance.prettify()\n                }\n            case \"lqty-balance\":\n                return {\n                    \"name\": GT,\n                    \"body\": lqtyBalance.prettify()\n                }\n            case \"aut-price\":\n                return {\n                    \"name\": \"AUT\",\n                    \"body\": <>{price.prettify()}<Text sx={{ fontSize: 2 }}>&nbsp;USD</Text></>\n                    }\n            case \"lqty-price\":\n                return {\n                    \"name\": \"LQTY\",\n                    \"body\": <>80.0<Text sx={{ fontSize: 2 }}>&nbsp;USD</Text></>\n                }\n            default:\n                return { \"name\": \"Stat\", \"body\": <></> };\n        }\n    }\n\n    return (\n        <>\n            {\n                filterStats?.map((statFilter) => {\n                    const stat = statSelector(statFilter);\n                    return (<BigStatistic name={stat.name} tooltip={stat.tooltip}>{stat.body}</BigStatistic>);\n                })\n            }\n        </>\n    );\n};\n\ntype SystemStatsProps = {\n    variant?: string;\n    showBalances?: boolean;\n    showProtocol?: boolean;\n    showPriceFeed?: boolean;\n    filterStats?: string[];\n};\n\nexport const TopSystemStats: React.FC<SystemStatsProps> = (\n    { filterStats }) => {\n\n    /*\n    const {\n        liquity: {\n            connection: { version: contractsVersion, deploymentDate, frontendTag }\n        }\n    } = useLiquity();\n    */\n\n    const statSections = () => (\n        <Box sx={{\n            display: \"flex\",\n            flexFlow: \"row wrap-reverse\",\n            justifyContent: \"space-between\",\n            flexGrow: 1,\n            gap: 2,\n            py: 3,\n        }}>\n            <ProtocolStats filterStats={filterStats} />\n        </Box>\n    )\n\n    return (\n        <>\n            {statSections()}\n        </>\n    )\n}\n\n","import React, { useState, useRef } from \"react\";\nimport { Container, Text, Flex, Box, Button } from \"theme-ui\";\nimport { UnsupportedChainIdError } from '@web3-react/core'\nimport { AccountInfo } from \"./AccountInfo\";\nimport { useLiquity, isWalletConnected } from \"../../hooks/LiquityContext\";\nimport { shortenAddress } from \"../../utils/shortenAddress\";\nimport { PriceManager } from \"../../components/PriceManager\";\nimport { TopSystemStats } from \"../../components/TopSystemStats\";\nimport { useWeb3React } from \"../../hooks\"\nimport { injected } from \"../../connectors\";\nimport { AbstractConnector } from '@web3-react/abstract-connector';\n\nconst UserModal: React.FC = () => {\n    return (\n        <Container variant=\"single\" sx={{\n            zIndex: 99,\n            maxWidth: [\"100%\", \"36em\"],\n        }}>\n            <TopSystemStats filterStats={[\"aut-price\", \"lqty-price\"]}/>\n            <AccountInfo />\n            <PriceManager />\n        </Container>\n    )\n}\n\ntype AccountButtonProps = {\n    account: string | null | undefined;\n    userModalOpen: boolean;\n    setSystemStatsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n    activate: (connector: AbstractConnector, onError?: ((error: Error) => void) | undefined, throwErrors?: boolean | undefined) => Promise<void>\n};\n\nconst AccountButton: React.FC<AccountButtonProps> = props => {\n    if(!isWalletConnected(props.account)) {\n        return <Button\n            onClick={() => props.activate(injected)}\n            variant=\"colors\"\n            sx={{ px: 3, py: 2 }}>\n            <Flex sx={{ flexDirection: \"column\" }}>\n                <Text as=\"span\" sx={{ fontSize: 1 }}>\n                    🦊 Connect Wallet\n                </Text>\n            </Flex>\n        </Button>\n    } \n    return <Button\n        onClick={() => props.setSystemStatsOpen(!props.userModalOpen) }\n        variant=\"colors\"\n        sx={{ px: 3, py: 2 }}>\n        <Flex sx={{ flexDirection: \"column\" }}>\n            <Text as=\"span\" sx={{ fontSize: 1 }}>\n                {props.account && shortenAddress(props.account)}\n            </Text>\n        </Flex>\n    </Button>\n}\n\nexport const UserAccount: React.FC = () => {\n    const { account } = useLiquity();\n    const userModalOverlayRef = useRef<HTMLDivElement>(null);\n    const [userModalOpen, setSystemStatsOpen] = useState(false);\n    const { activate } = useWeb3React();\n\n    const tryActivation = async (connector: AbstractConnector | undefined) => {\n        connector &&\n          activate(connector, undefined, true).catch(error => {\n            if (error instanceof UnsupportedChainIdError) {\n              activate(connector) // a little janky...can't use setError because the connector isn't set\n            } else {\n              console.error(error)\n            }\n          })\n      }\n\n    return (\n        <>\n            <Box>\n                <Flex sx={{ mx: 2, alignItems: \"center\" }}>\n                    {/* <Icon name=\"user-circle\" size=\"lg\" /> */}\n                    <AccountButton \n                        account = {account}\n                        setSystemStatsOpen = {setSystemStatsOpen}\n                        userModalOpen = {userModalOpen}\n                        activate={tryActivation}\n                    ></AccountButton>\n                </Flex>\n            </Box>\n\n            {userModalOpen && (\n                <Container\n                    variant=\"userOverlay\"\n                    sx={{\n                        // display: [\"none\", \"flex\"],\n                    }}\n                    ref={userModalOverlayRef}\n                    onClick={e => {\n                        if (e.target === userModalOverlayRef.current) {\n                            setSystemStatsOpen(false);\n                        }\n                    }}\n                >\n                    <UserModal />\n                    <Container variant=\"blurFilter\" />\n                </Container>\n            )}\n        </>\n    )\n};\n\n","import React from \"react\";\nimport { Container, Flex} from \"theme-ui\";\n\nimport { LiquityLogo } from \"./LiquityLogo\";\nimport { Nav } from \"./Nav\";\nimport { SideNav } from \"./SideNav\";\nimport { UserAccount } from \"./UserDashboard/UserAccount\";\n// import { SystemStatsPopup } from \"./SystemStatsPopup\";\n\nconst logoHeight = \"40px\";\n\nexport const Header: React.FC = () => {\n\n    return (\n        <Container variant=\"header\">\n            <Flex sx={{\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                flex: 1,\n            }}>\n                <Flex sx={{ flexBasis: [\"50%\", \"20%\"] }}>\n                    <LiquityLogo height={logoHeight} />\n                </Flex>\n                <Nav />\n                <Flex sx={{\n                    flexBasis: [\"50%\", \"20%\"],\n                    justifyContent: \"flex-end\"\n                }}>\n                    <UserAccount />\n                    <SideNav />\n                </Flex>\n            </Flex>\n            {/*\n            <SystemStatsPopup />\n            */}\n        </Container>\n    );\n};\n","import { Box, Flex, Text } from \"theme-ui\";\n\nimport { Icon } from \"./Icon\";\n\nexport const ActionDescription: React.FC = ({ children }) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-around\",\n\n      mb: [2, 3],\n      p: 3,\n\n      border: 1,\n      borderRadius: 16,\n      borderColor: \"accent\",\n      // boxShadow: 1,\n      bg: \"#F2F4FF\",\n    }}\n  >\n    <Flex sx={{ alignItems: \"center\" }}>\n      <Icon name=\"info-circle\" size=\"lg\" />\n      <Text sx={{ ml: 2 }}>{children}</Text>\n    </Flex>\n  </Box>\n);\n\nexport const Amount: React.FC = ({ children }) => (\n  <Text sx={{ fontWeight: \"bold\", whiteSpace: \"nowrap\" }}>{children}</Text>\n);\n","import React, { useState } from \"react\";\nimport { Text, Flex, Label, Input, SxProp, Button, ThemeUICSSProperties } from \"theme-ui\";\n\nimport { Icon } from \"../Icon\";\n\ntype RowProps = SxProp & {\n  label: string;\n  labelId?: string;\n  labelFor?: string;\n  infoIcon?: React.ReactNode;\n};\n\nexport const Row: React.FC<RowProps> = ({ sx, label, labelId, labelFor, children, infoIcon }) => {\n  return (\n    <Flex sx={{ alignItems: \"stretch\", ...sx }}>\n      <Label\n        id={labelId}\n        htmlFor={labelFor}\n        sx={{\n          p: 0,\n          pl: 3,\n          pt: \"12px\",\n          position: \"absolute\",\n\n          fontSize: 1,\n          border: 1,\n          borderColor: \"transparent\"\n        }}\n      >\n        <Flex sx={{ alignItems: \"center\" }}>\n          {label}\n          {infoIcon && infoIcon}\n        </Flex>\n      </Label>\n      {children}\n    </Flex>\n  );\n};\n\ntype PendingAmountProps = {\n  value: string;\n};\n\nconst PendingAmount: React.FC<PendingAmountProps & SxProp> = ({ sx, value }) => (\n  <Text {...{ sx }}>\n    (\n    {value === \"++\" ? (\n      <Icon name=\"angle-double-up\" />\n    ) : value === \"--\" ? (\n      <Icon name=\"angle-double-down\" />\n    ) : value?.startsWith(\"+\") ? (\n      <>\n        <Icon name=\"angle-up\" /> {value.substr(1)}\n      </>\n    ) : value?.startsWith(\"-\") ? (\n      <>\n        <Icon name=\"angle-down\" /> {value.substr(1)}\n      </>\n    ) : (\n      value\n    )}\n    )\n  </Text>\n);\n\ntype StaticAmountsProps = {\n  inputId: string;\n  labelledBy?: string;\n  amount: string;\n  unit?: string;\n  color?: string;\n  pendingAmount?: string;\n  pendingColor?: string;\n  onClick?: () => void;\n};\n\nexport const StaticAmounts: React.FC<StaticAmountsProps & SxProp> = ({\n  sx,\n  inputId,\n  labelledBy,\n  amount,\n  unit,\n  color,\n  pendingAmount,\n  pendingColor,\n  onClick,\n  children\n}) => {\n  return (\n    <Flex\n      id={inputId}\n      aria-labelledby={labelledBy}\n      {...{ onClick }}\n      sx={{\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n\n        ...(onClick ? { cursor: \"text\" } : {}),\n\n        ...staticStyle,\n        ...sx\n      }}\n    >\n      <Flex sx={{ alignItems: \"center\" }}>\n        <Text sx={{ color, fontWeight: \"medium\" }}>{amount}</Text>\n\n        {unit && (\n          <>\n            &nbsp;\n            <Text sx={{ fontWeight: \"light\", opacity: 0.8 }}>{unit}</Text>\n          </>\n        )}\n\n        {pendingAmount && (\n          <>\n            &nbsp;\n            <PendingAmount\n              sx={{ color: pendingColor, opacity: 0.8, fontSize: \"0.666em\" }}\n              value={pendingAmount}\n            />\n          </>\n        )}\n      </Flex>\n\n      {children}\n    </Flex>\n  );\n};\n\nconst staticStyle: ThemeUICSSProperties = {\n  flexGrow: 1,\n\n  mb: 0,\n  pl: 3,\n  pr: \"11px\",\n  pb: 0,\n  pt: \"28px\",\n\n  fontSize: 3,\n\n  border: 1,\n  borderColor: \"transparent\"\n};\n\nconst editableStyle: ThemeUICSSProperties = {\n  flexGrow: 1,\n\n  mb: [2, 3],\n  pl: 3,\n  pr: \"11px\",\n  pb: 2,\n  pt: \"28px\",\n\n  fontSize: 4,\n\n  // boxShadow: [1, 2],\n  // border: 1,\n  borderRadius: 16,\n  borderColor: \"muted\"\n};\n\ntype StaticRowProps = RowProps & StaticAmountsProps;\n\nexport const StaticRow: React.FC<StaticRowProps> = ({\n  label,\n  labelId,\n  labelFor,\n  infoIcon,\n  ...props\n}) => (\n  <Row {...{ label, labelId, labelFor, infoIcon }} sx={{ mt: [-2, -3], pb: [2, 3] }}>\n    <StaticAmounts {...props} />\n  </Row>\n);\n\ntype DisabledEditableRowProps = Omit<StaticAmountsProps, \"labelledBy\" | \"onClick\"> & {\n  label: string;\n};\n\nexport const DisabledEditableRow: React.FC<DisabledEditableRowProps> = ({\n  inputId,\n  label,\n  unit,\n  amount,\n  color,\n  pendingAmount,\n  pendingColor\n}) => (\n  <Row labelId={`${inputId}-label`} {...{ label, unit }}>\n    <StaticAmounts\n      sx={{ ...editableStyle, boxShadow: 0 }}\n      labelledBy={`${inputId}-label`}\n      {...{ inputId, amount, unit, color, pendingAmount, pendingColor }}\n    />\n  </Row>\n);\n\ntype EditableRowProps = DisabledEditableRowProps & {\n  editingState: [string | undefined, (editing: string | undefined) => void];\n  editedAmount: string;\n  setEditedAmount: (editedAmount: string) => void;\n  maxAmount?: string;\n  maxedOut?: boolean;\n};\n\nexport const EditableRow: React.FC<EditableRowProps> = ({\n  label,\n  inputId,\n  unit,\n  amount,\n  color,\n  pendingAmount,\n  pendingColor,\n  editingState,\n  editedAmount,\n  setEditedAmount,\n  maxAmount,\n  maxedOut\n}) => {\n  const [editing, setEditing] = editingState;\n  const [invalid, setInvalid] = useState(false);\n\n  return editing === inputId ? (\n    <Row {...{ label, labelFor: inputId, unit }}>\n      <Input\n        autoFocus\n        id={inputId}\n        type=\"number\"\n        step=\"any\"\n        defaultValue={editedAmount}\n        {...{ invalid }}\n        onChange={e => {\n          try {\n            setEditedAmount(e.target.value);\n            setInvalid(false);\n          } catch {\n            setInvalid(true);\n          }\n        }}\n        onBlur={() => {\n          setEditing(undefined);\n          setInvalid(false);\n        }}\n        variant=\"editor\"\n        sx={{\n          ...editableStyle,\n          fontWeight: \"medium\",\n          bg: invalid ? \"invalid\" : \"background\"\n        }}\n      />\n    </Row>\n  ) : (\n    <Row labelId={`${inputId}-label`} {...{ label, unit }}>\n      <StaticAmounts\n        sx={{\n          ...editableStyle,\n          bg: invalid ? \"invalid\" : \"background\"\n        }}\n        labelledBy={`${inputId}-label`}\n        onClick={() => setEditing(inputId)}\n        {...{ inputId, amount, unit, color, pendingAmount, pendingColor, invalid }}\n      >\n        {maxAmount && (\n          <Button\n            sx={{ fontSize: 1, p: 1, px: 3 }}\n            onClick={event => {\n              setEditedAmount(maxAmount);\n              event.stopPropagation();\n            }}\n            disabled={maxedOut}\n          >\n            max\n          </Button>\n        )}\n      </StaticAmounts>\n    </Row>\n  );\n};\n","import React from \"react\";\nimport { Container, Spinner } from \"theme-ui\";\n\nexport const LoadingOverlay: React.FC = () => (\n  <Container\n    variant=\"disabledOverlay\"\n    sx={{ p: \"14px\", display: \"flex\", justifyContent: \"flex-end\" }}\n  >\n    <Spinner size=\"28px\" sx={{ color: \"text\" }} />\n  </Container>\n);\n","import React from \"react\";\nimport { Flex, Box, Card } from \"theme-ui\";\n\nimport { CRITICAL_COLLATERAL_RATIO, Decimal, Difference, Percent } from \"@fluidity/lib-base\";\n\nimport { Icon } from \"../Icon\";\n\nimport { StaticRow } from \"./Editor\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { ActionDescription } from \"../ActionDescription\";\n\ntype CollateralRatioProps = {\n  value?: Decimal;\n  change?: Difference;\n};\n\nexport const CollateralRatio: React.FC<CollateralRatioProps> = ({ value, change }) => {\n  const collateralRatioPct = new Percent(value ?? { toString: () => \"N/A\" });\n  const changePct = change && new Percent(change);\n  return (\n    <>\n      <Flex>\n        <Box sx={{ mt: [2, 0], ml: 3, mr: -2, fontSize: \"24px\" }}>\n          <Icon name=\"heartbeat\" />\n        </Box>\n\n        <StaticRow\n          label=\"Collateral ratio\"\n          inputId=\"trove-collateral-ratio\"\n          amount={collateralRatioPct.prettify()}\n          color={\n            value?.gt(CRITICAL_COLLATERAL_RATIO)\n              ? \"success\"\n              : value?.gt(1.2)\n              ? \"warning\"\n              : value?.lte(1.2)\n              ? \"danger\"\n              : \"muted\"\n          }\n          pendingAmount={\n            change?.positive?.absoluteValue?.gt(10)\n              ? \"++\"\n              : change?.negative?.absoluteValue?.gt(10)\n              ? \"--\"\n              : changePct?.nonZeroish(2)?.prettify()\n          }\n          pendingColor={change?.positive ? \"success\" : \"danger\"}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"220px\" }}>\n                  The ratio between the dollar value of the collateral and the debt (in LUSD) you are\n                  depositing. While the Minimum Collateral Ratio is 110% during normal operation, it\n                  is recommended to keep the Collateral Ratio always above 150% to avoid liquidation\n                  under Recovery Mode. A Collateral Ratio above 200% or 250% is recommended for\n                  additional safety.\n                </Card>\n              }\n            />\n          }\n        />\n      </Flex>\n      {value?.lt(1.5) && (\n        <ActionDescription>\n          Keeping your CR above 150% can help avoid liquidation under Recovery Mode.\n        </ActionDescription>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Heading, Box, Card } from \"theme-ui\";\n\nimport {\n  Percent,\n  Difference,\n  Decimalish,\n  Decimal,\n  Trove,\n  LiquityStoreState,\n  LUSD_LIQUIDATION_RESERVE\n} from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN } from \"../../strings\";\n\nimport { StaticRow } from \"./Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { InfoIcon } from \"../InfoIcon\";\n\ntype TroveEditorProps = {\n  original: Trove;\n  edited: Trove;\n  fee: Decimal;\n  borrowingRate: Decimal;\n  changePending: boolean;\n  dispatch: (\n    action: { type: \"setCollateral\" | \"setDebt\"; newValue: Decimalish } | { type: \"revert\" }\n  ) => void;\n};\n\nconst select = ({ price }: LiquityStoreState) => ({ price });\n\nexport const TroveEditor: React.FC<TroveEditorProps> = ({\n  children,\n  original,\n  edited,\n  fee,\n  borrowingRate,\n  changePending\n}) => {\n  const { price } = useLiquitySelector(select);\n\n  const feePct = new Percent(borrowingRate);\n\n  const originalCollateralRatio = !original.isEmpty ? original.collateralRatio(price) : undefined;\n  const collateralRatio = !edited.isEmpty ? edited.collateralRatio(price) : undefined;\n  const collateralRatioChange = Difference.between(collateralRatio, originalCollateralRatio);\n\n  return (\n    <Card>\n      <Heading>Trove</Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <StaticRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={edited.collateral.prettify(4)}\n          unit=\"AUT\"\n        />\n\n        <StaticRow label=\"Debt\" inputId=\"trove-debt\" amount={edited.debt.prettify()} unit={COIN} />\n\n        {original.isEmpty && (\n          <StaticRow\n            label=\"Liquidation Reserve\"\n            inputId=\"trove-liquidation-reserve\"\n            amount={`${LUSD_LIQUIDATION_RESERVE}`}\n            unit={COIN}\n            infoIcon={\n              <InfoIcon\n                tooltip={\n                  <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                    An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                    liquidated. The amount increases your debt and is refunded if you close your\n                    Trove by fully paying off its net debt.\n                  </Card>\n                }\n              />\n            }\n          />\n        )}\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.toString(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} change={collateralRatioChange} />\n\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import { Button } from \"theme-ui\";\n\nimport { Decimal, TroveChange } from \"@fluidity/lib-base\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\ntype TroveActionProps = {\n  transactionId: string;\n  change: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }>;\n  maxBorrowingRate: Decimal;\n  borrowingFeeDecayToleranceMinutes: number;\n};\n\nexport const TroveAction: React.FC<TroveActionProps> = ({\n  children,\n  transactionId,\n  change,\n  maxBorrowingRate,\n  borrowingFeeDecayToleranceMinutes\n}) => {\n  const { liquity } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    transactionId,\n    change.type === \"creation\"\n      ? liquity.send.openTrove.bind(liquity.send, change.params, {\n          maxBorrowingRate,\n          borrowingFeeDecayToleranceMinutes\n        })\n      : change.type === \"closure\"\n      ? liquity.send.closeTrove.bind(liquity.send)\n      : liquity.send.adjustTrove.bind(liquity.send, change.params, {\n          maxBorrowingRate,\n          borrowingFeeDecayToleranceMinutes\n        })\n  );\n\n  return <Button onClick={sendTransaction}>{children}</Button>;\n};\n","import { createContext, useContext } from \"react\";\nimport type { TroveView, TroveEvent } from \"./types\";\n\ntype TroveViewContextType = {\n  view: TroveView;\n  dispatchEvent: (event: TroveEvent) => void;\n};\n\nexport const TroveViewContext = createContext<TroveViewContextType | null>(null);\n\nexport const useTroveView = (): TroveViewContextType => {\n  const context: TroveViewContextType | null = useContext(TroveViewContext);\n\n  if (context === null) {\n    throw new Error(\"You must add a <TroveViewProvider> into the React tree\");\n  }\n\n  return context;\n};\n","import { Box, Flex, Text } from \"theme-ui\";\n\nimport { Icon } from \"./Icon\";\n\nexport const ErrorDescription: React.FC = ({ children }) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-around\",\n\n      mb: [2, 3],\n      p: 3,\n\n      border: 1,\n      borderRadius: 16,\n      borderColor: \"danger\",\n      boxShadow: 1,\n      bg: \"rgba(220, 44, 16, 0.05)\"\n    }}\n  >\n    <Flex sx={{ alignItems: \"center\" }}>\n      <Icon name=\"exclamation-triangle\" size=\"lg\" />\n      <Text sx={{ ml: 2 }}>{children}</Text>\n    </Flex>\n  </Box>\n);\n","import {\n  Decimal,\n  LUSD_MINIMUM_DEBT,\n  LUSD_MINIMUM_NET_DEBT,\n  Trove,\n  TroveAdjustmentParams,\n  TroveChange,\n  Percent,\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n  LiquityStoreState,\n  TroveClosureParams,\n  TroveCreationParams\n} from \"@fluidity/lib-base\";\n\nimport { COIN } from \"../../../strings\";\n\nimport { ActionDescription, Amount } from \"../../ActionDescription\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\ntype TroveAdjustmentDescriptionParams = {\n  params: TroveAdjustmentParams<Decimal>;\n};\n\nconst TroveChangeDescription: React.FC<TroveAdjustmentDescriptionParams> = ({ params }) => (\n  <ActionDescription>\n    {params.depositCollateral && params.borrowLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} AUT</Amount> and receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.repayLUSD && params.withdrawCollateral ? (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>{\" \"}\n        and receive <Amount>{params.withdrawCollateral.prettify()} AUT</Amount>\n      </>\n    ) : params.depositCollateral && params.repayLUSD ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} AUT</Amount> and pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.borrowLUSD && params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} AUT</Amount> and{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : params.depositCollateral ? (\n      <>\n        You will deposit <Amount>{params.depositCollateral.prettify()} AUT</Amount>\n      </>\n    ) : params.withdrawCollateral ? (\n      <>\n        You will receive <Amount>{params.withdrawCollateral.prettify()} AUT</Amount>\n      </>\n    ) : params.borrowLUSD ? (\n      <>\n        You will receive{\" \"}\n        <Amount>\n          {params.borrowLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    ) : (\n      <>\n        You will pay{\" \"}\n        <Amount>\n          {params.repayLUSD.prettify()} {COIN}\n        </Amount>\n      </>\n    )}\n    .\n  </ActionDescription>\n);\n\nexport const selectForTroveChangeValidation = ({\n  price,\n  total,\n  accountBalance,\n  lusdBalance,\n  numberOfTroves\n}: LiquityStoreState) => ({ price, total, accountBalance, lusdBalance, numberOfTroves });\n\ntype TroveChangeValidationSelectedState = ReturnType<typeof selectForTroveChangeValidation>;\n\ninterface TroveChangeValidationContext extends TroveChangeValidationSelectedState {\n  originalTrove: Trove;\n  resultingTrove: Trove;\n  recoveryMode: boolean;\n  wouldTriggerRecoveryMode: boolean;\n}\n\nexport const validateTroveChange = (\n  originalTrove: Trove,\n  adjustedTrove: Trove,\n  borrowingRate: Decimal,\n  selectedState: TroveChangeValidationSelectedState\n): [\n  validChange: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }> | undefined,\n  description: JSX.Element | undefined\n] => {\n  const { total, price } = selectedState;\n  const change = originalTrove.whatChanged(adjustedTrove, borrowingRate);\n\n  if (!change) {\n    return [undefined, undefined];\n  }\n\n  // Reapply change to get the exact state the Trove will end up in (which could be slightly\n  // different from `edited` due to imprecision).\n  const resultingTrove = originalTrove.apply(change, borrowingRate);\n  const recoveryMode = total.collateralRatioIsBelowCritical(price);\n  const wouldTriggerRecoveryMode = total\n    .subtract(originalTrove)\n    .add(resultingTrove)\n    .collateralRatioIsBelowCritical(price);\n\n  const context: TroveChangeValidationContext = {\n    ...selectedState,\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode\n  };\n\n  if (change.type === \"invalidCreation\") {\n    // Trying to create a Trove with negative net debt\n    return [\n      undefined,\n      <ErrorDescription>\n        Total debt must be at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    ];\n  }\n\n  const errorDescription =\n    change.type === \"creation\"\n      ? validateTroveCreation(change.params, context)\n      : change.type === \"closure\"\n      ? validateTroveClosure(change.params, context)\n      : validateTroveAdjustment(change.params, context);\n\n  if (errorDescription) {\n    return [undefined, errorDescription];\n  }\n\n  return [change, <TroveChangeDescription params={change.params} />];\n};\n\nconst validateTroveCreation = (\n  { depositCollateral, borrowLUSD }: TroveCreationParams<Decimal>,\n  {\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    accountBalance,\n    price\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (borrowLUSD.lt(LUSD_MINIMUM_NET_DEBT)) {\n    return (\n      <ErrorDescription>\n        You must borrow at least{\" \"}\n        <Amount>\n          {LUSD_MINIMUM_NET_DEBT.toString()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove with less than <Amount>{ccrPercent}</Amount> Collateral\n          Ratio during recovery mode. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall\n          below <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} AUT</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveAdjustment = (\n  { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD }: TroveAdjustmentParams<Decimal>,\n  {\n    originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    price,\n    accountBalance,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (recoveryMode) {\n    if (withdrawCollateral) {\n      return (\n        <ErrorDescription>\n          You're not allowed to withdraw collateral during recovery mode.\n        </ErrorDescription>\n      );\n    }\n\n    if (borrowLUSD) {\n      if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n        return (\n          <ErrorDescription>\n            Your collateral ratio must be at least <Amount>{ccrPercent}</Amount> to borrow during\n            recovery mode. Please improve your collateral ratio.\n          </ErrorDescription>\n        );\n      }\n\n      if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n        return (\n          <ErrorDescription>\n            You're not allowed to decrease your collateral ratio during recovery mode.\n          </ErrorDescription>\n        );\n      }\n    }\n  } else {\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return (\n        <ErrorDescription>\n          Collateral ratio must be at least <Amount>{mcrPercent}</Amount>.\n        </ErrorDescription>\n      );\n    }\n\n    if (wouldTriggerRecoveryMode) {\n      return (\n        <ErrorDescription>\n          The adjustment you're trying to make would cause the Total Collateral Ratio to fall below{\" \"}\n          <Amount>{ccrPercent}</Amount>. Please increase your Trove's Collateral Ratio.\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (repayLUSD) {\n    if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n      return (\n        <ErrorDescription>\n          Total debt must be at least{\" \"}\n          <Amount>\n            {LUSD_MINIMUM_DEBT.toString()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n\n    if (repayLUSD.gt(lusdBalance)) {\n      return (\n        <ErrorDescription>\n          The amount you're trying to repay exceeds your balance by{\" \"}\n          <Amount>\n            {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      );\n    }\n  }\n\n  if (depositCollateral?.gt(accountBalance)) {\n    return (\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>{depositCollateral.sub(accountBalance).prettify()} AUT</Amount>.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n\nconst validateTroveClosure = (\n  { repayLUSD }: TroveClosureParams<Decimal>,\n  {\n    recoveryMode,\n    wouldTriggerRecoveryMode,\n    numberOfTroves,\n    lusdBalance\n  }: TroveChangeValidationContext\n): JSX.Element | null => {\n  if (numberOfTroves === 1) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove when there are no other Troves in the system.\n      </ErrorDescription>\n    );\n  }\n\n  if (recoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close your Trove during recovery mode.\n      </ErrorDescription>\n    );\n  }\n\n  if (repayLUSD?.gt(lusdBalance)) {\n    return (\n      <ErrorDescription>\n        You need{\" \"}\n        <Amount>\n          {repayLUSD.sub(lusdBalance).prettify()} {COIN}\n        </Amount>{\" \"}\n        more to close your Trove.\n      </ErrorDescription>\n    );\n  }\n\n  if (wouldTriggerRecoveryMode) {\n    return (\n      <ErrorDescription>\n        You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to\n        fall below <Amount>{ccrPercent}</Amount>. Please wait until the Total Collateral Ratio\n        increases.\n      </ErrorDescription>\n    );\n  }\n\n  return null;\n};\n","import { useCallback, useEffect } from \"react\";\nimport { Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState, Decimal, Trove, Decimalish, LUSD_MINIMUM_DEBT } from \"@fluidity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { TroveEditor } from \"./TroveEditor\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\n\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst init = ({ trove }: LiquityStoreState) => ({\n  original: trove,\n  edited: new Trove(trove.collateral, trove.debt),\n  changePending: false,\n  debtDirty: false,\n  addedMinimumDebt: false\n});\n\ntype TroveManagerState = ReturnType<typeof init>;\ntype TroveManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"startChange\" | \"finishChange\" | \"revert\" | \"addMinimumDebt\" | \"removeMinimumDebt\" }\n  | { type: \"setCollateral\" | \"setDebt\"; newValue: Decimalish };\n\nconst reduceWith = (action: TroveManagerAction) => (state: TroveManagerState): TroveManagerState =>\n  reduce(state, action);\n\nconst addMinimumDebt = reduceWith({ type: \"addMinimumDebt\" });\nconst removeMinimumDebt = reduceWith({ type: \"removeMinimumDebt\" });\nconst finishChange = reduceWith({ type: \"finishChange\" });\nconst revert = reduceWith({ type: \"revert\" });\n\nconst reduce = (state: TroveManagerState, action: TroveManagerAction): TroveManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { original, edited, changePending, debtDirty, addedMinimumDebt } = state;\n\n  switch (action.type) {\n    case \"startChange\": {\n      console.log(\"starting change\");\n      return { ...state, changePending: true };\n    }\n\n    case \"finishChange\":\n      return { ...state, changePending: false };\n\n    case \"setCollateral\": {\n      const newCollateral = Decimal.from(action.newValue);\n\n      const newState = {\n        ...state,\n        edited: edited.setCollateral(newCollateral)\n      };\n\n      if (!debtDirty) {\n        if (edited.isEmpty && newCollateral.nonZero) {\n          return addMinimumDebt(newState);\n        }\n        if (addedMinimumDebt && newCollateral.isZero) {\n          return removeMinimumDebt(newState);\n        }\n      }\n\n      return newState;\n    }\n\n    case \"setDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(action.newValue),\n        debtDirty: true\n      };\n\n    case \"addMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(LUSD_MINIMUM_DEBT),\n        addedMinimumDebt: true\n      };\n\n    case \"removeMinimumDebt\":\n      return {\n        ...state,\n        edited: edited.setDebt(0),\n        addedMinimumDebt: false\n      };\n\n    case \"revert\":\n      return {\n        ...state,\n        edited: new Trove(original.collateral, original.debt),\n        debtDirty: false,\n        addedMinimumDebt: false\n      };\n\n    case \"updateStore\": {\n      const {\n        newState: { trove },\n        stateChange: { troveBeforeRedistribution: changeCommitted }\n      } = action;\n\n      const newState = {\n        ...state,\n        original: trove\n      };\n\n      if (changePending && changeCommitted) {\n        return finishChange(revert(newState));\n      }\n\n      const change = original.whatChanged(edited, 0);\n\n      if (\n        (change?.type === \"creation\" && !trove.isEmpty) ||\n        (change?.type === \"closure\" && trove.isEmpty)\n      ) {\n        return revert(newState);\n      }\n\n      return { ...newState, edited: trove.apply(change, 0) };\n    }\n  }\n};\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst select = (state: LiquityStoreState) => ({\n  fees: state.fees,\n  validationContext: selectForTroveChangeValidation(state)\n});\n\nconst transactionIdPrefix = \"trove-\";\nconst transactionIdMatcher = new RegExp(`^${transactionIdPrefix}`);\n\ntype TroveManagerProps = {\n  collateral?: Decimalish;\n  debt?: Decimalish;\n};\n\nexport const TroveManager: React.FC<TroveManagerProps> = ({ collateral, debt }) => {\n  const [{ original, edited, changePending }, dispatch] = useLiquityReducer(reduce, init);\n  const { fees, validationContext } = useLiquitySelector(select);\n\n  useEffect(() => {\n    if (collateral !== undefined) {\n      dispatch({ type: \"setCollateral\", newValue: collateral });\n    }\n    if (debt !== undefined) {\n      dispatch({ type: \"setDebt\", newValue: debt });\n    }\n  }, [collateral, debt, dispatch]);\n\n  const borrowingRate = fees.borrowingRate();\n  const maxBorrowingRate = borrowingRate.add(0.005); // TODO slippage tolerance\n\n  const [validChange, description] = validateTroveChange(\n    original,\n    edited,\n    borrowingRate,\n    validationContext\n  );\n\n  const { dispatchEvent } = useTroveView();\n\n  const handleCancel = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const openingNewTrove = original.isEmpty;\n\n  const myTransactionState = useMyTransactionState(transactionIdMatcher);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      dispatch({ type: \"finishChange\" });\n    } else if (myTransactionState.type === \"confirmedOneShot\") {\n      if (myTransactionState.id === `${transactionIdPrefix}closure`) {\n        dispatchEvent(\"TROVE_CLOSED\");\n      } else {\n        dispatchEvent(\"TROVE_ADJUSTED\");\n      }\n    }\n  }, [myTransactionState, dispatch, dispatchEvent]);\n\n  return (\n    <TroveEditor\n      original={original}\n      edited={edited}\n      fee={feeFrom(original, edited, borrowingRate)}\n      borrowingRate={borrowingRate}\n      changePending={changePending}\n      dispatch={dispatch}\n    >\n      {description ??\n        (openingNewTrove ? (\n          <ActionDescription>\n            Start by entering the amount of AUT you'd like to deposit as collateral.\n          </ActionDescription>\n        ) : (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button variant=\"cancel\" onClick={handleCancel}>\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <TroveAction\n            transactionId={`${transactionIdPrefix}${validChange.type}`}\n            change={validChange}\n            maxBorrowingRate={maxBorrowingRate}\n            borrowingFeeDecayToleranceMinutes={60}\n          >\n            Confirm\n          </TroveAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </TroveEditor>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { DisabledEditableRow } from \"./Editor\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { Icon } from \"../Icon\";\nimport { COIN } from \"../../strings\";\nimport { CollateralRatio } from \"./CollateralRatio\";\n\nconst select = ({ trove, price }: LiquityStoreState) => ({ trove, price });\n\nexport const ReadOnlyTrove: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const handleAdjustTrove = useCallback(() => {\n    dispatchEvent(\"ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n  const handleCloseTrove = useCallback(() => {\n    dispatchEvent(\"CLOSE_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const { trove, price } = useLiquitySelector(select);\n\n  // console.log(\"READONLY TROVE\", trove.collateral.prettify(4));\n  return (\n    <Card>\n      <Heading>Trove</Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <Box>\n          <DisabledEditableRow\n            label=\"Collateral\"\n            inputId=\"trove-collateral\"\n            amount={trove.collateral.prettify(4)}\n            unit=\"AUT\"\n          />\n\n          <DisabledEditableRow\n            label=\"Debt\"\n            inputId=\"trove-debt\"\n            amount={trove.debt.prettify()}\n            unit={COIN}\n          />\n\n          <CollateralRatio value={trove.collateralRatio(price)} />\n        </Box>\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"outline\" onClick={handleCloseTrove}>\n            Close Trove\n          </Button>\n          <Button onClick={handleAdjustTrove}>\n            <Icon name=\"pen\" size=\"sm\" />\n            &nbsp;Adjust\n          </Button>\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import { Box, Flex, Heading, Text } from \"theme-ui\";\n\nimport { Icon } from \"./Icon\";\n\ntype InfoMessageProps = {\n  title: string;\n  icon?: React.ReactNode;\n};\n\nexport const InfoMessage: React.FC<InfoMessageProps> = ({ title, children, icon }) => (\n  <Box sx={{ mx: 1, mb: 3 }}>\n    <Flex sx={{ alignItems: \"center\", mb: \"10px\" }}>\n      <Box sx={{ mr: \"12px\", fontSize: \"20px\" }}>{icon || <Icon name=\"info-circle\" />}</Box>\n\n      <Heading as=\"h3\">{title}</Heading>\n    </Flex>\n\n    <Text sx={{ fontSize: 2 }}>{children}</Text>\n  </Box>\n);\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\nimport { InfoMessage } from \"../InfoMessage\";\nimport { useTroveView } from \"./context/TroveViewContext\";\n\nexport const NoTrove: React.FC = props => {\n  const { dispatchEvent } = useTroveView();\n\n  const handleOpenTrove = useCallback(() => {\n    dispatchEvent(\"OPEN_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>Trove</Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"You haven't borrowed any LUSD yet.\">\n          You can borrow LUSD by opening a Trove.\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          <Button onClick={handleOpenTrove}>Open Trove</Button>\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { Decimal, TroveChange } from \"@fluidity/lib-base\";\n\ntype ValidTroveChange = Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }>;\n\nconst paramsEq = (a?: Decimal, b?: Decimal) => (a && b ? a.eq(b) : !a && !b);\n\nconst equals = (a: ValidTroveChange, b: ValidTroveChange): boolean => {\n  return (\n    a.type === b.type &&\n    paramsEq(a.params.borrowLUSD, b.params.borrowLUSD) &&\n    paramsEq(a.params.repayLUSD, b.params.repayLUSD) &&\n    paramsEq(a.params.depositCollateral, b.params.depositCollateral) &&\n    paramsEq(a.params.withdrawCollateral, b.params.withdrawCollateral)\n  );\n};\n\nexport const useStableTroveChange = (\n  troveChange: ValidTroveChange | undefined\n): ValidTroveChange | undefined => {\n  const [stableTroveChange, setStableTroveChange] = useState(troveChange);\n\n  useEffect(() => {\n    if (!!stableTroveChange !== !!troveChange) {\n      setStableTroveChange(troveChange);\n    } else if (stableTroveChange && troveChange && !equals(stableTroveChange, troveChange)) {\n      setStableTroveChange(troveChange);\n    }\n  }, [stableTroveChange, troveChange]);\n\n  return stableTroveChange;\n};\n","import { Box, Flex, Text } from \"theme-ui\";\n\nimport { Icon } from \"./Icon\";\n\nexport const Warning: React.FC = ({ children }) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-around\",\n\n      mb: [2, 3],\n      p: 3,\n\n      border: 1,\n      borderRadius: 16,\n      borderColor: \"warning\",\n      boxShadow: 1\n      // bg: \"rgba(46, 182, 234, 0.05)\"\n    }}\n  >\n    <Flex sx={{ alignItems: \"center\" }}>\n      <Icon name=\"exclamation-triangle\" size=\"lg\" />\n      <Text sx={{ ml: 2 }}>{children}</Text>\n    </Flex>\n  </Box>\n);\n","import React, { useEffect } from \"react\";\n\nimport { Decimal, TroveChange } from \"@fluidity/lib-base\";\nimport { PopulatedEthersLiquityTransaction } from \"@fluidity/lib-ethers\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { Warning } from \"../Warning\";\n\nexport type GasEstimationState =\n  | { type: \"idle\" | \"inProgress\" }\n  | { type: \"complete\"; populatedTx: PopulatedEthersLiquityTransaction };\n\ntype ExpensiveTroveChangeWarningParams = {\n  troveChange?: Exclude<TroveChange<Decimal>, { type: \"invalidCreation\" }>;\n  maxBorrowingRate: Decimal;\n  borrowingFeeDecayToleranceMinutes: number;\n  gasEstimationState: GasEstimationState;\n  setGasEstimationState: (newState: GasEstimationState) => void;\n};\n\nexport const ExpensiveTroveChangeWarning: React.FC<ExpensiveTroveChangeWarningParams> = ({\n  troveChange,\n  maxBorrowingRate,\n  borrowingFeeDecayToleranceMinutes,\n  gasEstimationState,\n  setGasEstimationState\n}) => {\n  const { liquity } = useLiquity();\n\n  useEffect(() => {\n    if (troveChange && troveChange.type !== \"closure\") {\n      setGasEstimationState({ type: \"inProgress\" });\n\n      let cancelled = false;\n\n      const timeoutId = setTimeout(async () => {\n        const populatedTx = await (troveChange.type === \"creation\"\n          ? liquity.populate.openTrove(troveChange.params, {\n              maxBorrowingRate,\n              borrowingFeeDecayToleranceMinutes\n            })\n          : liquity.populate.adjustTrove(troveChange.params, {\n              maxBorrowingRate,\n              borrowingFeeDecayToleranceMinutes\n            }));\n\n        if (!cancelled) {\n          setGasEstimationState({ type: \"complete\", populatedTx });\n          console.log(\n            \"Estimated TX cost: \" +\n              Decimal.from(`${populatedTx.rawPopulatedTransaction.gasLimit}`).prettify(0)\n          );\n        }\n      }, 333);\n\n      return () => {\n        clearTimeout(timeoutId);\n        cancelled = true;\n      };\n    } else {\n      setGasEstimationState({ type: \"idle\" });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [troveChange]);\n\n  if (\n    troveChange &&\n    gasEstimationState.type === \"complete\" &&\n    gasEstimationState.populatedTx.gasHeadroom !== undefined &&\n    gasEstimationState.populatedTx.gasHeadroom >= 200000\n  ) {\n    return troveChange.type === \"creation\" ? (\n      <Warning>\n        The cost of opening a Trove in this collateral ratio range is rather high. To lower it,\n        choose a slightly different collateral ratio.\n      </Warning>\n    ) : (\n      <Warning>\n        The cost of adjusting a Trove into this collateral ratio range is rather high. To lower it,\n        choose a slightly different collateral ratio.\n      </Warning>\n    );\n  }\n\n  return null;\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Flex, Button, Box, Card, Heading, Spinner } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  LUSD_MINIMUM_NET_DEBT,\n  Percent\n} from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useStableTroveChange } from \"../../hooks/useStableTroveChange\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport { ExpensiveTroveChangeWarning, GasEstimationState } from \"./ExpensiveTroveChangeWarning\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { fees, price, accountBalance } = state;\n  return {\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst EMPTY_TROVE = new Trove(Decimal.ZERO, Decimal.ZERO);\nconst TRANSACTION_ID = \"trove-creation\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nexport const Opening: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const borrowingRate = fees.borrowingRate();\n  const editingState = useState<string>();\n\n  const [collateral, setCollateral] = useState<Decimal>(Decimal.ZERO);\n  const [borrowAmount, setBorrowAmount] = useState<Decimal>(Decimal.ZERO);\n\n  const maxBorrowingRate = borrowingRate.add(0.005);\n\n  const fee = borrowAmount.mul(borrowingRate);\n  const feePct = new Percent(borrowingRate);\n  const totalDebt = borrowAmount.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const isDirty = !collateral.isZero || !borrowAmount.isZero;\n  const trove = isDirty ? new Trove(collateral, totalDebt) : EMPTY_TROVE;\n  const maxCollateral = accountBalance.gt(GAS_ROOM_ETH)\n    ? accountBalance.sub(GAS_ROOM_ETH)\n    : Decimal.ZERO;\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !borrowAmount.isZero ? trove.collateralRatio(price) : undefined;\n\n  const [troveChange, description] = validateTroveChange(\n    EMPTY_TROVE,\n    trove,\n    borrowingRate,\n    validationContext\n  );\n\n  const stableTroveChange = useStableTroveChange(troveChange);\n  const [gasEstimationState, setGasEstimationState] = useState<GasEstimationState>({ type: \"idle\" });\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(Decimal.ZERO);\n    setBorrowAmount(Decimal.ZERO);\n  }, []);\n\n  useEffect(() => {\n    if (!collateral.isZero && borrowAmount.isZero) {\n      setBorrowAmount(LUSD_MINIMUM_NET_DEBT);\n    }\n  }, [collateral, borrowAmount]);\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"AUT\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Borrow\"\n          inputId=\"trove-borrow-amount\"\n          amount={borrowAmount.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={borrowAmount.toString(2)}\n          setEditedAmount={(amount: string) => setBorrowAmount(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} />\n\n        {description ?? (\n          <ActionDescription>\n            Start by entering the amount of AUT you'd like to deposit as collateral.\n          </ActionDescription>\n        )}\n\n        <ExpensiveTroveChangeWarning\n          troveChange={stableTroveChange}\n          maxBorrowingRate={maxBorrowingRate}\n          borrowingFeeDecayToleranceMinutes={60}\n          gasEstimationState={gasEstimationState}\n          setGasEstimationState={setGasEstimationState}\n        />\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {gasEstimationState.type === \"inProgress\" ? (\n            <Button disabled>\n              <Spinner size=\"24px\" sx={{ color: \"background\" }} />\n            </Button>\n          ) : stableTroveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={stableTroveChange}\n              maxBorrowingRate={maxBorrowingRate}\n              borrowingFeeDecayToleranceMinutes={60}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Flex, Button, Box, Card, Heading } from \"theme-ui\";\nimport {\n  LiquityStoreState,\n  Decimal,\n  Trove,\n  LUSD_LIQUIDATION_RESERVE,\n  Percent,\n  Difference\n} from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useStableTroveChange } from \"../../hooks/useStableTroveChange\";\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { TroveAction } from \"./TroveAction\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { COIN } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { CollateralRatio } from \"./CollateralRatio\";\nimport { EditableRow, StaticRow } from \"./Editor\";\nimport { ExpensiveTroveChangeWarning, GasEstimationState } from \"./ExpensiveTroveChangeWarning\";\nimport {\n  selectForTroveChangeValidation,\n  validateTroveChange\n} from \"./validation/validateTroveChange\";\n\nconst selector = (state: LiquityStoreState) => {\n  const { trove, fees, price, accountBalance } = state;\n  return {\n    trove,\n    fees,\n    price,\n    accountBalance,\n    validationContext: selectForTroveChangeValidation(state)\n  };\n};\n\nconst TRANSACTION_ID = \"trove-adjustment\";\nconst GAS_ROOM_ETH = Decimal.from(0.1);\n\nconst feeFrom = (original: Trove, edited: Trove, borrowingRate: Decimal): Decimal => {\n  const change = original.whatChanged(edited, borrowingRate);\n\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nconst applyUnsavedCollateralChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.collateral.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.collateral)) {\n        return trove.collateral.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.collateral;\n  }\n  return trove.collateral;\n};\n\nconst applyUnsavedNetDebtChanges = (unsavedChanges: Difference, trove: Trove) => {\n  if (unsavedChanges.absoluteValue) {\n    if (unsavedChanges.positive) {\n      return trove.netDebt.add(unsavedChanges.absoluteValue);\n    }\n    if (unsavedChanges.negative) {\n      if (unsavedChanges.absoluteValue.lt(trove.netDebt)) {\n        return trove.netDebt.sub(unsavedChanges.absoluteValue);\n      }\n    }\n    return trove.netDebt;\n  }\n  return trove.netDebt;\n};\n\nexport const Adjusting: React.FC = () => {\n  const { dispatchEvent } = useTroveView();\n  const { trove, fees, price, accountBalance, validationContext } = useLiquitySelector(selector);\n  const editingState = useState<string>();\n  const previousTrove = useRef<Trove>(trove);\n  const [collateral, setCollateral] = useState<Decimal>(trove.collateral);\n  const [netDebt, setNetDebt] = useState<Decimal>(trove.netDebt);\n\n  const transactionState = useMyTransactionState(TRANSACTION_ID);\n  const borrowingRate = fees.borrowingRate();\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"TROVE_ADJUSTED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  useEffect(() => {\n    if (!previousTrove.current.collateral.eq(trove.collateral)) {\n      const unsavedChanges = Difference.between(collateral, previousTrove.current.collateral);\n      const nextCollateral = applyUnsavedCollateralChanges(unsavedChanges, trove);\n      setCollateral(nextCollateral);\n    }\n    if (!previousTrove.current.netDebt.eq(trove.netDebt)) {\n      const unsavedChanges = Difference.between(netDebt, previousTrove.current.netDebt);\n      const nextNetDebt = applyUnsavedNetDebtChanges(unsavedChanges, trove);\n      setNetDebt(nextNetDebt);\n    }\n    previousTrove.current = trove;\n  }, [trove, collateral, netDebt]);\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_ADJUST_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  const reset = useCallback(() => {\n    setCollateral(trove.collateral);\n    setNetDebt(trove.netDebt);\n  }, [trove.collateral, trove.netDebt]);\n\n  const isDirty = !collateral.eq(trove.collateral) || !netDebt.eq(trove.netDebt);\n  const isDebtIncrease = netDebt.gt(trove.netDebt);\n  const debtIncreaseAmount = isDebtIncrease ? netDebt.sub(trove.netDebt) : Decimal.ZERO;\n\n  const fee = isDebtIncrease\n    ? feeFrom(trove, new Trove(trove.collateral, trove.debt.add(debtIncreaseAmount)), borrowingRate)\n    : Decimal.ZERO;\n  const totalDebt = netDebt.add(LUSD_LIQUIDATION_RESERVE).add(fee);\n  const maxBorrowingRate = borrowingRate.add(0.005);\n  const updatedTrove = isDirty ? new Trove(collateral, totalDebt) : trove;\n  const feePct = new Percent(borrowingRate);\n  const availableEth = accountBalance.gt(GAS_ROOM_ETH)\n    ? accountBalance.sub(GAS_ROOM_ETH)\n    : Decimal.ZERO;\n  const maxCollateral = trove.collateral.add(availableEth);\n  const collateralMaxedOut = collateral.eq(maxCollateral);\n  const collateralRatio =\n    !collateral.isZero && !netDebt.isZero ? updatedTrove.collateralRatio(price) : undefined;\n  const collateralRatioChange = Difference.between(collateralRatio, trove.collateralRatio(price));\n\n  const [troveChange, description] = validateTroveChange(\n    trove,\n    updatedTrove,\n    borrowingRate,\n    validationContext\n  );\n\n  const stableTroveChange = useStableTroveChange(troveChange);\n  const [gasEstimationState, setGasEstimationState] = useState<GasEstimationState>({ type: \"idle\" });\n\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  if (trove.status !== \"open\") {\n    return null;\n  }\n\n  return (\n    <Card>\n      <Heading>\n        Trove\n        {isDirty && !isTransactionPending && (\n          <Button variant=\"titleIcon\" sx={{ \":enabled:hover\": { color: \"danger\" } }} onClick={reset}>\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Collateral\"\n          inputId=\"trove-collateral\"\n          amount={collateral.prettify(4)}\n          maxAmount={maxCollateral.toString()}\n          maxedOut={collateralMaxedOut}\n          editingState={editingState}\n          unit=\"AUT\"\n          editedAmount={collateral.toString(4)}\n          setEditedAmount={(amount: string) => setCollateral(Decimal.from(amount))}\n        />\n\n        <EditableRow\n          label=\"Net debt\"\n          inputId=\"trove-net-debt-amount\"\n          amount={netDebt.prettify()}\n          unit={COIN}\n          editingState={editingState}\n          editedAmount={netDebt.toString(2)}\n          setEditedAmount={(amount: string) => setNetDebt(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Liquidation Reserve\"\n          inputId=\"trove-liquidation-reserve\"\n          amount={`${LUSD_LIQUIDATION_RESERVE}`}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"200px\" }}>\n                  An amount set aside to cover the liquidator’s gas costs if your Trove needs to be\n                  liquidated. The amount increases your debt and is refunded if you close your Trove\n                  by fully paying off its net debt.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Borrowing Fee\"\n          inputId=\"trove-borrowing-fee\"\n          amount={fee.prettify(2)}\n          pendingAmount={feePct.toString(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  This amount is deducted from the borrowed amount as a one-time fee. There are no\n                  recurring fees for borrowing, which is thus interest-free.\n                </Card>\n              }\n            />\n          }\n        />\n\n        <StaticRow\n          label=\"Total debt\"\n          inputId=\"trove-total-debt\"\n          amount={totalDebt.prettify(2)}\n          unit={COIN}\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                  The total amount of LUSD your Trove will hold.{\" \"}\n                  {isDirty && (\n                    <>\n                      You will need to repay {totalDebt.sub(LUSD_LIQUIDATION_RESERVE).prettify(2)}{\" \"}\n                      LUSD to reclaim your collateral ({LUSD_LIQUIDATION_RESERVE.toString()} LUSD\n                      Liquidation Reserve excluded).\n                    </>\n                  )}\n                </Card>\n              }\n            />\n          }\n        />\n\n        <CollateralRatio value={collateralRatio} change={collateralRatioChange} />\n\n        {description ?? (\n          <ActionDescription>\n            Adjust your Trove by modifying its collateral, debt, or both.\n          </ActionDescription>\n        )}\n\n        <ExpensiveTroveChangeWarning\n          troveChange={stableTroveChange}\n          maxBorrowingRate={maxBorrowingRate}\n          borrowingFeeDecayToleranceMinutes={60}\n          gasEstimationState={gasEstimationState}\n          setGasEstimationState={setGasEstimationState}\n        />\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n\n          {stableTroveChange ? (\n            <TroveAction\n              transactionId={TRANSACTION_ID}\n              change={stableTroveChange}\n              maxBorrowingRate={maxBorrowingRate}\n              borrowingFeeDecayToleranceMinutes={60}\n            >\n              Confirm\n            </TroveAction>\n          ) : (\n            <Button disabled>Confirm</Button>\n          )}\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Button, Flex, Spinner } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Transaction, useMyTransactionState } from \"./Transaction\";\nimport { useTroveView } from \"./Trove/context/TroveViewContext\";\n\nconst select = ({ collateralSurplusBalance }: LiquityStoreState) => ({\n  collateralSurplusBalance\n});\n\nexport const CollateralSurplusAction: React.FC = () => {\n  const { collateralSurplusBalance } = useLiquitySelector(select);\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const myTransactionId = \"claim-coll-surplus\";\n  const myTransactionState = useMyTransactionState(myTransactionId);\n\n  const { dispatchEvent } = useTroveView();\n\n  useEffect(() => {\n    if (myTransactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"TROVE_SURPLUS_COLLATERAL_CLAIMED\");\n    }\n  }, [myTransactionState.type, dispatchEvent]);\n\n  return myTransactionState.type === \"waitingForApproval\" ? (\n    <Flex variant=\"layout.actions\">\n      <Button disabled sx={{ mx: 2 }}>\n        <Spinner sx={{ mr: 2, color: \"white\" }} size=\"20px\" />\n        Waiting for your approval\n      </Button>\n    </Flex>\n  ) : myTransactionState.type !== \"waitingForConfirmation\" &&\n    myTransactionState.type !== \"confirmed\" ? (\n    <Flex variant=\"layout.actions\">\n      <Transaction\n        id={myTransactionId}\n        send={liquity.claimCollateralSurplus.bind(liquity, undefined)}\n      >\n        <Button sx={{ mx: 2 }}>Claim {collateralSurplusBalance.prettify()} AUT</Button>\n      </Transaction>\n    </Flex>\n  ) : null;\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Button, Flex } from \"theme-ui\";\nimport { CollateralSurplusAction } from \"../CollateralSurplusAction\";\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { InfoMessage } from \"../InfoMessage\";\n\nconst select = ({ collateralSurplusBalance }: LiquityStoreState) => ({\n  hasSurplusCollateral: !collateralSurplusBalance.isZero\n});\n\nexport const RedeemedTrove: React.FC = () => {\n  const { hasSurplusCollateral } = useLiquitySelector(select);\n  const { dispatchEvent } = useTroveView();\n\n  const handleOpenTrove = useCallback(() => {\n    dispatchEvent(\"OPEN_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>Trove</Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"Your Trove has been redeemed.\">\n          {hasSurplusCollateral\n            ? \"Please reclaim your remaining collateral before opening a new Trove.\"\n            : \"You can borrow LUSD by opening a Trove.\"}\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          {hasSurplusCollateral && <CollateralSurplusAction />}\n          {!hasSurplusCollateral && <Button onClick={handleOpenTrove}>Open Trove</Button>}\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Button, Flex } from \"theme-ui\";\nimport { CollateralSurplusAction } from \"../CollateralSurplusAction\";\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { InfoMessage } from \"../InfoMessage\";\n\nconst select = ({ collateralSurplusBalance }: LiquityStoreState) => ({\n  hasSurplusCollateral: !collateralSurplusBalance.isZero\n});\n\nexport const LiquidatedTrove: React.FC = () => {\n  const { hasSurplusCollateral } = useLiquitySelector(select);\n  const { dispatchEvent } = useTroveView();\n\n  const handleOpenTrove = useCallback(() => {\n    dispatchEvent(\"OPEN_TROVE_PRESSED\");\n  }, [dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>Trove</Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"Your Trove has been liquidated.\">\n          {hasSurplusCollateral\n            ? \"Please reclaim your remaining collateral before opening a new Trove.\"\n            : \"You can borrow LUSD by opening a Trove.\"}\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          {hasSurplusCollateral && <CollateralSurplusAction />}\n          {!hasSurplusCollateral && <Button onClick={handleOpenTrove}>Open Trove</Button>}\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { TroveManager } from \"./TroveManager\";\nimport { ReadOnlyTrove } from \"./ReadOnlyTrove\";\nimport { NoTrove } from \"./NoTrove\";\nimport { Opening } from \"./Opening\";\nimport { Adjusting } from \"./Adjusting\";\nimport { RedeemedTrove } from \"./RedeemedTrove\";\nimport { useTroveView } from \"./context/TroveViewContext\";\nimport { LiquidatedTrove } from \"./LiquidatedTrove\";\nimport { Decimal } from \"@fluidity/lib-base\";\n\nexport const Trove: React.FC = props => {\n  const { view } = useTroveView();\n\n  switch (view) {\n    // loading state not needed, as main app has a loading spinner that blocks render until the liquity backend data is available\n    case \"ACTIVE\": {\n      return <ReadOnlyTrove {...props} />;\n    }\n    case \"ADJUSTING\": {\n      return <Adjusting {...props} />;\n    }\n    case \"CLOSING\": {\n      return <TroveManager {...props} collateral={Decimal.ZERO} debt={Decimal.ZERO} />;\n    }\n    case \"OPENING\": {\n      return <Opening {...props} />;\n    }\n    case \"LIQUIDATED\": {\n      return <LiquidatedTrove {...props} />;\n    }\n    case \"REDEEMED\": {\n      return <RedeemedTrove {...props} />;\n    }\n    case \"NONE\": {\n      return <NoTrove {...props} />;\n    }\n  }\n};\n","import React from \"react\";\nimport { Flex, Card } from \"theme-ui\";\nimport { InfoIcon } from \"./InfoIcon\";\n\ntype StatisticProps = {\n  name: React.ReactNode;\n  tooltip?: React.ReactNode;\n};\n\nexport const Statistic: React.FC<StatisticProps> = ({ name, tooltip, children }) => {\n  return (\n    <Flex sx={{ my: \"10px\" }}>\n      <Flex sx={{ alignItems: \"center\", justifyContent: \"flex-start\", flex: 1.2, fontWeight: 200 }}>\n        <Flex>{name}</Flex>\n        {tooltip && <InfoIcon size=\"xs\" tooltip={<Card variant=\"tooltip\">{tooltip}</Card>} />}\n      </Flex>\n      <Flex sx={{ justifyContent: \"flex-end\", flex: 0.8, alignItems: \"center\" }}>{children}</Flex>\n    </Flex>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Card, Heading, Box, Text} from \"theme-ui\";\nimport { Decimal, Percent, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { COIN, GT } from \"../strings\";\nimport { Statistic } from \"./Statistic\";\n\nconst selectBalances = ({ accountBalance, lusdBalance, lqtyBalance }: LiquityStoreState) => ({\n    accountBalance,\n    lusdBalance,\n    lqtyBalance\n});\n\nconst Balances: React.FC = () => {\n    const { accountBalance, lusdBalance, lqtyBalance } = useLiquitySelector(selectBalances);\n\n    return (\n        <Box sx={{ mb: 3 }}>\n            <Heading>My Account Balances</Heading>\n            <Statistic name=\"AUT\"> {accountBalance.prettify(4)}</Statistic>\n            <Statistic name={COIN}> {lusdBalance.prettify()}</Statistic>\n            <Statistic name={GT}>{lqtyBalance.prettify()}</Statistic>\n        </Box>\n    );\n};\n\nconst selectPrice = ({ price }: LiquityStoreState) => price;\n\nconst PriceFeed: React.FC = () => {\n    const price = useLiquitySelector(selectPrice);\n\n    return (\n        <Box>\n            <Heading>Price feed</Heading>\n            <Statistic name=\"AUT\">${price.prettify()}</Statistic>\n        </Box>\n    );\n};\n\n// const GitHubCommit: React.FC<{ children?: string }> = ({ children }) =>\n//     children?.match(/[0-9a-f]{40}/) ? (\n//         <Link href={`https://github.com/goldmandao/fluidity/commit/${children}`}>{children.substr(0, 7)}</Link>\n//     ) : (\n//             <>unknown</>\n//         );\n\ntype ProtocolStatsProps = {\n    filterStats?: string[];\n}\n\nconst select = ({\n    numberOfTroves,\n    price,\n    total,\n    lusdInStabilityPool,\n    borrowingRate,\n    redemptionRate,\n    totalStakedLQTY,\n}: LiquityStoreState) => ({\n    numberOfTroves,\n    price,\n    total,\n    lusdInStabilityPool,\n    borrowingRate,\n    redemptionRate,\n    totalStakedLQTY,\n});\n\nconst ProtocolStats: React.FC<ProtocolStatsProps> = ({ filterStats }) => {\n\n    const {\n        numberOfTroves,\n        price,\n        lusdInStabilityPool,\n        total,\n        borrowingRate,\n        redemptionRate,\n        totalStakedLQTY,\n    } = useLiquitySelector(select);\n\n    const lusdInStabilityPoolPct =\n        total.debt.nonZero && new Percent(lusdInStabilityPool.div(total.debt));\n    const totalCollateralRatioPct = new Percent(total.collateralRatio(price));\n    const borrowingFeePct = new Percent(borrowingRate);\n    const redemptionFeePct = new Percent(redemptionRate);\n\n    const showStat = (statSection: string): boolean => {\n        return filterStats ? filterStats.includes(statSection) : true;\n    }\n\n    return (\n        <Box sx={{ mb: 3 }}>\n            <Heading>Liquity statistics</Heading>\n\n            {showStat(\"borrow-fee\") &&\n                <Statistic\n                    name=\"Borrowing Fee\"\n                    tooltip=\"The Borrowing Fee is a one-off fee charged as a percentage of the borrowed amount (in LUSD) and is part of a Trove's debt. The fee varies between 0.5% and 5% depending on LUSD redemption volumes.\"\n                >\n                    {borrowingFeePct.toString(2)}\n                </Statistic>\n            }\n            {showStat(\"redeem-fee\") &&\n                <Statistic\n                    name=\"Redemption Fee\"\n                    tooltip=\"The Redemption Fee is a one-off fee charged as a percentage of the redeemed amount (in AUT). The fee varies from 0.5% depending on LUSD redemption volumes.\"\n                >\n                    {redemptionFeePct.toString(2)}\n                </Statistic>\n            }\n            {showStat(\"tvl\") &&\n                <Statistic\n                    name=\"TVL\"\n                    tooltip=\"The Total Value Locked (TVL) is the total value of AUT locked as collateral in the system, given in AUT and USD.\"\n                >\n                    {total.collateral.shorten()} <Text sx={{ fontSize: 1 }}>&nbsp;AUT</Text>\n                    <Text sx={{ fontSize: 1 }}>\n                        &nbsp;(${Decimal.from(total.collateral.mul(price)).shorten()})\n                    </Text>\n                </Statistic>\n            }\n            {showStat(\"troves\") &&\n                <Statistic name=\"Troves\" tooltip=\"The total number of active Troves in the system.\">\n                    {Decimal.from(numberOfTroves).prettify(0)}\n                </Statistic>\n            }\n            {showStat(\"lusd-supply\") &&\n                <Statistic name=\"LUSD supply\" tooltip=\"The total LUSD minted by the Liquity Protocol.\">\n                    {total.debt.shorten()}\n                </Statistic>\n            }\n            {showStat(\"lusd-sp\") && lusdInStabilityPoolPct && (\n                <Statistic\n                    name=\"LUSD in Stability Pool\"\n                    tooltip=\"The total LUSD currently held in the Stability Pool, expressed as an amount and a fraction of the LUSD supply.\n        \"\n                >\n                    {lusdInStabilityPool.shorten()}\n                    <Text sx={{ fontSize: 1 }}>&nbsp;({lusdInStabilityPoolPct.toString(1)})</Text>\n                </Statistic>\n            )}\n            {showStat(\"staked-lqty\") &&\n                <Statistic\n                    name=\"Staked LQTY\"\n                    tooltip=\"The total amount of LQTY that is staked for earning fee revenue.\"\n                >\n                    {totalStakedLQTY.shorten()}\n                </Statistic>\n            }\n            {showStat(\"tcr\") &&\n                <Statistic\n                    name=\"Total Collateral Ratio\"\n                    tooltip=\"The ratio of the Dollar value of the entire system collateral at the current AUT:USD price, to the entire system debt.\"\n                >\n                    {totalCollateralRatioPct.prettify()}\n                </Statistic>\n            }\n            {showStat(\"recovery\") &&\n                <Statistic\n                    name=\"Recovery Mode\"\n                    tooltip=\"Recovery Mode is activated when the Total Collateral Ratio (TCR) falls below 150%. When active, your Trove can be liquidated if its collateral ratio is below the TCR. The maximum collateral you can lose from liquidation is capped at 110% of your Trove's debt. Operations are also restricted that would negatively impact the TCR.\"\n                >\n                    {total.collateralRatioIsBelowCritical(price) ? <Box color=\"danger\">Yes</Box> : \"No\"}\n                </Statistic>\n            }\n\n        </Box>\n    );\n};\n\ntype SystemStatsProps = {\n    variant?: string;\n    showBalances?: boolean;\n    showProtocol?: boolean;\n    showPriceFeed?: boolean;\n    filterStats?: string[];\n};\n\nexport const SystemStats: React.FC<SystemStatsProps> = (\n    { variant = \"info\", showBalances, showProtocol, showPriceFeed, filterStats }) => {\n\n    const [showStats, setShow] = useState(false);\n    /*\n    const {\n        liquity: {\n            connection: { version: contractsVersion, deploymentDate, frontendTag }\n        }\n    } = useLiquity();\n    */\n\n    const statSections = () => (\n        <>\n            {showBalances && <Balances />}\n            {showProtocol && <ProtocolStats filterStats={filterStats} />}\n            {showPriceFeed && <PriceFeed />}\n        </>\n    )\n\n    return (\n        <Card {...{ variant }}>\n            <Box\n                onClick={() => {setShow(!showStats)}}\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    color: \"accent\",\n                    cursor: \"pointer\",\n                    }}\n            >\n                <Text>Toggle Stats</Text>\n            </Box>\n            {showStats && statSections()}\n        </Card>\n    )\n}\n\n","import { Box, Card, Heading, Paragraph, Text } from \"theme-ui\";\n\nimport { InfoMessage } from \"../InfoMessage\";\nimport { Icon } from \"../Icon\";\n\ntype DisabledRedemptionProps = {\n  disabledDays: number;\n  unlockDate: Date;\n};\n\nexport const DisabledRedemption: React.FC<DisabledRedemptionProps> = ({\n  disabledDays,\n  unlockDate\n}) => (\n  <Card>\n    <Heading>Redeem</Heading>\n\n    <Box sx={{ p: [2, 3] }}>\n      <InfoMessage\n        title=\"Redemption is not enabled yet.\"\n        icon={\n          <Box sx={{ color: \"warning\" }}>\n            <Icon name=\"exclamation-triangle\" />\n          </Box>\n        }\n      >\n        <Paragraph>\n          LUSD redemption is disabled for the first {disabledDays} days after launch.\n        </Paragraph>\n\n        <Paragraph sx={{ mt: 3 }}>\n          It will be unlocked at{\" \"}\n          <Text sx={{ fontWeight: \"medium\" }}>{unlockDate.toLocaleString()}</Text>.\n        </Paragraph>\n      </InfoMessage>\n    </Box>\n  </Card>\n);\n","import { Button } from \"theme-ui\";\n\nimport { Decimal } from \"@fluidity/lib-base\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\ntype RedemptionActionProps = {\n  transactionId: string;\n  disabled?: boolean;\n  lusdAmount: Decimal;\n  maxRedemptionRate: Decimal;\n};\n\nexport const RedemptionAction: React.FC<RedemptionActionProps> = ({\n  transactionId,\n  disabled,\n  lusdAmount,\n  maxRedemptionRate\n}) => {\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    transactionId,\n    liquity.redeemLUSD.bind(liquity, lusdAmount, maxRedemptionRate)\n  );\n\n  return (\n    <Button disabled={disabled} onClick={sendTransaction}>\n      Confirm\n    </Button>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Box, Flex, Card, Heading } from \"theme-ui\";\n\nimport { Decimal, Percent, LiquityStoreState, MINIMUM_COLLATERAL_RATIO } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { RedemptionAction } from \"./RedemptionAction\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\n\nconst select = ({ price, fees, total, lusdBalance }: LiquityStoreState) => ({\n  price,\n  fees,\n  total,\n  lusdBalance\n});\n\nconst transactionId = \"redemption\";\n\nexport const RedemptionManager: React.FC = () => {\n  const { price, fees, total, lusdBalance } = useLiquitySelector(select);\n  const [lusdAmount, setLUSDAmount] = useState(Decimal.ZERO);\n  const [changePending, setChangePending] = useState(false);\n  const editingState = useState<string>();\n\n  const dirty = !lusdAmount.isZero;\n  const ethAmount = lusdAmount.div(price);\n  const redemptionRate = fees.redemptionRate(lusdAmount.div(total.debt));\n  const feePct = new Percent(redemptionRate);\n  const ethFee = ethAmount.mul(redemptionRate);\n  const maxRedemptionRate = redemptionRate.add(0.001); // TODO slippage tolerance\n\n  const myTransactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      setChangePending(true);\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      setChangePending(false);\n    } else if (myTransactionState.type === \"confirmed\") {\n      setLUSDAmount(Decimal.ZERO);\n      setChangePending(false);\n    }\n  }, [myTransactionState.type, setChangePending, setLUSDAmount]);\n\n  const [canRedeem, description] = total.collateralRatioIsBelowMinimum(price)\n    ? [\n        false,\n        <ErrorDescription>\n          You can't redeem LUSD when the total collateral ratio is less than{\" \"}\n          <Amount>{mcrPercent}</Amount>. Please try again later.\n        </ErrorDescription>\n      ]\n    : lusdAmount.gt(lusdBalance)\n    ? [\n        false,\n        <ErrorDescription>\n          The amount you're trying to redeem exceeds your balance by{\" \"}\n          <Amount>\n            {lusdAmount.sub(lusdBalance).prettify()} {COIN}\n          </Amount>\n          .\n        </ErrorDescription>\n      ]\n    : [\n        true,\n        <ActionDescription>\n          You will receive <Amount>{ethAmount.sub(ethFee).prettify(4)} AUT</Amount> in exchange for{\" \"}\n          <Amount>\n            {lusdAmount.prettify()} {COIN}\n          </Amount>\n          .\n        </ActionDescription>\n      ];\n\n  return (\n    <Card>\n      <Heading>\n        Redeem\n        {dirty && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setLUSDAmount(Decimal.ZERO)}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Redeem\"\n          inputId=\"redeem-lusd\"\n          amount={lusdAmount.prettify()}\n          maxAmount={lusdBalance.toString()}\n          maxedOut={lusdAmount.eq(lusdBalance)}\n          unit={COIN}\n          {...{ editingState }}\n          editedAmount={lusdAmount.toString(2)}\n          setEditedAmount={amount => setLUSDAmount(Decimal.from(amount))}\n        />\n\n        <StaticRow\n          label=\"Redemption Fee\"\n          inputId=\"redeem-fee\"\n          amount={ethFee.toString(4)}\n          pendingAmount={feePct.toString(2)}\n          unit=\"AUT\"\n          infoIcon={\n            <InfoIcon\n              tooltip={\n                <Card variant=\"tooltip\" sx={{ minWidth: \"240px\" }}>\n                  The Redemption Fee is charged as a percentage of the redeemed AUT. The Redemption\n                  Fee depends on LUSD redemption volumes and is 0.5% at minimum.\n                </Card>\n              }\n            />\n          }\n        />\n\n        {((dirty || !canRedeem) && description) || (\n          <ActionDescription>Enter the amount of {COIN} you'd like to redeem.</ActionDescription>\n        )}\n\n        <Flex variant=\"layout.actions\">\n          <RedemptionAction\n            transactionId={transactionId}\n            disabled={!dirty || !canRedeem}\n            lusdAmount={lusdAmount}\n            maxRedemptionRate={maxRedemptionRate}\n          />\n        </Flex>\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import { BlockPolledLiquityStoreState } from \"@fluidity/lib-ethers\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { DisabledRedemption } from \"./DisabledRedemption\";\nimport { RedemptionManager } from \"./RedemptionManager\";\n\nconst SECONDS_IN_ONE_DAY = 24 * 60 * 60;\n\nconst selectBlockTimestamp = ({ blockTimestamp }: BlockPolledLiquityStoreState) => blockTimestamp;\n\nexport const Redemption: React.FC = () => {\n  const {\n    liquity: {\n      connection: { deploymentDate, bootstrapPeriod }\n    }\n  } = useLiquity();\n\n  const blockTimestamp = useLiquitySelector(selectBlockTimestamp);\n\n  const bootstrapPeriodDays = Math.round(bootstrapPeriod / SECONDS_IN_ONE_DAY);\n  const deploymentTime = deploymentDate.getTime() / 1000;\n  const bootstrapEndTime = deploymentTime + bootstrapPeriod;\n  const bootstrapEndDate = new Date(bootstrapEndTime * 1000);\n  const redemptionDisabled = blockTimestamp < bootstrapEndTime;\n\n  if (redemptionDisabled) {\n    return <DisabledRedemption disabledDays={bootstrapPeriodDays} unlockDate={bootstrapEndDate} />;\n  }\n\n  return <RedemptionManager />;\n};\n","import { Container } from \"theme-ui\";\n\nimport { Trove } from \"../components/Trove/Trove\";\nimport { SystemStats } from \"../components/SystemStats\";\nimport { TopSystemStats } from \"../components/TopSystemStats\";\nimport { Redemption } from \"../components/Redemption/Redemption\";\n\nexport const Dashboard: React.FC = () => (\n  <Container variant=\"columns\">\n    <Container variant=\"single\">\n      <TopSystemStats filterStats={[\"tcr\", \"lusd-supply\", \"tvl\"]}/>\n      <Trove />\n      <Redemption />\n      <SystemStats showProtocol showPriceFeed/>\n    </Container>\n  </Container>\n);\n","import { Box, Flex, Heading, Paragraph } from \"theme-ui\";\n\nimport { shortenAddress } from \"../utils/shortenAddress\";\nimport { Icon } from \"../components/Icon\";\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nexport const UnregisteredFrontend: React.FC = () => {\n  const {\n    config: { frontendTag }\n  } = useLiquity();\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-around\",\n\n        m: 3,\n        p: 3,\n        maxWidth: \"500px\",\n\n        border: 1,\n        borderRadius: \"8px\",\n        borderColor: \"warning\",\n        boxShadow: 2\n      }}\n    >\n      <Flex sx={{ alignItems: \"center\", mx: 3, mb: 2 }}>\n        <Icon name=\"exclamation-triangle\" size=\"2x\" />\n        <Heading sx={{ ml: 3, fontSize: \"18px\" }}>Frontend not yet registered</Heading>\n      </Flex>\n\n      <Paragraph sx={{ fontSize: 2 }}>\n        If you're the operator of this frontend, please select <b>{shortenAddress(frontendTag)}</b>{\" \"}\n        in your wallet to proceed with the registration.\n      </Paragraph>\n    </Box>\n  );\n};\n","import { useState } from \"react\";\nimport { Card, Heading, Box, Flex, Input, Label, Paragraph, Button, Spinner } from \"theme-ui\";\n\nimport { Decimal } from \"@fluidity/lib-base\";\n\nimport { shortenAddress } from \"../utils/shortenAddress\";\nimport { useLiquity } from \"../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../components/Transaction\";\nimport { Icon } from \"../components/Icon\";\n\ntype FrontendRegistrationActionProps = {\n  kickbackRate: Decimal;\n};\n\nconst FrontendRegistrationAction: React.FC<FrontendRegistrationActionProps> = ({ kickbackRate }) => {\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const myTransactionId = \"register-frontend\";\n  const myTransactionState = useMyTransactionState(myTransactionId);\n\n  return myTransactionState.type === \"waitingForApproval\" ? (\n    <Button disabled>\n      <Spinner sx={{ mr: 2, color: \"white\" }} size=\"20px\" />\n      Waiting for your approval\n    </Button>\n  ) : myTransactionState.type !== \"waitingForConfirmation\" &&\n    myTransactionState.type !== \"confirmed\" ? (\n    <Transaction id={myTransactionId} send={liquity.registerFrontend.bind(liquity, kickbackRate)}>\n      <Button>Register</Button>\n    </Transaction>\n  ) : null;\n};\n\nexport const FrontendRegistration: React.FC = () => {\n  const { account } = useLiquity();\n\n  const [kickbackRate, setKickbackRate] = useState(Decimal.from(0.8));\n  const [cut, setCut] = useState(Decimal.from(0.2));\n  const [kickbackRateString, setKickbackRateString] = useState(\"80\");\n\n  return (\n    <>\n      <Card>\n        <Heading>Choose a kickback rate</Heading>\n\n        <Box sx={{ p: [2, 3] }}>\n          <Flex>\n            <Label>Kickback rate</Label>\n            <Label variant=\"unit\">%</Label>\n\n            <Input\n              sx={{ maxWidth: \"200px\" }}\n              type=\"number\"\n              step=\"any\"\n              value={kickbackRateString}\n              onChange={e => {\n                setKickbackRateString(e.target.value);\n                try {\n                  const newKickbackRate = Decimal.from(e.target.value || 0).div(100);\n                  const newCut = Decimal.ONE.sub(newKickbackRate);\n\n                  setKickbackRate(newKickbackRate);\n                  setCut(newCut);\n                } catch {}\n              }}\n              onBlur={() => {\n                setKickbackRateString(kickbackRate.mul(100).toString());\n              }}\n            />\n          </Flex>\n        </Box>\n      </Card>\n\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-around\",\n\n          m: 3,\n          mt: [3, null, 4],\n          mb: 4,\n          p: 3,\n          maxWidth: \"450px\",\n\n          border: 1,\n          borderRadius: \"8px\",\n          borderColor: \"danger\",\n          boxShadow: 2\n        }}\n      >\n        <Flex sx={{ alignItems: \"center\", mx: 3, fontSize: 4 }}>\n          <Icon name=\"hand-paper\" />\n          <Heading sx={{ ml: 3, fontSize: \"18px\" }}>Before you proceed</Heading>\n        </Flex>\n\n        <Paragraph sx={{ fontSize: 1, mt: 3 }}>\n          You are about to register <b>{account && shortenAddress(account)}</b> to receive{\" \"}\n          <b>{cut.mul(100).toString()}%</b> of the LQTY rewards earned through this frontend.\n        </Paragraph>\n\n        <Paragraph sx={{ fontSize: 1, mt: 3, fontWeight: \"bold\" }}>\n          You will not be able to change the kickback rate for this address later.\n        </Paragraph>\n\n        <Paragraph sx={{ fontSize: 1, mt: 3 }}>\n          If you'd like to use a different kickback rate in the future, you will need to repeat this\n          registration with a different address.\n        </Paragraph>\n      </Box>\n\n      <FrontendRegistrationAction {...{ kickbackRate }} />\n    </>\n  );\n};\n","import { Box, Flex, Heading, Paragraph, Button } from \"theme-ui\";\n\nimport { Icon } from \"../components/Icon\";\n\ntype FrontendRegistrationSuccessProps = {\n  onDismiss: () => void;\n};\n\nexport const FrontendRegistrationSuccess: React.FC<FrontendRegistrationSuccessProps> = ({\n  onDismiss\n}) => (\n  <>\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-around\",\n\n        m: 3,\n        mt: 4,\n        mb: 4,\n        p: 4,\n        maxWidth: \"500px\",\n\n        bg: \"rgba(40, 192, 129, 0.05)\",\n        color: \"success\",\n\n        border: 1,\n        borderRadius: \"8px\",\n        borderColor: \"success\",\n        boxShadow: 2\n      }}\n    >\n      <Flex sx={{ alignItems: \"center\", mx: 3, mb: 4, fontSize: 5 }}>\n        <Icon name=\"check\" />\n        <Heading sx={{ ml: 3, fontSize: 4 }}>Success!</Heading>\n      </Flex>\n\n      <Paragraph sx={{ fontSize: 2 }}>Your frontend is now ready to receive LQTY rewards.</Paragraph>\n    </Box>\n\n    <Button onClick={onDismiss}>Go to Dashboard</Button>\n  </>\n);\n","import { useEffect, useState } from \"react\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Dashboard } from \"./Dashboard\";\nimport { UnregisteredFrontend } from \"./UnregisteredFrontend\";\nimport { FrontendRegistration } from \"./FrontendRegistration\";\nimport { FrontendRegistrationSuccess } from \"./FrontendRegistrationSuccess\";\n\nconst selectFrontend = ({ frontend }: LiquityStoreState) => frontend;\n\nexport const PageSwitcher: React.FC = () => {\n  const {\n    account,\n    config: { frontendTag }\n  } = useLiquity();\n\n  const frontend = useLiquitySelector(selectFrontend);\n  const unregistered = frontendTag !== AddressZero && frontend.status === \"unregistered\";\n\n  const [registering, setRegistering] = useState(false);\n\n  useEffect(() => {\n    if (unregistered) {\n      setRegistering(true);\n    }\n  }, [unregistered]);\n\n  if (registering || unregistered) {\n    if (frontend.status === \"registered\") {\n      return <FrontendRegistrationSuccess onDismiss={() => setRegistering(false)} />;\n    } else if (account === frontendTag) {\n      return <FrontendRegistration />;\n    } else {\n      return <UnregisteredFrontend />;\n    }\n  } else {\n    return <Dashboard />;\n  }\n};\n","import { createContext, useContext } from \"react\";\nimport type { FarmView, FarmEvent } from \"./transitions\";\n\ntype FarmViewContextType = {\n  view: FarmView;\n  dispatchEvent: (event: FarmEvent) => void;\n};\n\nexport const FarmViewContext = createContext<FarmViewContextType | null>(null);\n\nexport const useFarmView = (): FarmViewContextType => {\n  const context: FarmViewContextType | null = useContext(FarmViewContext);\n\n  if (context === null) {\n    throw new Error(\"You must add a <FarmViewProvider> into the React tree\");\n  }\n\n  return context;\n};\n","import React from \"react\";\nimport { Flex } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nconst selector = ({ remainingLiquidityMiningLQTYReward }: LiquityStoreState) => ({\n  remainingLiquidityMiningLQTYReward\n});\n\nexport const RemainingLQTY: React.FC = () => {\n  const { remainingLiquidityMiningLQTYReward } = useLiquitySelector(selector);\n\n  return (\n    <Flex sx={{ mr: 2, fontSize: 2, fontWeight: \"medium\" }}>\n      {remainingLiquidityMiningLQTYReward.prettify(0)} LQTY remaining\n    </Flex>\n  );\n};\n","import { Decimal } from \"@fluidity/lib-base\";\n\ntype UniswapResponse = {\n  data?: {\n    bundle: {\n      ethPrice: string;\n    } | null;\n    token: {\n      derivedETH: string;\n    } | null;\n    pair: {\n      reserveUSD: string;\n      totalSupply: string;\n    } | null;\n  };\n  errors?: Array<{ message: string }>;\n};\n\nconst uniswapQuery = (lqtyTokenAddress: string, uniTokenAddress: string) => `{\n  token(id: \"${lqtyTokenAddress.toLowerCase()}\") {\n    derivedETH\n  },\n  bundle(id: 1) {\n    ethPrice\n  },\n  pair(id: \"${uniTokenAddress.toLowerCase()}\") {\n    totalSupply\n    reserveUSD\n  }\n}`;\n\nexport async function fetchPrices(lqtyTokenAddress: string, uniTokenAddress: string) {\n  const response = await window.fetch(\"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: uniswapQuery(lqtyTokenAddress, uniTokenAddress),\n      variables: null\n    })\n  });\n\n  if (!response.ok) {\n    return Promise.reject(\"Network error connecting to Uniswap subgraph\");\n  }\n\n  const { data, errors }: UniswapResponse = await response.json();\n\n  if (errors) {\n    return Promise.reject(errors);\n  }\n\n  if (\n    typeof data?.token?.derivedETH === \"string\" &&\n    typeof data?.pair?.reserveUSD === \"string\" &&\n    typeof data?.pair?.totalSupply === \"string\" &&\n    typeof data?.bundle?.ethPrice === \"string\"\n  ) {\n    const ethPriceUSD = Decimal.from(data.bundle.ethPrice);\n    const lqtyPriceUSD = Decimal.from(data.token.derivedETH).mul(ethPriceUSD);\n    const uniLpPriceUSD = Decimal.from(data.pair.reserveUSD).div(\n      Decimal.from(data.pair.totalSupply)\n    );\n\n    return { lqtyPriceUSD, uniLpPriceUSD };\n  }\n\n  return Promise.reject(\"Uniswap doesn't have the required data to calculate yield\");\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text, Badge } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { InfoIcon } from \"../../InfoIcon\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { fetchPrices } from \"../context/fetchPrices\";\n\nconst selector = ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n}: LiquityStoreState) => ({\n  remainingLiquidityMiningLQTYReward,\n  totalStakedUniTokens\n});\n\nexport const Yield: React.FC = () => {\n  const {\n    liquity: {\n      connection: { addresses, liquidityMiningLQTYRewardRate }\n    }\n  } = useLiquity();\n\n  const { remainingLiquidityMiningLQTYReward, totalStakedUniTokens } = useLiquitySelector(selector);\n  const [lqtyPrice, setLqtyPrice] = useState<Decimal | undefined>(undefined);\n  const [uniLpPrice, setUniLpPrice] = useState<Decimal | undefined>(undefined);\n  const hasZeroValue = remainingLiquidityMiningLQTYReward.isZero || totalStakedUniTokens.isZero;\n  const lqtyTokenAddress = addresses[\"lqtyToken\"];\n  const uniTokenAddress = addresses[\"uniToken\"];\n  const secondsRemaining = remainingLiquidityMiningLQTYReward.div(liquidityMiningLQTYRewardRate);\n  const daysRemaining = secondsRemaining.div(60 * 60 * 24);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { lqtyPriceUSD, uniLpPriceUSD } = await fetchPrices(lqtyTokenAddress, uniTokenAddress);\n        setLqtyPrice(lqtyPriceUSD);\n        setUniLpPrice(uniLpPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [lqtyTokenAddress, uniTokenAddress]);\n\n  if (hasZeroValue || lqtyPrice === undefined || uniLpPrice === undefined) return null;\n\n  const remainingLqtyInUSD = remainingLiquidityMiningLQTYReward.mul(lqtyPrice);\n  const totalStakedUniLpInUSD = totalStakedUniTokens.mul(uniLpPrice);\n  const yieldPercentage = remainingLqtyInUSD.div(totalStakedUniLpInUSD).mul(100);\n\n  if (yieldPercentage.isZero) return null;\n\n  return (\n    <Badge variant=\"muted\">\n      <Text>\n        {daysRemaining?.prettify(0)} day yield {yieldPercentage.toString(2)}%\n      </Text>\n      <InfoIcon\n        tooltip={\n          <Card variant=\"tooltip\" sx={{ minWidth: [\"auto\", \"352px\"] }}>\n            <Paragraph>\n              An <Text sx={{ fontWeight: \"bold\" }}>estimate</Text> of the LQTY return on staked UNI\n              LP tokens. The farm runs for 6-weeks, and the return is relative to the time remaining.\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\", mt: 2 }}>\n              ($LQTY_REWARDS / $STAKED_UNI_LP) * 100 ={\" \"}\n              <Text sx={{ fontWeight: \"bold\" }}> Yield</Text>\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\" }}>\n              ($\n              {remainingLqtyInUSD.shorten()} / ${totalStakedUniLpInUSD.shorten()}) * 100 =\n              <Text sx={{ fontWeight: \"bold\" }}> {yieldPercentage.toString(2)}%</Text>\n            </Paragraph>\n          </Card>\n        }\n      ></InfoIcon>\n    </Badge>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Flex, Button, Link, Paragraph } from \"theme-ui\";\nimport { useLiquity } from \"../../../../hooks/LiquityContext\";\nimport { Icon } from \"../../../Icon\";\nimport { InfoMessage } from \"../../../InfoMessage\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { RemainingLQTY } from \"../RemainingLQTY\";\nimport { Yield } from \"../Yield\";\n\nconst uniLink = (lusdAddress: string) => `https://app.uniswap.org/#/add/ETH/${lusdAddress}`;\n\nexport const Inactive: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n\n  const {\n    liquity: {\n      connection: { addresses }\n    }\n  } = useLiquity();\n\n  const handleStakePressed = useCallback(() => {\n    dispatchEvent(\"STAKE_PRESSED\");\n  }, [dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        <Flex sx={{ justifyContent: \"flex-end\" }}>\n          <RemainingLQTY />\n        </Flex>\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"You aren't farming LQTY.\">\n          <Paragraph>You can farm LQTY by staking your Uniswap AUT/LUSD LP tokens.</Paragraph>\n\n          <Paragraph sx={{ mt: 2 }}>\n            You can obtain LP tokens by adding liquidity to the{\" \"}\n            <Link href={uniLink(addresses[\"lusdToken\"])} target=\"_blank\">\n              AUT/LUSD pool on Uniswap. <Icon name=\"external-link-alt\" size=\"xs\" />\n            </Link>\n          </Paragraph>\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          <Flex sx={{ justifyContent: \"flex-start\", alignItems: \"center\", flex: 1 }}>\n            <Yield />\n          </Flex>\n          <Button onClick={handleStakePressed}>Stake</Button>\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nconst selector = ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n}: LiquityStoreState) => ({\n  uniTokenBalance,\n  uniTokenAllowance,\n  liquidityMiningStake\n});\n\ntype FarmStakeValidation = {\n  isValid: boolean;\n  hasApproved: boolean;\n  hasEnoughUniToken: boolean;\n  isWithdrawing: boolean;\n  amountChanged: Decimal;\n  maximumStake: Decimal;\n  hasSetMaximumStake: boolean;\n};\n\nexport const useValidationState = (amount: Decimal): FarmStakeValidation => {\n  const { uniTokenBalance, uniTokenAllowance, liquidityMiningStake } = useLiquitySelector(selector);\n  const isWithdrawing = liquidityMiningStake.gt(amount);\n  const amountChanged = isWithdrawing\n    ? liquidityMiningStake.sub(amount)\n    : Decimal.from(amount).sub(liquidityMiningStake);\n  const maximumStake = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumStake = amount.eq(maximumStake);\n\n  if (isWithdrawing) {\n    return {\n      isValid: true,\n      hasApproved: true,\n      hasEnoughUniToken: true,\n      isWithdrawing,\n      amountChanged,\n      maximumStake,\n      hasSetMaximumStake\n    };\n  }\n\n  const hasApproved = !uniTokenAllowance.isZero && uniTokenAllowance.gte(amountChanged);\n  const hasEnoughUniToken = !uniTokenBalance.isZero && uniTokenBalance.gte(amountChanged);\n\n  return {\n    isValid: hasApproved && hasEnoughUniToken,\n    hasApproved,\n    hasEnoughUniToken,\n    isWithdrawing,\n    amountChanged,\n    maximumStake,\n    hasSetMaximumStake\n  };\n};\n","import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { Decimal } from \"@fluidity/lib-base\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useValidationState } from \"../context/useValidationState\";\nimport { useFarmView } from \"../context/FarmViewContext\";\n\ntype ConfirmProps = {\n  amount: Decimal;\n};\n\nconst transactionId = \"farm-confirm\";\n\nexport const Confirm: React.FC<ConfirmProps> = ({ amount }) => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const transactionState = useMyTransactionState(transactionId);\n  const { isValid, isWithdrawing, amountChanged } = useValidationState(amount);\n\n  const transactionAction = isWithdrawing\n    ? liquity.unstakeUniTokens.bind(liquity, amountChanged)\n    : liquity.stakeUniTokens.bind(liquity, amountChanged);\n\n  const shouldDisable = amountChanged.isZero || !isValid;\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"STAKE_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={transactionAction}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button disabled={shouldDisable}>Confirm</Button>\n    </Transaction>\n  );\n};\n","import React from \"react\";\nimport { Text } from \"theme-ui\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { LP } from \"../../../strings\";\nimport { Transaction } from \"../../Transaction\";\nimport { Decimal } from \"@fluidity/lib-base\";\nimport { ActionDescription } from \"../../ActionDescription\";\nimport { useValidationState } from \"../context/useValidationState\";\n\ntype DescriptionProps = {\n  amount: Decimal;\n};\n\nconst transactionId = \"farm-stake\";\n\nexport const Description: React.FC<DescriptionProps> = ({ amount }) => {\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n  const { isValid, hasApproved, isWithdrawing, amountChanged } = useValidationState(amount);\n\n  if (!hasApproved) {\n    return (\n      <ActionDescription>\n        <Text>To stake your {LP} tokens you need to allow Liquity to stake them for you</Text>\n      </ActionDescription>\n    );\n  }\n\n  if (!isValid || amountChanged.isZero) {\n    return null;\n  }\n\n  return (\n    <ActionDescription>\n      {isWithdrawing && (\n        <Transaction id={transactionId} send={liquity.unstakeUniTokens.bind(liquity, amountChanged)}>\n          <Text>\n            You are unstaking {amountChanged.prettify(4)} {LP}\n          </Text>\n        </Transaction>\n      )}\n      {!isWithdrawing && (\n        <Transaction id={transactionId} send={liquity.stakeUniTokens.bind(liquity, amountChanged)}>\n          <Text>\n            You are staking {amountChanged.prettify(4)} {LP}\n          </Text>\n        </Transaction>\n      )}\n    </ActionDescription>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { Decimal } from \"@fluidity/lib-base\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useFarmView } from \"../context/FarmViewContext\";\nimport { useValidationState } from \"../context/useValidationState\";\n\ntype ApproveProps = {\n  amount: Decimal;\n};\n\nconst transactionId = \"farm-approve\";\n\nexport const Approve: React.FC<ApproveProps> = ({ amount }) => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const { hasApproved } = useValidationState(amount);\n  const transactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"STAKE_APPROVED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  if (hasApproved) {\n    return null;\n  }\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={liquity.approveUniTokens.bind(liquity, undefined)}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button sx={{ width: \"60%\" }}>Approve UNI LP</Button>\n    </Transaction>\n  );\n};\n","import React from \"react\";\nimport { Decimal } from \"@fluidity/lib-base\";\nimport { LP } from \"../../../strings\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\nimport { useValidationState } from \"../context/useValidationState\";\n\ntype ValidationProps = {\n  amount: Decimal;\n};\n\nexport const Validation: React.FC<ValidationProps> = ({ amount }) => {\n  const { isValid, hasApproved, hasEnoughUniToken } = useValidationState(amount);\n\n  if (isValid) {\n    return null;\n  }\n\n  if (!hasApproved) {\n    return <ErrorDescription>You haven't approved enough {LP}</ErrorDescription>;\n  }\n\n  if (!hasEnoughUniToken) {\n    return <ErrorDescription>You don't have enough {LP}</ErrorDescription>;\n  }\n\n  return null;\n};\n","import React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { LP } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\nimport { useValidationState } from \"../../context/useValidationState\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nconst transactionId = /farm-/;\nconst selector = ({ totalStakedUniTokens }: LiquityStoreState) => ({ totalStakedUniTokens });\n\nexport const Staking: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n  const { totalStakedUniTokens } = useLiquitySelector(selector);\n\n  const [amount, setAmount] = useState<Decimal>(Decimal.from(0));\n  const editingState = useState<string>();\n  const isDirty = !amount.isZero;\n\n  const { maximumStake, hasSetMaximumStake } = useValidationState(amount);\n\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n\n  const nextTotalStakedUniTokens = totalStakedUniTokens.add(amount);\n\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        {isDirty && !isTransactionPending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setAmount(Decimal.from(0))}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"amount-lp\"\n          amount={amount.prettify(4)}\n          unit={LP}\n          editingState={editingState}\n          editedAmount={amount.toString(4)}\n          setEditedAmount={amount => setAmount(Decimal.from(amount))}\n          maxAmount={maximumStake.toString()}\n          maxedOut={hasSetMaximumStake}\n        ></EditableRow>\n\n        {poolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"farm-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"farm-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n          />\n        )}\n\n        {isDirty && <Validation amount={amount} />}\n        <Description amount={amount} />\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n          <Approve amount={amount} />\n          <Confirm amount={amount} />\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport { Heading, Box, Flex, Card, Button } from \"theme-ui\";\nimport { Decimal, Difference, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { LP, GT } from \"../../../../strings\";\nimport { Icon } from \"../../../Icon\";\nimport { EditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { Confirm } from \"../Confirm\";\nimport { Description } from \"../Description\";\nimport { Approve } from \"../Approve\";\nimport { Validation } from \"../Validation\";\n\nconst selector = ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n}: LiquityStoreState) => ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  uniTokenBalance,\n  totalStakedUniTokens\n});\n\nconst transactionId = /farm-/;\n\nexport const Adjusting: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquidityMiningStake,\n    liquidityMiningLQTYReward,\n    uniTokenBalance,\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n  const [amount, setAmount] = useState<Decimal>(liquidityMiningStake);\n  const editingState = useState<string>();\n\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n  const isDirty = !amount.eq(liquidityMiningStake);\n  const maximumAmount = liquidityMiningStake.add(uniTokenBalance);\n  const hasSetMaximumAmount = amount.eq(maximumAmount);\n\n  const handleCancelPressed = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n\n  const nextTotalStakedUniTokens = isDirty\n    ? totalStakedUniTokens.sub(liquidityMiningStake).add(amount)\n    : totalStakedUniTokens;\n\n  const originalPoolShare = liquidityMiningStake.mulDiv(100, totalStakedUniTokens);\n  const poolShare = amount.mulDiv(100, nextTotalStakedUniTokens);\n\n  const poolShareChange =\n    liquidityMiningStake.nonZero && Difference.between(poolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        {isDirty && !isTransactionPending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => setAmount(liquidityMiningStake)}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"farm-stake-amount\"\n          amount={isDirty ? amount.prettify(4) : liquidityMiningStake.prettify(4)}\n          unit={LP}\n          editingState={editingState}\n          editedAmount={amount.toString(4)}\n          setEditedAmount={amount => setAmount(Decimal.from(amount))}\n          maxAmount={maximumAmount.toString()}\n          maxedOut={hasSetMaximumAmount}\n        ></EditableRow>\n\n        {poolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"farm-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"farm-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n          />\n        )}\n\n        <StaticRow\n          label=\"Reward\"\n          inputId=\"farm-reward-amount\"\n          amount={liquidityMiningLQTYReward.prettify(4)}\n          color={liquidityMiningLQTYReward.nonZero && \"success\"}\n          unit={GT}\n        />\n\n        {isDirty && <Validation amount={amount} />}\n        {isDirty && <Description amount={amount} />}\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"cancel\" onClick={handleCancelPressed}>\n            Cancel\n          </Button>\n          <Approve amount={amount} />\n          <Confirm amount={amount} />\n        </Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { useLiquity } from \"../../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../../Transaction\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\n\nconst transactionId = \"farm-claim-reward\";\n\nexport const ClaimReward: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const transactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"CLAIM_REWARD_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={liquity.withdrawLQTYRewardFromLiquidityMining.bind(liquity)}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button>Claim reward</Button>\n    </Transaction>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Button } from \"theme-ui\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { Transaction, useMyTransactionState } from \"../../Transaction\";\nimport { useFarmView } from \"../context/FarmViewContext\";\n\nconst transactionId = \"farm-unstake-and-claim\";\n\nexport const UnstakeAndClaim: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n\n  const {\n    liquity: { send: liquity }\n  } = useLiquity();\n\n  const transactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"UNSTAKE_AND_CLAIM_CONFIRMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Transaction\n      id={transactionId}\n      send={liquity.exitLiquidityMining.bind(liquity)}\n      showFailure=\"asTooltip\"\n      tooltipPlacement=\"bottom\"\n    >\n      <Button variant=\"outline\" sx={{ mt: 3, width: \"100%\" }}>\n        Unstake and claim reward\n      </Button>\n    </Transaction>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\nimport { LP, GT } from \"../../../../strings\";\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { Icon } from \"../../../Icon\";\nimport { LoadingOverlay } from \"../../../LoadingOverlay\";\nimport { useMyTransactionState } from \"../../../Transaction\";\nimport { DisabledEditableRow, StaticRow } from \"../../../Trove/Editor\";\nimport { useFarmView } from \"../../context/FarmViewContext\";\nimport { RemainingLQTY } from \"../RemainingLQTY\";\nimport { ClaimReward } from \"./ClaimReward\";\nimport { UnstakeAndClaim } from \"../UnstakeAndClaim\";\nimport { Yield } from \"../Yield\";\n\nconst selector = ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  totalStakedUniTokens\n}: LiquityStoreState) => ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward,\n  totalStakedUniTokens\n});\nconst transactionId = /farm-/i;\n\nexport const Active: React.FC = () => {\n  const { dispatchEvent } = useFarmView();\n  const {\n    liquidityMiningStake,\n    liquidityMiningLQTYReward,\n    totalStakedUniTokens\n  } = useLiquitySelector(selector);\n\n  const handleAdjustPressed = useCallback(() => {\n    dispatchEvent(\"ADJUST_PRESSED\");\n  }, [dispatchEvent]);\n\n  const transactionState = useMyTransactionState(transactionId);\n  const isTransactionPending =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  const poolShare = liquidityMiningStake.mulDiv(100, totalStakedUniTokens);\n  const hasStakeAndRewards = !liquidityMiningStake.isZero && !liquidityMiningLQTYReward.isZero;\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        {!isTransactionPending && (\n          <Flex sx={{ justifyContent: \"flex-end\" }}>\n            <RemainingLQTY />\n          </Flex>\n        )}\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <Box>\n          <DisabledEditableRow\n            label=\"Stake\"\n            inputId=\"farm-stake\"\n            amount={liquidityMiningStake.prettify(4)}\n            unit={LP}\n          />\n          {poolShare.infinite ? (\n            <StaticRow label=\"Pool share\" inputId=\"farm-share\" amount=\"N/A\" />\n          ) : (\n            <StaticRow\n              label=\"Pool share\"\n              inputId=\"farm-share\"\n              amount={poolShare.prettify(4)}\n              unit={\"%\"}\n            />\n          )}\n          <Flex sx={{ alignItems: \"center\" }}>\n            <StaticRow\n              label=\"Reward\"\n              inputId=\"farm-reward\"\n              amount={liquidityMiningLQTYReward.prettify(4)}\n              color={liquidityMiningLQTYReward.nonZero && \"success\"}\n              unit={GT}\n            />\n            <Flex sx={{ justifyContent: \"flex-end\", flex: 1 }}>\n              <Yield />\n            </Flex>\n          </Flex>\n        </Box>\n\n        <Flex variant=\"layout.actions\">\n          <Button\n            variant={!liquidityMiningLQTYReward.isZero ? \"outline\" : \"primary\"}\n            onClick={handleAdjustPressed}\n          >\n            <Icon name=\"pen\" size=\"sm\" />\n            &nbsp;Adjust\n          </Button>\n          {!liquidityMiningLQTYReward.isZero && <ClaimReward />}\n        </Flex>\n        <Flex>{hasStakeAndRewards && <UnstakeAndClaim />}</Flex>\n      </Box>\n      {isTransactionPending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Card, Heading, Box, Flex } from \"theme-ui\";\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { InfoMessage } from \"../../../InfoMessage\";\nimport { UnstakeAndClaim } from \"../UnstakeAndClaim\";\nimport { RemainingLQTY } from \"../RemainingLQTY\";\nimport { StaticRow } from \"../../../Trove/Editor\";\nimport { GT, LP } from \"../../../../strings\";\n\nconst selector = ({ liquidityMiningStake, liquidityMiningLQTYReward }: LiquityStoreState) => ({\n  liquidityMiningStake,\n  liquidityMiningLQTYReward\n});\n\nexport const Disabled: React.FC = () => {\n  const { liquidityMiningStake, liquidityMiningLQTYReward } = useLiquitySelector(selector);\n  const hasStake = !liquidityMiningStake.isZero;\n\n  return (\n    <Card>\n      <Heading>\n        Uniswap Liquidity Farm\n        <Flex sx={{ justifyContent: \"flex-end\" }}>\n          <RemainingLQTY />\n        </Flex>\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"Liquidity farming period has finished\">\n          <Flex>There are no more LQTY rewards left to farm</Flex>\n        </InfoMessage>\n        {hasStake && (\n          <>\n            <Box sx={{ border: 1, pt: 3, borderRadius: 3 }}>\n              <StaticRow\n                label=\"Stake\"\n                inputId=\"farm-deposit\"\n                amount={liquidityMiningStake.prettify(4)}\n                unit={LP}\n              />\n              <StaticRow\n                label=\"Reward\"\n                inputId=\"farm-reward\"\n                amount={liquidityMiningLQTYReward.prettify(4)}\n                color={liquidityMiningLQTYReward.nonZero && \"success\"}\n                unit={GT}\n              />\n            </Box>\n            <UnstakeAndClaim />\n          </>\n        )}\n      </Box>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Inactive } from \"./views/Inactive/Inactive\";\nimport { Staking } from \"./views/Staking/Staking\";\nimport { Adjusting } from \"./views/Adjusting/Adjusting\";\nimport { Active } from \"./views/Active/Active\";\nimport { Disabled } from \"./views/Disabled/Disabled\";\nimport { useFarmView } from \"./context/FarmViewContext\";\n\nexport const Farm: React.FC = props => {\n  const { view } = useFarmView();\n\n  switch (view) {\n    case \"INACTIVE\": {\n      return <Inactive {...props} />;\n    }\n    case \"STAKING\": {\n      return <Staking {...props} />;\n    }\n    case \"ADJUSTING\": {\n      return <Adjusting {...props} />;\n    }\n    case \"ACTIVE\": {\n      return <Active {...props} />;\n    }\n    case \"DISABLED\": {\n      return <Disabled {...props} />;\n    }\n  }\n};\n","import { createContext, useContext } from \"react\";\n\nexport type StakingView = \"ACTIVE\" | \"ADJUSTING\" | \"NONE\";\n\nexport type StakingViewAction = { type: \"startAdjusting\" | \"cancelAdjusting\" };\n\nexport type StakingViewContextType = {\n  view: StakingView;\n\n  // Indicates that a staking TX is pending.\n  // The panel should be covered with a spinner overlay when this is true.\n  changePending: boolean;\n\n  // Dispatch an action that changes the Staking panel's view.\n  dispatch: (action: StakingViewAction) => void;\n};\n\nexport const StakingViewContext = createContext<StakingViewContextType | null>(null);\n\nexport const useStakingView = (): StakingViewContextType => {\n  const context = useContext(StakingViewContext);\n\n  if (context === null) {\n    throw new Error(\"You must add a <TroveViewProvider> into the React tree\");\n  }\n\n  return context;\n};\n","import { Button } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\nconst selectLQTYStake = ({ lqtyStake }: LiquityStoreState) => lqtyStake;\n\nexport const StakingGainsAction: React.FC = () => {\n  const { liquity } = useLiquity();\n  const { collateralGain, lusdGain } = useLiquitySelector(selectLQTYStake);\n\n  const [sendTransaction] = useTransactionFunction(\n    \"stake\",\n    liquity.send.withdrawGainsFromStaking.bind(liquity.send)\n  );\n\n  return (\n    <Button onClick={sendTransaction} disabled={collateralGain.isZero && lusdGain.isZero}>\n      Claim gains\n    </Button>\n  );\n};\n","import { Heading, Box, Card, Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { DisabledEditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { Icon } from \"../Icon\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { StakingGainsAction } from \"./StakingGainsAction\";\n\nconst select = ({ lqtyStake, totalStakedLQTY }: LiquityStoreState) => ({\n  lqtyStake,\n  totalStakedLQTY\n});\n\nexport const ReadOnlyStake: React.FC = () => {\n  const { changePending, dispatch } = useStakingView();\n  const { lqtyStake, totalStakedLQTY } = useLiquitySelector(select);\n\n  const poolShare = lqtyStake.stakedLQTY.mulDiv(100, totalStakedLQTY);\n\n  return (\n    <Card>\n      <Heading>Staking</Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <DisabledEditableRow\n          label=\"Stake\"\n          inputId=\"stake-lqty\"\n          amount={lqtyStake.stakedLQTY.prettify()}\n          unit={GT}\n        />\n\n        <StaticRow\n          label=\"Pool share\"\n          inputId=\"stake-share\"\n          amount={poolShare.prettify(4)}\n          unit=\"%\"\n        />\n\n        <StaticRow\n          label=\"Redemption gain\"\n          inputId=\"stake-gain-eth\"\n          amount={lqtyStake.collateralGain.prettify(4)}\n          color={lqtyStake.collateralGain.nonZero && \"success\"}\n          unit=\"AUT\"\n        />\n\n        <StaticRow\n          label=\"Issuance gain\"\n          inputId=\"stake-gain-lusd\"\n          amount={lqtyStake.lusdGain.prettify()}\n          color={lqtyStake.lusdGain.nonZero && \"success\"}\n          unit={COIN}\n        />\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"outline\" onClick={() => dispatch({ type: \"startAdjusting\" })}>\n            <Icon name=\"pen\" size=\"sm\" />\n            &nbsp;Adjust\n          </Button>\n\n          <StakingGainsAction />\n        </Flex>\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\n\nimport { Decimal, Decimalish, Difference, LiquityStoreState, LQTYStake } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\n\nconst select = ({ lqtyBalance, totalStakedLQTY }: LiquityStoreState) => ({\n  lqtyBalance,\n  totalStakedLQTY\n});\n\ntype StakingEditorProps = {\n  title: string;\n  originalStake: LQTYStake;\n  editedLQTY: Decimal;\n  dispatch: (action: { type: \"setStake\"; newValue: Decimalish } | { type: \"revert\" }) => void;\n};\n\nexport const StakingEditor: React.FC<StakingEditorProps> = ({\n  children,\n  title,\n  originalStake,\n  editedLQTY,\n  dispatch\n}) => {\n  const { lqtyBalance, totalStakedLQTY } = useLiquitySelector(select);\n  const { changePending } = useStakingView();\n  const editingState = useState<string>();\n\n  const edited = !editedLQTY.eq(originalStake.stakedLQTY);\n\n  const maxAmount = originalStake.stakedLQTY.add(lqtyBalance);\n  const maxedOut = editedLQTY.eq(maxAmount);\n\n  const totalStakedLQTYAfterChange = totalStakedLQTY.sub(originalStake.stakedLQTY).add(editedLQTY);\n\n  const originalPoolShare = originalStake.stakedLQTY.mulDiv(100, totalStakedLQTY);\n  const newPoolShare = editedLQTY.mulDiv(100, totalStakedLQTYAfterChange);\n  const poolShareChange =\n    originalStake.stakedLQTY.nonZero && Difference.between(newPoolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        {title}\n        {edited && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => dispatch({ type: \"revert\" })}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Stake\"\n          inputId=\"stake-lqty\"\n          amount={editedLQTY.prettify()}\n          maxAmount={maxAmount.toString()}\n          maxedOut={maxedOut}\n          unit={GT}\n          {...{ editingState }}\n          editedAmount={editedLQTY.toString(2)}\n          setEditedAmount={newValue => dispatch({ type: \"setStake\", newValue })}\n        />\n\n        {newPoolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"stake-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"stake-share\"\n            amount={newPoolShare.prettify(4)}\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n            unit=\"%\"\n          />\n        )}\n\n        {!originalStake.isEmpty && (\n          <>\n            <StaticRow\n              label=\"Redemption gain\"\n              inputId=\"stake-gain-eth\"\n              amount={originalStake.collateralGain.prettify(4)}\n              color={originalStake.collateralGain.nonZero && \"success\"}\n              unit=\"AUT\"\n            />\n\n            <StaticRow\n              label=\"Issuance gain\"\n              inputId=\"stake-gain-lusd\"\n              amount={originalStake.lusdGain.prettify()}\n              color={originalStake.lusdGain.nonZero && \"success\"}\n              unit={COIN}\n            />\n          </>\n        )}\n\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import { Button } from \"theme-ui\";\n\nimport { Decimal, LQTYStakeChange } from \"@fluidity/lib-base\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\ntype StakingActionProps = {\n  change: LQTYStakeChange<Decimal>;\n};\n\nexport const StakingManagerAction: React.FC<StakingActionProps> = ({ change, children }) => {\n  const { liquity } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    \"stake\",\n    change.stakeLQTY\n      ? liquity.send.stakeLQTY.bind(liquity.send, change.stakeLQTY)\n      : liquity.send.unstakeLQTY.bind(liquity.send, change.unstakeLQTY)\n  );\n\n  return <Button onClick={sendTransaction}>{children}</Button>;\n};\n","import React from \"react\";\nimport { Button, Flex } from \"theme-ui\";\n\nimport {\n  Decimal,\n  Decimalish,\n  LiquityStoreState,\n  LQTYStake,\n  LQTYStakeChange\n} from \"@fluidity/lib-base\";\n\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { GT, COIN } from \"../../strings\";\n\nimport { useStakingView } from \"./context/StakingViewContext\";\nimport { StakingEditor } from \"./StakingEditor\";\nimport { StakingManagerAction } from \"./StakingManagerAction\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\nimport { ErrorDescription } from \"../ErrorDescription\";\n\nconst init = ({ lqtyStake }: LiquityStoreState) => ({\n  originalStake: lqtyStake,\n  editedLQTY: lqtyStake.stakedLQTY\n});\n\ntype StakeManagerState = ReturnType<typeof init>;\ntype StakeManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"revert\" }\n  | { type: \"setStake\"; newValue: Decimalish };\n\nconst reduce = (state: StakeManagerState, action: StakeManagerAction): StakeManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { originalStake, editedLQTY } = state;\n\n  switch (action.type) {\n    case \"setStake\":\n      return { ...state, editedLQTY: Decimal.from(action.newValue) };\n\n    case \"revert\":\n      return { ...state, editedLQTY: originalStake.stakedLQTY };\n\n    case \"updateStore\": {\n      const {\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        return {\n          originalStake: updatedStake,\n          editedLQTY: updatedStake.apply(originalStake.whatChanged(editedLQTY))\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nconst selectLQTYBalance = ({ lqtyBalance }: LiquityStoreState) => lqtyBalance;\n\ntype StakingManagerActionDescriptionProps = {\n  originalStake: LQTYStake;\n  change: LQTYStakeChange<Decimal>;\n};\n\nconst StakingManagerActionDescription: React.FC<StakingManagerActionDescriptionProps> = ({\n  originalStake,\n  change\n}) => {\n  const stakeLQTY = change.stakeLQTY?.prettify().concat(\" \", GT);\n  const unstakeLQTY = change.unstakeLQTY?.prettify().concat(\" \", GT);\n  const collateralGain = originalStake.collateralGain.nonZero?.prettify(4).concat(\" AUT\");\n  const lusdGain = originalStake.lusdGain.nonZero?.prettify().concat(\" \", COIN);\n\n  if (originalStake.isEmpty && stakeLQTY) {\n    return (\n      <ActionDescription>\n        You are staking <Amount>{stakeLQTY}</Amount>.\n      </ActionDescription>\n    );\n  }\n\n  return (\n    <ActionDescription>\n      {stakeLQTY && (\n        <>\n          You are adding <Amount>{stakeLQTY}</Amount> to your stake\n        </>\n      )}\n      {unstakeLQTY && (\n        <>\n          You are withdrawing <Amount>{unstakeLQTY}</Amount> to your wallet\n        </>\n      )}\n      {(collateralGain || lusdGain) && (\n        <>\n          {\" \"}\n          and claiming{\" \"}\n          {collateralGain && lusdGain ? (\n            <>\n              <Amount>{collateralGain}</Amount> and <Amount>{lusdGain}</Amount>\n            </>\n          ) : (\n            <>\n              <Amount>{collateralGain ?? lusdGain}</Amount>\n            </>\n          )}\n        </>\n      )}\n      .\n    </ActionDescription>\n  );\n};\n\nexport const StakingManager: React.FC = () => {\n  const { dispatch: dispatchStakingViewAction } = useStakingView();\n  const [{ originalStake, editedLQTY }, dispatch] = useLiquityReducer(reduce, init);\n  const lqtyBalance = useLiquitySelector(selectLQTYBalance);\n\n  const change = originalStake.whatChanged(editedLQTY);\n  const [validChange, description] = !change\n    ? [undefined, undefined]\n    : change.stakeLQTY?.gt(lqtyBalance)\n    ? [\n        undefined,\n        <ErrorDescription>\n          The amount you're trying to stake exceeds your balance by{\" \"}\n          <Amount>\n            {change.stakeLQTY.sub(lqtyBalance).prettify()} {GT}\n          </Amount>\n          .\n        </ErrorDescription>\n      ]\n    : [change, <StakingManagerActionDescription originalStake={originalStake} change={change} />];\n\n  const makingNewStake = originalStake.isEmpty;\n\n  return (\n    <StakingEditor title={\"Staking\"} {...{ originalStake, editedLQTY, dispatch }}>\n      {description ??\n        (makingNewStake ? (\n          <ActionDescription>Enter the amount of {GT} you'd like to stake.</ActionDescription>\n        ) : (\n          <ActionDescription>Adjust the {GT} amount to stake or withdraw.</ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button\n          variant=\"cancel\"\n          onClick={() => dispatchStakingViewAction({ type: \"cancelAdjusting\" })}\n        >\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <StakingManagerAction change={validChange}>Confirm</StakingManagerAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </StakingEditor>\n  );\n};\n","import { Card, Heading, Box, Flex, Button } from \"theme-ui\";\n\nimport { GT } from \"../../strings\";\n\nimport { InfoMessage } from \"../InfoMessage\";\nimport { useStakingView } from \"./context/StakingViewContext\";\n\nexport const NoStake: React.FC = () => {\n  const { dispatch } = useStakingView();\n\n  return (\n    <Card>\n      <Heading>Staking</Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title={`You haven't staked ${GT} yet.`}>\n          Stake {GT} to earn a share of borrowing and redemption fees.\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          <Button onClick={() => dispatch({ type: \"startAdjusting\" })}>Start staking</Button>\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import { useStakingView } from \"./context/StakingViewContext\";\nimport { ReadOnlyStake } from \"./ReadOnlyStake\";\nimport { StakingManager } from \"./StakingManager\";\nimport { NoStake } from \"./NoStake\";\n\nexport const Staking: React.FC = () => {\n  const { view } = useStakingView();\n\n  switch (view) {\n    case \"ACTIVE\":\n      return <ReadOnlyStake />;\n\n    case \"ADJUSTING\":\n      return <StakingManager />;\n\n    case \"NONE\":\n      return <NoStake />;\n  }\n};\n","import React, { useState } from \"react\";\nimport { Heading, Box, Card, Button } from \"theme-ui\";\n\nimport {\n  Decimal,\n  Decimalish,\n  StabilityDeposit,\n  LiquityStoreState,\n  Difference\n} from \"@fluidity/lib-base\";\n\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\n\nimport { Icon } from \"../Icon\";\nimport { EditableRow, StaticRow } from \"../Trove/Editor\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst select = ({ lusdBalance, lusdInStabilityPool }: LiquityStoreState) => ({\n  lusdBalance,\n  lusdInStabilityPool\n});\n\ntype StabilityDepositEditorProps = {\n  originalDeposit: StabilityDeposit;\n  editedLUSD: Decimal;\n  changePending: boolean;\n  dispatch: (action: { type: \"setDeposit\"; newValue: Decimalish } | { type: \"revert\" }) => void;\n};\n\nexport const StabilityDepositEditor: React.FC<StabilityDepositEditorProps> = ({\n  originalDeposit,\n  editedLUSD,\n  changePending,\n  dispatch,\n  children\n}) => {\n  const { lusdBalance, lusdInStabilityPool } = useLiquitySelector(select);\n  const editingState = useState<string>();\n\n  const edited = !editedLUSD.eq(originalDeposit.currentLUSD);\n\n  const maxAmount = originalDeposit.currentLUSD.add(lusdBalance);\n  const maxedOut = editedLUSD.eq(maxAmount);\n\n  const lusdInStabilityPoolAfterChange = lusdInStabilityPool\n    .sub(originalDeposit.currentLUSD)\n    .add(editedLUSD);\n\n  const originalPoolShare = originalDeposit.currentLUSD.mulDiv(100, lusdInStabilityPool);\n  const newPoolShare = editedLUSD.mulDiv(100, lusdInStabilityPoolAfterChange);\n  const poolShareChange =\n    originalDeposit.currentLUSD.nonZero &&\n    Difference.between(newPoolShare, originalPoolShare).nonZero;\n\n  return (\n    <Card>\n      <Heading>\n        Stability Pool\n        {edited && !changePending && (\n          <Button\n            variant=\"titleIcon\"\n            sx={{ \":enabled:hover\": { color: \"danger\" } }}\n            onClick={() => dispatch({ type: \"revert\" })}\n          >\n            <Icon name=\"history\" size=\"lg\" />\n          </Button>\n        )}\n      </Heading>\n\n      <Box sx={{ p: [2, 3] }}>\n        <EditableRow\n          label=\"Deposit\"\n          inputId=\"deposit-lqty\"\n          amount={editedLUSD.prettify()}\n          maxAmount={maxAmount.toString()}\n          maxedOut={maxedOut}\n          unit={COIN}\n          {...{ editingState }}\n          editedAmount={editedLUSD.toString(2)}\n          setEditedAmount={newValue => dispatch({ type: \"setDeposit\", newValue })}\n        />\n\n        {newPoolShare.infinite ? (\n          <StaticRow label=\"Pool share\" inputId=\"deposit-share\" amount=\"N/A\" />\n        ) : (\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"deposit-share\"\n            amount={newPoolShare.prettify(4)}\n            pendingAmount={poolShareChange?.prettify(4).concat(\"%\")}\n            pendingColor={poolShareChange?.positive ? \"success\" : \"danger\"}\n            unit=\"%\"\n          />\n        )}\n\n        {!originalDeposit.isEmpty && (\n          <>\n            <StaticRow\n              label=\"Liquidation gain\"\n              inputId=\"deposit-gain\"\n              amount={originalDeposit.collateralGain.prettify(4)}\n              color={originalDeposit.collateralGain.nonZero && \"success\"}\n              unit=\"AUT\"\n            />\n\n            <StaticRow\n              label=\"Reward\"\n              inputId=\"deposit-reward\"\n              amount={originalDeposit.lqtyReward.prettify()}\n              color={originalDeposit.lqtyReward.nonZero && \"success\"}\n              unit={GT}\n              infoIcon={\n                <InfoIcon\n                  tooltip={\n                    <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                      Although the LQTY rewards accrue every minute, the value on the UI only updates\n                      when a user transacts with the Stability Pool. Therefore you may receive more\n                      rewards than is displayed when you claim or adjust your deposit.\n                    </Card>\n                  }\n                />\n              }\n            />\n          </>\n        )}\n        {children}\n      </Box>\n\n      {changePending && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import { Button } from \"theme-ui\";\nimport { Decimal, LiquityStoreState, StabilityDepositChange } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../Transaction\";\n\ntype StabilityDepositActionProps = {\n  transactionId: string;\n  change: StabilityDepositChange<Decimal>;\n};\n\nconst selectFrontendRegistered = ({ frontend }: LiquityStoreState) =>\n  frontend.status === \"registered\";\n\nexport const StabilityDepositAction: React.FC<StabilityDepositActionProps> = ({\n  children,\n  transactionId,\n  change\n}) => {\n  const { config, liquity } = useLiquity();\n  const frontendRegistered = useLiquitySelector(selectFrontendRegistered);\n\n  const frontendTag = frontendRegistered ? config.frontendTag : undefined;\n\n  const [sendTransaction] = useTransactionFunction(\n    transactionId,\n    change.depositLUSD\n      ? liquity.send.depositLUSDInStabilityPool.bind(liquity.send, change.depositLUSD, frontendTag)\n      : liquity.send.withdrawLUSDFromStabilityPool.bind(liquity.send, change.withdrawLUSD)\n  );\n\n  return <Button onClick={sendTransaction}>{children}</Button>;\n};\n","import { createContext, useContext } from \"react\";\nimport type { StabilityView, StabilityEvent } from \"./types\";\n\ntype StabilityViewContextType = {\n  view: StabilityView;\n  dispatchEvent: (event: StabilityEvent) => void;\n};\n\nexport const StabilityViewContext = createContext<StabilityViewContextType | null>(null);\n\nexport const useStabilityView = (): StabilityViewContextType => {\n  const context: StabilityViewContextType | null = useContext(StabilityViewContext);\n\n  if (context === null) {\n    throw new Error(\"You must add a <StabilityViewProvider> into the React tree\");\n  }\n\n  return context;\n};\n","import React from \"react\";\n\nimport { Decimal, StabilityDeposit, StabilityDepositChange } from \"@fluidity/lib-base\";\n\nimport { COIN, GT } from \"../../strings\";\nimport { ActionDescription, Amount } from \"../ActionDescription\";\n\ntype StabilityActionDescriptionProps = {\n  originalDeposit: StabilityDeposit;\n  change: StabilityDepositChange<Decimal>;\n};\n\nexport const StabilityActionDescription: React.FC<StabilityActionDescriptionProps> = ({\n  originalDeposit,\n  change\n}) => {\n  const collateralGain = originalDeposit.collateralGain.nonZero?.prettify(4).concat(\" AUT\");\n  const lqtyReward = originalDeposit.lqtyReward.nonZero?.prettify().concat(\" \", GT);\n\n  return (\n    <ActionDescription>\n      {change.depositLUSD ? (\n        <>\n          You are depositing{\" \"}\n          <Amount>\n            {change.depositLUSD.prettify()} {COIN}\n          </Amount>{\" \"}\n          in the Stability Pool\n        </>\n      ) : (\n        <>\n          You are withdrawing{\" \"}\n          <Amount>\n            {change.withdrawLUSD.prettify()} {COIN}\n          </Amount>{\" \"}\n          to your wallet\n        </>\n      )}\n      {(collateralGain || lqtyReward) && (\n        <>\n          {\" \"}\n          and claiming at least{\" \"}\n          {collateralGain && lqtyReward ? (\n            <>\n              <Amount>{collateralGain}</Amount> and <Amount>{lqtyReward}</Amount>\n            </>\n          ) : (\n            <Amount>{collateralGain ?? lqtyReward}</Amount>\n          )}\n        </>\n      )}\n      .\n    </ActionDescription>\n  );\n};\n","import {\n  Decimal,\n  LiquityStoreState,\n  StabilityDeposit,\n  StabilityDepositChange\n} from \"@fluidity/lib-base\";\n\nimport { COIN } from \"../../../strings\";\nimport { Amount } from \"../../ActionDescription\";\nimport { ErrorDescription } from \"../../ErrorDescription\";\nimport { StabilityActionDescription } from \"../StabilityActionDescription\";\n\nexport const selectForStabilityDepositChangeValidation = ({\n  trove,\n  lusdBalance,\n  ownFrontend,\n  haveUndercollateralizedTroves\n}: LiquityStoreState) => ({\n  trove,\n  lusdBalance,\n  haveOwnFrontend: ownFrontend.status === \"registered\",\n  haveUndercollateralizedTroves\n});\n\ntype StabilityDepositChangeValidationContext = ReturnType<\n  typeof selectForStabilityDepositChangeValidation\n>;\n\nexport const validateStabilityDepositChange = (\n  originalDeposit: StabilityDeposit,\n  editedLUSD: Decimal,\n  {\n    lusdBalance,\n    haveOwnFrontend,\n    haveUndercollateralizedTroves\n  }: StabilityDepositChangeValidationContext\n): [\n  validChange: StabilityDepositChange<Decimal> | undefined,\n  description: JSX.Element | undefined\n] => {\n  const change = originalDeposit.whatChanged(editedLUSD);\n\n  if (haveOwnFrontend) {\n    return [\n      undefined,\n      <ErrorDescription>\n        You can’t deposit using a wallet address that is registered as a frontend.\n      </ErrorDescription>\n    ];\n  }\n\n  if (!change) {\n    return [undefined, undefined];\n  }\n\n  if (change.depositLUSD?.gt(lusdBalance)) {\n    return [\n      undefined,\n      <ErrorDescription>\n        The amount you're trying to deposit exceeds your balance by{\" \"}\n        <Amount>\n          {change.depositLUSD.sub(lusdBalance).prettify()} {COIN}\n        </Amount>\n        .\n      </ErrorDescription>\n    ];\n  }\n\n  if (change.withdrawLUSD && haveUndercollateralizedTroves) {\n    return [\n      undefined,\n      <ErrorDescription>\n        You're not allowed to withdraw LUSD from your Stability Deposit when there are\n        undercollateralized Troves. Please liquidate those Troves or try again later.\n      </ErrorDescription>\n    ];\n  }\n\n  return [change, <StabilityActionDescription originalDeposit={originalDeposit} change={change} />];\n};\n","import React, { useCallback, useEffect } from \"react\";\nimport { Button, Flex } from \"theme-ui\";\n\nimport { Decimal, Decimalish, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { LiquityStoreUpdate, useLiquityReducer, useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN } from \"../../strings\";\n\nimport { ActionDescription } from \"../ActionDescription\";\nimport { useMyTransactionState } from \"../Transaction\";\n\nimport { StabilityDepositEditor } from \"./StabilityDepositEditor\";\nimport { StabilityDepositAction } from \"./StabilityDepositAction\";\nimport { useStabilityView } from \"./context/StabilityViewContext\";\nimport {\n  selectForStabilityDepositChangeValidation,\n  validateStabilityDepositChange\n} from \"./validation/validateStabilityDepositChange\";\n\nconst init = ({ stabilityDeposit }: LiquityStoreState) => ({\n  originalDeposit: stabilityDeposit,\n  editedLUSD: stabilityDeposit.currentLUSD,\n  changePending: false\n});\n\ntype StabilityDepositManagerState = ReturnType<typeof init>;\ntype StabilityDepositManagerAction =\n  | LiquityStoreUpdate\n  | { type: \"startChange\" | \"finishChange\" | \"revert\" }\n  | { type: \"setDeposit\"; newValue: Decimalish };\n\nconst reduceWith = (action: StabilityDepositManagerAction) => (\n  state: StabilityDepositManagerState\n): StabilityDepositManagerState => reduce(state, action);\n\nconst finishChange = reduceWith({ type: \"finishChange\" });\nconst revert = reduceWith({ type: \"revert\" });\n\nconst reduce = (\n  state: StabilityDepositManagerState,\n  action: StabilityDepositManagerAction\n): StabilityDepositManagerState => {\n  // console.log(state);\n  // console.log(action);\n\n  const { originalDeposit, editedLUSD, changePending } = state;\n\n  switch (action.type) {\n    case \"startChange\": {\n      console.log(\"changeStarted\");\n      return { ...state, changePending: true };\n    }\n\n    case \"finishChange\":\n      return { ...state, changePending: false };\n\n    case \"setDeposit\":\n      return { ...state, editedLUSD: Decimal.from(action.newValue) };\n\n    case \"revert\":\n      return { ...state, editedLUSD: originalDeposit.currentLUSD };\n\n    case \"updateStore\": {\n      const {\n        stateChange: { stabilityDeposit: updatedDeposit }\n      } = action;\n\n      if (!updatedDeposit) {\n        return state;\n      }\n\n      const newState = { ...state, originalDeposit: updatedDeposit };\n\n      const changeCommitted =\n        !updatedDeposit.initialLUSD.eq(originalDeposit.initialLUSD) ||\n        updatedDeposit.currentLUSD.gt(originalDeposit.currentLUSD) ||\n        updatedDeposit.collateralGain.lt(originalDeposit.collateralGain) ||\n        updatedDeposit.lqtyReward.lt(originalDeposit.lqtyReward);\n\n      if (changePending && changeCommitted) {\n        return finishChange(revert(newState));\n      }\n\n      return {\n        ...newState,\n        editedLUSD: updatedDeposit.apply(originalDeposit.whatChanged(editedLUSD))\n      };\n    }\n  }\n};\n\nconst transactionId = \"stability-deposit\";\n\nexport const StabilityDepositManager: React.FC = () => {\n  const [{ originalDeposit, editedLUSD, changePending }, dispatch] = useLiquityReducer(reduce, init);\n  const validationContext = useLiquitySelector(selectForStabilityDepositChangeValidation);\n  const { dispatchEvent } = useStabilityView();\n\n  const handleCancel = useCallback(() => {\n    dispatchEvent(\"CANCEL_PRESSED\");\n  }, [dispatchEvent]);\n\n  const [validChange, description] = validateStabilityDepositChange(\n    originalDeposit,\n    editedLUSD,\n    validationContext\n  );\n\n  const makingNewDeposit = originalDeposit.isEmpty;\n\n  const myTransactionState = useMyTransactionState(transactionId);\n\n  useEffect(() => {\n    if (\n      myTransactionState.type === \"waitingForApproval\" ||\n      myTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (myTransactionState.type === \"failed\" || myTransactionState.type === \"cancelled\") {\n      dispatch({ type: \"finishChange\" });\n    } else if (myTransactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"DEPOSIT_CONFIRMED\");\n    }\n  }, [myTransactionState.type, dispatch, dispatchEvent]);\n\n  return (\n    <StabilityDepositEditor\n      originalDeposit={originalDeposit}\n      editedLUSD={editedLUSD}\n      changePending={changePending}\n      dispatch={dispatch}\n    >\n      {description ??\n        (makingNewDeposit ? (\n          <ActionDescription>Enter the amount of {COIN} you'd like to deposit.</ActionDescription>\n        ) : (\n          <ActionDescription>Adjust the {COIN} amount to deposit or withdraw.</ActionDescription>\n        ))}\n\n      <Flex variant=\"layout.actions\">\n        <Button variant=\"cancel\" onClick={handleCancel}>\n          Cancel\n        </Button>\n\n        {validChange ? (\n          <StabilityDepositAction transactionId={transactionId} change={validChange}>\n            Confirm\n          </StabilityDepositAction>\n        ) : (\n          <Button disabled>Confirm</Button>\n        )}\n      </Flex>\n    </StabilityDepositEditor>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"theme-ui\";\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../../Transaction\";\n\ntype ClaimAndMoveProps = {\n  disabled?: boolean;\n};\n\nexport const ClaimAndMove: React.FC<ClaimAndMoveProps> = ({ disabled, children }) => {\n  const { liquity } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    \"stability-deposit\",\n    liquity.send.transferCollateralGainToTrove.bind(liquity.send)\n  );\n\n  return (\n    <Button\n      variant=\"outline\"\n      sx={{ mt: 3, width: \"100%\" }}\n      onClick={sendTransaction}\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"theme-ui\";\n\nimport { useLiquity } from \"../../../hooks/LiquityContext\";\nimport { useTransactionFunction } from \"../../Transaction\";\n\ntype ClaimRewardsProps = {\n  disabled?: boolean;\n};\n\nexport const ClaimRewards: React.FC<ClaimRewardsProps> = ({ disabled, children }) => {\n  const { liquity } = useLiquity();\n\n  const [sendTransaction] = useTransactionFunction(\n    \"stability-deposit\",\n    liquity.send.withdrawGainsFromStabilityPool.bind(liquity.send)\n  );\n\n  return (\n    <Button onClick={sendTransaction} disabled={disabled}>\n      {children}\n    </Button>\n  );\n};\n","import React from \"react\";\nimport { Flex } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nconst selector = ({ remainingStabilityPoolLQTYReward }: LiquityStoreState) => ({\n  remainingStabilityPoolLQTYReward\n});\n\nexport const RemainingLQTY: React.FC = () => {\n  const { remainingStabilityPoolLQTYReward } = useLiquitySelector(selector);\n\n  return (\n    <Flex sx={{ mr: 2, fontSize: 2, fontWeight: \"medium\" }}>\n      {remainingStabilityPoolLQTYReward.prettify(0)} LQTY remaining\n    </Flex>\n  );\n};\n","import { Decimal } from \"@fluidity/lib-base\";\n\ntype CoinGeckoSimplePriceResponse<T extends string, U extends string> = {\n  [P in T]: {\n    [Q in U]: number;\n  };\n};\n\nconst hasProp = <T, P extends string>(o: T, p: P): o is T & { [_ in P]: unknown } => p in o;\n\nconst validateCoinGeckoSimplePriceResponse = <T extends string, U extends string>(\n  expectedCoinIds: readonly T[],\n  expectedCurrencies: readonly U[],\n  body: unknown\n): CoinGeckoSimplePriceResponse<T, U> => {\n  if (typeof body !== \"object\" || body === null) {\n    throw new Error(`unexpected response from CoinGecko`);\n  }\n\n  for (const coinId of expectedCoinIds) {\n    if (!hasProp(body, coinId)) {\n      throw new Error(`coin \"${coinId}\" missing from CoinGecko response`);\n    }\n\n    const coinPrices = body[coinId];\n\n    for (const currency of expectedCurrencies) {\n      if (!hasProp(coinPrices, currency)) {\n        throw new Error(`currency \"${currency}\" missing from CoinGecko response`);\n      }\n\n      if (typeof coinPrices[currency] !== \"number\") {\n        throw new Error(`price of coin \"${coinId}\" in currency \"${currency}\" is not a number`);\n      }\n    }\n  }\n\n  return body as CoinGeckoSimplePriceResponse<T, U>;\n};\n\nconst fetchCoinGeckoSimplePrice = async <T extends string, U extends string>(\n  coinIds: readonly T[],\n  vsCurrencies: readonly U[]\n): Promise<CoinGeckoSimplePriceResponse<T, U>> => {\n  const simplePriceUrl =\n    \"https://api.coingecko.com/api/v3/simple/price?\" +\n    new URLSearchParams({\n      ids: coinIds.join(\",\"),\n      vs_currencies: vsCurrencies.join(\",\")\n    });\n\n  const response = await window.fetch(simplePriceUrl, {\n    headers: {\n      accept: \"application/json\"\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`couldn't fetch price from CoinGecko: got status ${response.status}`);\n  }\n\n  return validateCoinGeckoSimplePriceResponse(coinIds, vsCurrencies, await response.json());\n};\n\nexport interface LqtyPriceResponse {\n  lqtyPriceUSD: Decimal;\n}\n\nexport const fetchLqtyPrice = async (): Promise<LqtyPriceResponse> => {\n  const response = await fetchCoinGeckoSimplePrice([\"liquity\"] as const, [\"usd\"] as const);\n\n  return {\n    lqtyPriceUSD: Decimal.from(response.liquity.usd)\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Card, Paragraph, Text, Badge } from \"theme-ui\";\nimport { Decimal, LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { InfoIcon } from \"../InfoIcon\";\nimport { fetchLqtyPrice } from \"./context/fetchLqtyPrice\";\n\nconst selector = ({ lusdInStabilityPool, remainingStabilityPoolLQTYReward }: LiquityStoreState) => ({\n  lusdInStabilityPool,\n  remainingStabilityPoolLQTYReward\n});\n\nconst yearlyIssuanceFraction = 0.5;\nconst dailyIssuanceFraction = Decimal.from(1 - yearlyIssuanceFraction ** (1 / 365));\nconst dailyIssuancePercentage = dailyIssuanceFraction.mul(100);\n\nexport const Yield: React.FC = () => {\n  const { lusdInStabilityPool, remainingStabilityPoolLQTYReward } = useLiquitySelector(selector);\n\n  const [lqtyPrice, setLqtyPrice] = useState<Decimal | undefined>(undefined);\n  const hasZeroValue = remainingStabilityPoolLQTYReward.isZero || lusdInStabilityPool.isZero;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { lqtyPriceUSD } = await fetchLqtyPrice();\n        setLqtyPrice(lqtyPriceUSD);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  if (hasZeroValue || lqtyPrice === undefined) return null;\n\n  const lqtyIssuanceOneDay = remainingStabilityPoolLQTYReward.mul(dailyIssuanceFraction);\n  const lqtyIssuanceOneDayInUSD = lqtyIssuanceOneDay.mul(lqtyPrice);\n  const aprPercentage = lqtyIssuanceOneDayInUSD.mulDiv(365 * 100, lusdInStabilityPool);\n  const remainingLqtyInUSD = remainingStabilityPoolLQTYReward.mul(lqtyPrice);\n\n  if (aprPercentage.isZero) return null;\n\n  return (\n    <Badge variant=\"muted\">\n      <Text>LQTY APR {aprPercentage.toString(2)}%</Text>\n      <InfoIcon\n        tooltip={\n          <Card variant=\"tooltip\" sx={{ width: [\"220px\", \"518px\"] }}>\n            <Paragraph>\n              An <Text sx={{ fontWeight: \"bold\" }}>estimate</Text> of the LQTY return on the LUSD\n              deposited to the Stability Pool over the next year, not including your AUT gains from\n              liquidations.\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\", mt: 2 }}>\n              ($LQTY_REWARDS * DAILY_ISSUANCE% / DEPOSITED_LUSD) * 365 * 100 ={\" \"}\n              <Text sx={{ fontWeight: \"bold\" }}> APR</Text>\n            </Paragraph>\n            <Paragraph sx={{ fontSize: \"12px\", fontFamily: \"monospace\" }}>\n              ($\n              {remainingLqtyInUSD.shorten()} * {dailyIssuancePercentage.toString(4)}% / $\n              {lusdInStabilityPool.shorten()}) * 365 * 100 =\n              <Text sx={{ fontWeight: \"bold\" }}> {aprPercentage.toString(2)}%</Text>\n            </Paragraph>\n          </Card>\n        }\n      ></InfoIcon>\n    </Badge>\n  );\n};\n","import React, { useCallback, useEffect } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\n\nimport { LiquityStoreState } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { COIN, GT } from \"../../strings\";\nimport { Icon } from \"../Icon\";\nimport { LoadingOverlay } from \"../LoadingOverlay\";\nimport { useMyTransactionState } from \"../Transaction\";\nimport { DisabledEditableRow, StaticRow } from \"../Trove/Editor\";\nimport { ClaimAndMove } from \"./actions/ClaimAndMove\";\nimport { ClaimRewards } from \"./actions/ClaimRewards\";\nimport { useStabilityView } from \"./context/StabilityViewContext\";\nimport { RemainingLQTY } from \"./RemainingLQTY\";\nimport { Yield } from \"./Yield\";\nimport { InfoIcon } from \"../InfoIcon\";\n\nconst selector = ({ stabilityDeposit, trove, lusdInStabilityPool }: LiquityStoreState) => ({\n  stabilityDeposit,\n  trove,\n  lusdInStabilityPool\n});\n\nexport const ActiveDeposit: React.FC = () => {\n  const { dispatchEvent } = useStabilityView();\n  const { stabilityDeposit, trove, lusdInStabilityPool } = useLiquitySelector(selector);\n\n  const poolShare = stabilityDeposit.currentLUSD.mulDiv(100, lusdInStabilityPool);\n\n  const handleAdjustDeposit = useCallback(() => {\n    dispatchEvent(\"ADJUST_DEPOSIT_PRESSED\");\n  }, [dispatchEvent]);\n\n  const hasReward = !stabilityDeposit.lqtyReward.isZero;\n  const hasGain = !stabilityDeposit.collateralGain.isZero;\n  const hasTrove = !trove.isEmpty;\n\n  const transactionId = \"stability-deposit\";\n  const transactionState = useMyTransactionState(transactionId);\n  const isWaitingForTransaction =\n    transactionState.type === \"waitingForApproval\" ||\n    transactionState.type === \"waitingForConfirmation\";\n\n  useEffect(() => {\n    if (transactionState.type === \"confirmedOneShot\") {\n      dispatchEvent(\"REWARDS_CLAIMED\");\n    }\n  }, [transactionState.type, dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>\n        Stability Pool\n        {!isWaitingForTransaction && (\n          <Flex sx={{ justifyContent: \"flex-end\" }}>\n            <RemainingLQTY />\n          </Flex>\n        )}\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <Box>\n          <DisabledEditableRow\n            label=\"Deposit\"\n            inputId=\"deposit-lusd\"\n            amount={stabilityDeposit.currentLUSD.prettify()}\n            unit={COIN}\n          />\n\n          <StaticRow\n            label=\"Pool share\"\n            inputId=\"deposit-share\"\n            amount={poolShare.prettify(4)}\n            unit=\"%\"\n          />\n\n          <StaticRow\n            label=\"Liquidation gain\"\n            inputId=\"deposit-gain\"\n            amount={stabilityDeposit.collateralGain.prettify(4)}\n            color={stabilityDeposit.collateralGain.nonZero && \"success\"}\n            unit=\"AUT\"\n          />\n\n          <Flex sx={{ alignItems: \"center\" }}>\n            <StaticRow\n              label=\"Reward\"\n              inputId=\"deposit-reward\"\n              amount={stabilityDeposit.lqtyReward.prettify()}\n              color={stabilityDeposit.lqtyReward.nonZero && \"success\"}\n              unit={GT}\n              infoIcon={\n                <InfoIcon\n                  tooltip={\n                    <Card variant=\"tooltip\" sx={{ width: \"240px\" }}>\n                      Although the LQTY rewards accrue every minute, the value on the UI only updates\n                      when a user transacts with the Stability Pool. Therefore you may receive more\n                      rewards than is displayed when you claim or adjust your deposit.\n                    </Card>\n                  }\n                />\n              }\n            />\n            <Flex sx={{ justifyContent: \"flex-end\", flex: 1 }}>\n              <Yield />\n            </Flex>\n          </Flex>\n        </Box>\n\n        <Flex variant=\"layout.actions\">\n          <Button variant=\"outline\" onClick={handleAdjustDeposit}>\n            <Icon name=\"pen\" size=\"sm\" />\n            &nbsp;Adjust\n          </Button>\n\n          <ClaimRewards disabled={!hasGain && !hasReward}>Claim AUT and LQTY</ClaimRewards>\n        </Flex>\n\n        {hasTrove && (\n          <ClaimAndMove disabled={!hasGain}>Claim LQTY and move AUT to Trove</ClaimAndMove>\n        )}\n      </Box>\n\n      {isWaitingForTransaction && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Card, Heading, Box, Flex, Button } from \"theme-ui\";\nimport { InfoMessage } from \"../InfoMessage\";\nimport { useStabilityView } from \"./context/StabilityViewContext\";\nimport { RemainingLQTY } from \"./RemainingLQTY\";\nimport { Yield } from \"./Yield\";\n\nexport const NoDeposit: React.FC = props => {\n  const { dispatchEvent } = useStabilityView();\n\n  const handleOpenTrove = useCallback(() => {\n    dispatchEvent(\"DEPOSIT_PRESSED\");\n  }, [dispatchEvent]);\n\n  return (\n    <Card>\n      <Heading>\n        Stability Pool\n        <Flex sx={{ justifyContent: \"flex-end\" }}>\n          <RemainingLQTY />\n        </Flex>\n      </Heading>\n      <Box sx={{ p: [2, 3] }}>\n        <InfoMessage title=\"You have no LUSD in the Stability Pool.\">\n          You can earn AUT and LQTY rewards by depositing LUSD.\n        </InfoMessage>\n\n        <Flex variant=\"layout.actions\">\n          <Flex sx={{ justifyContent: \"flex-start\", flex: 1, alignItems: \"center\" }}>\n            <Yield />\n          </Flex>\n          <Button onClick={handleOpenTrove}>Deposit</Button>\n        </Flex>\n      </Box>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { StabilityDepositManager } from \"./StabilityDepositManager\";\nimport { ActiveDeposit } from \"./ActiveDeposit\";\nimport { NoDeposit } from \"./NoDeposit\";\nimport { useStabilityView } from \"./context/StabilityViewContext\";\n\nexport const Stability: React.FC = props => {\n  const { view } = useStabilityView();\n\n  switch (view) {\n    case \"NONE\": {\n      return <NoDeposit {...props} />;\n    }\n    case \"DEPOSITING\": {\n      return <StabilityDepositManager {...props} />;\n    }\n    case \"ADJUSTING\": {\n      return <StabilityDepositManager {...props} />;\n    }\n    case \"ACTIVE\": {\n      return <ActiveDeposit {...props} />;\n    }\n  }\n};\n","import { Container } from \"theme-ui\";\nimport { SystemStats } from \"../components/SystemStats\";\nimport { Farm as FarmPanel } from \"../components/Farm/Farm\";\nimport { Staking } from \"../components/Staking/Staking\"; \nimport { TopSystemStats } from \"../components/TopSystemStats\";\nimport { Stability } from \"../components/Stability/Stability\";\n\nconst statsToShow: string[] = [\"tvl\", \"lusd-supply\", \"lusd-sp\", \"staked-lqty\", \"tcr\"]\n\nexport const Farm: React.FC = () => (\n  <Container variant=\"columns\" sx={{ justifyContent: \"flex-start\" }}>\n    <Container variant=\"single\">\n      <TopSystemStats filterStats={[\"lusd-sp\", \"staked-lqty\"]}/>\n      <Stability />\n      <Staking />\n      <FarmPanel />\n      <SystemStats showProtocol filterStats={statsToShow}/>\n    </Container>\n  </Container>\n);\n","import React, { useState } from \"react\";\nimport { Card, Box, Flex, Button, Label, Input } from \"theme-ui\";\n\nimport { useLiquity } from \"../hooks/LiquityContext\";\n\nimport { Transaction } from \"./Transaction\";\n\nexport const LiquidationManager: React.FC = () => {\n    const {\n        liquity: { send: liquity }\n    } = useLiquity();\n    const [numberOfTrovesToLiquidate, setNumberOfTrovesToLiquidate] = useState(\"90\");\n\n    return (\n        <Card sx={{mt: 0}}>\n            <Box sx={{ p: [2, 3] }}>\n                <Flex sx={{ alignItems: \"stretch\" }}>\n                    <Flex sx={{ ml: 2, alignItems: \"center\" }}>\n                        <Transaction\n                            id=\"batch-liquidate\"\n                            tooltip=\"Liquidate\"\n                            tooltipPlacement=\"bottom\"\n                            send={overrides => {\n                                if (!numberOfTrovesToLiquidate) {\n                                    throw new Error(\"Invalid number\");\n                                }\n                                return liquity.liquidateUpTo(parseInt(numberOfTrovesToLiquidate, 10), overrides);\n                            }}\n                        >\n                            <Button variant=\"danger\">\n                                Liquidate\n                            </Button>\n                        </Transaction>\n                        <Label>Up to</Label>\n                        <Input\n                            type=\"number\"\n                            min=\"1\"\n                            step=\"1\"\n                            value={numberOfTrovesToLiquidate}\n                            onChange={e => setNumberOfTrovesToLiquidate(e.target.value)}\n                        />\n                        <Label>Troves</Label>\n                    </Flex>\n                </Flex>\n            </Box>\n        </Card>\n    );\n};\n","import React from \"react\";\nimport { Box, BoxProps } from \"theme-ui\";\n\ntype AbbreviationProps = BoxProps & {\n  short: React.ReactNode;\n};\n\nexport const Abbreviation: React.FC<AbbreviationProps> = ({ children, short, ...boxProps }) => (\n  <Box as=\"span\" {...boxProps}>\n    <Box as=\"span\" sx={{ display: [\"none\", \"unset\"] }}>\n      {children}\n    </Box>\n\n    <Box as=\"span\" sx={{ display: [\"unset\", \"none\"] }}>\n      {short}\n    </Box>\n  </Box>\n);\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Card, Button, Text, Box, Heading, Flex } from \"theme-ui\";\n\nimport {\n  Percent,\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n  UserTrove,\n  Decimal\n} from \"@fluidity/lib-base\";\nimport { BlockPolledLiquityStoreState } from \"@fluidity/lib-ethers\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\n\nimport { shortenAddress } from \"../utils/shortenAddress\";\nimport { useLiquity } from \"../hooks/LiquityContext\";\nimport { COIN } from \"../strings\";\n\nimport { Icon } from \"./Icon\";\nimport { LoadingOverlay } from \"./LoadingOverlay\";\nimport { Transaction } from \"./Transaction\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Abbreviation } from \"./Abbreviation\";\n\nconst rowHeight = \"40px\";\n\nconst liquidatableInNormalMode = (trove: UserTrove, price: Decimal) =>\n  [trove.collateralRatioIsBelowMinimum(price), \"Collateral ratio not low enough\"] as const;\n\nconst liquidatableInRecoveryMode = (\n  trove: UserTrove,\n  price: Decimal,\n  totalCollateralRatio: Decimal,\n  lusdInStabilityPool: Decimal\n) => {\n  const collateralRatio = trove.collateralRatio(price);\n\n  if (collateralRatio.gte(MINIMUM_COLLATERAL_RATIO) && collateralRatio.lt(totalCollateralRatio)) {\n    return [\n      trove.debt.lte(lusdInStabilityPool),\n      \"There's not enough LUSD in the Stability pool to cover the debt\"\n    ] as const;\n  } else {\n    return liquidatableInNormalMode(trove, price);\n  }\n};\n\ntype RiskyTrovesProps = {\n  pageSize: number;\n};\n\nconst select = ({\n  numberOfTroves,\n  price,\n  total,\n  lusdInStabilityPool,\n  blockTag\n}: BlockPolledLiquityStoreState) => ({\n  numberOfTroves,\n  price,\n  recoveryMode: total.collateralRatioIsBelowCritical(price),\n  totalCollateralRatio: total.collateralRatio(price),\n  lusdInStabilityPool,\n  blockTag\n});\n\nexport const RiskyTroves: React.FC<RiskyTrovesProps> = ({ pageSize }) => {\n  const {\n    blockTag,\n    numberOfTroves,\n    recoveryMode,\n    totalCollateralRatio,\n    lusdInStabilityPool,\n    price\n  } = useLiquitySelector(select);\n  const { liquity } = useLiquity();\n\n  const [loading, setLoading] = useState(true);\n  const [troves, setTroves] = useState<UserTrove[]>();\n\n  const [reload, setReload] = useState({});\n  const forceReload = useCallback(() => setReload({}), []);\n\n  const [page, setPage] = useState(0);\n  const numberOfPages = Math.ceil(numberOfTroves / pageSize) || 1;\n  const clampedPage = Math.min(page, numberOfPages - 1);\n\n  const nextPage = () => {\n    if (clampedPage < numberOfPages - 1) {\n      setPage(clampedPage + 1);\n    }\n  };\n\n  const previousPage = () => {\n    if (clampedPage > 0) {\n      setPage(clampedPage - 1);\n    }\n  };\n\n  useEffect(() => {\n    if (page !== clampedPage) {\n      setPage(clampedPage);\n    }\n  }, [page, clampedPage]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    setLoading(true);\n\n    liquity\n      .getTroves(\n        {\n          first: pageSize,\n          sortedBy: \"ascendingCollateralRatio\",\n          startingAt: clampedPage * pageSize\n        },\n        { blockTag }\n      )\n      .then(troves => {\n        if (mounted) {\n          setTroves(troves);\n          setLoading(false);\n        }\n      });\n\n    return () => {\n      mounted = false;\n    };\n    // Omit blockTag from deps on purpose\n    // eslint-disable-next-line\n  }, [liquity, clampedPage, pageSize, reload]);\n\n  useEffect(() => {\n    forceReload();\n  }, [forceReload, numberOfTroves]);\n\n  const [copied, setCopied] = useState<string>();\n\n  useEffect(() => {\n    if (copied !== undefined) {\n      let cancelled = false;\n\n      setTimeout(() => {\n        if (!cancelled) {\n          setCopied(undefined);\n        }\n      }, 2000);\n\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [copied]);\n\n  return (\n    <Card sx={{ width: \"100%\" }}>\n      <Heading>\n        <Abbreviation short=\"Troves\">Risky Troves</Abbreviation>\n\n        <Flex sx={{ alignItems: \"center\" }}>\n          {numberOfTroves !== 0 && (\n            <>\n              <Abbreviation\n                short={`page ${clampedPage + 1} / ${numberOfPages}`}\n                sx={{ mr: [0, 3], fontWeight: \"body\", fontSize: [1, 2], letterSpacing: [-1, 0] }}\n              >\n                {clampedPage * pageSize + 1}-{Math.min((clampedPage + 1) * pageSize, numberOfTroves)}{\" \"}\n                of {numberOfTroves}\n              </Abbreviation>\n\n              <Button variant=\"titleIcon\" onClick={previousPage} disabled={clampedPage <= 0}>\n                <Icon name=\"chevron-left\" size=\"lg\" />\n              </Button>\n\n              <Button\n                variant=\"titleIcon\"\n                onClick={nextPage}\n                disabled={clampedPage >= numberOfPages - 1}\n              >\n                <Icon name=\"chevron-right\" size=\"lg\" />\n              </Button>\n            </>\n          )}\n\n          <Button\n            variant=\"titleIcon\"\n            sx={{ opacity: loading ? 0 : 1, ml: [0, 3] }}\n            onClick={forceReload}\n          >\n            <Icon name=\"redo\" size=\"lg\" />\n          </Button>\n        </Flex>\n      </Heading>\n\n      {!troves || troves.length === 0 ? (\n        <Box sx={{ p: [2, 3] }}>\n          <Box sx={{ p: 4, fontSize: 3, textAlign: \"center\" }}>\n            {!troves ? \"Loading...\" : \"There are no Troves yet\"}\n          </Box>\n        </Box>\n      ) : (\n        <Box sx={{ p: [2, 3] }}>\n          <Box\n            as=\"table\"\n            sx={{\n              mt: 2,\n              pl: [1, 4],\n              width: \"100%\",\n\n              textAlign: \"center\",\n              lineHeight: 1.15\n            }}\n          >\n            <colgroup>\n              <col style={{ width: \"50px\" }} />\n              <col />\n              <col />\n              <col />\n              <col style={{ width: rowHeight }} />\n            </colgroup>\n\n            <thead>\n              <tr>\n                <th>Owner</th>\n                <th>\n                  <Abbreviation short=\"Coll.\">Collateral</Abbreviation>\n                  <Box sx={{ fontSize: [0, 1], fontWeight: \"body\", opacity: 0.5 }}>AUT</Box>\n                </th>\n                <th>\n                  Debt\n                  <Box sx={{ fontSize: [0, 1], fontWeight: \"body\", opacity: 0.5 }}>{COIN}</Box>\n                </th>\n                <th>\n                  Coll.\n                  <br />\n                  Ratio\n                </th>\n                <th></th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {troves.map(\n                trove =>\n                  !trove.isEmpty && ( // making sure the Trove hasn't been liquidated\n                    // (TODO: remove check after we can fetch multiple Troves in one call)\n                    <tr key={trove.ownerAddress}>\n                      <td\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          height: rowHeight\n                        }}\n                      >\n                        <Tooltip message={trove.ownerAddress} placement=\"top\">\n                          <Text\n                            variant=\"address\"\n                            sx={{\n                              width: [\"73px\", \"unset\"],\n                              overflow: \"hidden\",\n                              position: \"relative\"\n                            }}\n                          >\n                            {shortenAddress(trove.ownerAddress)}\n                            <Box\n                              sx={{\n                                display: [\"block\", \"none\"],\n                                position: \"absolute\",\n                                top: 0,\n                                right: 0,\n                                width: \"50px\",\n                                height: \"100%\",\n                                background:\n                                  \"linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)\"\n                              }}\n                            />\n                          </Text>\n                        </Tooltip>\n\n                        <CopyToClipboard\n                          text={trove.ownerAddress}\n                          onCopy={() => setCopied(trove.ownerAddress)}\n                        >\n                          <Button variant=\"icon\" sx={{ width: \"24px\", height: \"24px\" }}>\n                            <Icon\n                              name={copied === trove.ownerAddress ? \"clipboard-check\" : \"clipboard\"}\n                              size=\"sm\"\n                            />\n                          </Button>\n                        </CopyToClipboard>\n                      </td>\n                      <td>\n                        <Abbreviation short={trove.collateral.shorten()}>\n                          {trove.collateral.prettify(4)}\n                        </Abbreviation>\n                      </td>\n                      <td>\n                        <Abbreviation short={trove.debt.shorten()}>\n                          {trove.debt.prettify()}\n                        </Abbreviation>\n                      </td>\n                      <td>\n                        {(collateralRatio => (\n                          <Text\n                            color={\n                              collateralRatio.gt(CRITICAL_COLLATERAL_RATIO)\n                                ? \"success\"\n                                : collateralRatio.gt(1.2)\n                                ? \"warning\"\n                                : \"danger\"\n                            }\n                          >\n                            {new Percent(collateralRatio).prettify()}\n                          </Text>\n                        ))(trove.collateralRatio(price))}\n                      </td>\n                      <td>\n                        <Transaction\n                          id={`liquidate-${trove.ownerAddress}`}\n                          tooltip=\"Liquidate\"\n                          requires={[\n                            recoveryMode\n                              ? liquidatableInRecoveryMode(\n                                  trove,\n                                  price,\n                                  totalCollateralRatio,\n                                  lusdInStabilityPool\n                                )\n                              : liquidatableInNormalMode(trove, price)\n                          ]}\n                          send={liquity.send.liquidate.bind(liquity.send, trove.ownerAddress)}\n                        >\n                          <Button variant=\"dangerIcon\">\n                            <Icon name=\"trash\" />\n                          </Button>\n                        </Transaction>\n                      </td>\n                    </tr>\n                  )\n              )}\n            </tbody>\n          </Box>\n        </Box>\n      )}\n\n      {loading && <LoadingOverlay />}\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Container, Flex, } from \"theme-ui\";\nimport { LiquidationManager } from \"../components/LiquidationManager\";\nimport { RiskyTroves } from \"../components/RiskyTroves\";\nimport { TopSystemStats } from \"../components/TopSystemStats\";\n\nexport const LiquidatePage: React.FC = () => (\n    <Container variant=\"columns\">\n        <TopSystemStats filterStats={[\"troves\", \"tcr\", \"lusd-sp\"]} />\n        <RiskyTroves pageSize={10} />\n        <Container sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-end\"\n        }}>\n            <Flex sx={{ width: [\"100%\", \"50%\"] }}>\n                <LiquidationManager />\n            </Flex>\n        </Container>\n    </Container>\n);\n","import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { LiquityStoreState, UserTroveStatus } from \"@fluidity/lib-base\";\nimport { TroveViewContext } from \"./TroveViewContext\";\nimport type { TroveView, TroveEvent } from \"./types\";\n\ntype TroveEventTransitions = Record<TroveView, Partial<Record<TroveEvent, TroveView>>>;\n\nconst transitions: TroveEventTransitions = {\n  NONE: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  LIQUIDATED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  REDEEMED: {\n    OPEN_TROVE_PRESSED: \"OPENING\",\n    TROVE_SURPLUS_COLLATERAL_CLAIMED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  OPENING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"NONE\",\n    TROVE_OPENED: \"ACTIVE\"\n  },\n  ADJUSTING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  CLOSING: {\n    CANCEL_ADJUST_TROVE_PRESSED: \"ACTIVE\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_ADJUSTED: \"ACTIVE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  },\n  ACTIVE: {\n    ADJUST_TROVE_PRESSED: \"ADJUSTING\",\n    CLOSE_TROVE_PRESSED: \"CLOSING\",\n    TROVE_CLOSED: \"NONE\",\n    TROVE_LIQUIDATED: \"LIQUIDATED\",\n    TROVE_REDEEMED: \"REDEEMED\"\n  }\n};\n\ntype TroveStateEvents = Partial<Record<UserTroveStatus, TroveEvent>>;\n\nconst troveStatusEvents: TroveStateEvents = {\n  open: \"TROVE_OPENED\",\n  closedByOwner: \"TROVE_CLOSED\",\n  closedByLiquidation: \"TROVE_LIQUIDATED\",\n  closedByRedemption: \"TROVE_REDEEMED\"\n};\n\nconst transition = (view: TroveView, event: TroveEvent): TroveView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (troveStatus: UserTroveStatus): TroveView => {\n  if (troveStatus === \"closedByLiquidation\") {\n    return \"LIQUIDATED\";\n  }\n  if (troveStatus === \"closedByRedemption\") {\n    return \"REDEEMED\";\n  }\n  if (troveStatus === \"open\") {\n    return \"ACTIVE\";\n  }\n  return \"NONE\";\n};\n\nconst select = ({ trove: { status } }: LiquityStoreState) => status;\n\nexport const TroveViewProvider: React.FC = props => {\n  const { children } = props;\n  const troveStatus = useLiquitySelector(select);\n\n  const [view, setView] = useState<TroveView>(getInitialView(troveStatus));\n  const viewRef = useRef<TroveView>(view);\n\n  const dispatchEvent = useCallback((event: TroveEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    const event = troveStatusEvents[troveStatus] ?? null;\n    if (event !== null) {\n      dispatchEvent(event);\n    }\n  }, [troveStatus, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n  return <TroveViewContext.Provider value={provider}>{children}</TroveViewContext.Provider>;\n};\n","import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { LiquityStoreState, StabilityDeposit } from \"@fluidity/lib-base\";\nimport { StabilityViewContext } from \"./StabilityViewContext\";\nimport type { StabilityView, StabilityEvent } from \"./types\";\n\ntype StabilityEventTransitions = Record<\n  StabilityView,\n  Partial<Record<StabilityEvent, StabilityView>>\n>;\n\nconst transitions: StabilityEventTransitions = {\n  NONE: {\n    DEPOSIT_PRESSED: \"DEPOSITING\"\n  },\n  DEPOSITING: {\n    CANCEL_PRESSED: \"NONE\",\n    DEPOSIT_CONFIRMED: \"ACTIVE\"\n  },\n  ACTIVE: {\n    REWARDS_CLAIMED: \"ACTIVE\",\n    ADJUST_DEPOSIT_PRESSED: \"ADJUSTING\",\n    DEPOSIT_EMPTIED: \"NONE\"\n  },\n  ADJUSTING: {\n    CANCEL_PRESSED: \"ACTIVE\",\n    DEPOSIT_CONFIRMED: \"ACTIVE\",\n    DEPOSIT_EMPTIED: \"NONE\"\n  }\n};\n\nconst transition = (view: StabilityView, event: StabilityEvent): StabilityView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (stabilityDeposit: StabilityDeposit): StabilityView => {\n  return stabilityDeposit.isEmpty ? \"NONE\" : \"ACTIVE\";\n};\n\nconst select = ({ stabilityDeposit }: LiquityStoreState): StabilityDeposit => stabilityDeposit;\n\nexport const StabilityViewProvider: React.FC = props => {\n  const { children } = props;\n  const stabilityDeposit = useLiquitySelector(select);\n\n  const [view, setView] = useState<StabilityView>(getInitialView(stabilityDeposit));\n  const viewRef = useRef<StabilityView>(view);\n\n  const dispatchEvent = useCallback((event: StabilityEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    if (stabilityDeposit.isEmpty) {\n      dispatchEvent(\"DEPOSIT_EMPTIED\");\n    }\n  }, [stabilityDeposit.isEmpty, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n\n  return <StabilityViewContext.Provider value={provider}>{children}</StabilityViewContext.Provider>;\n};\n","import { useEffect } from \"react\";\n\nimport { LiquityStoreState, LQTYStake } from \"@fluidity/lib-base\";\nimport { LiquityStoreUpdate, useLiquityReducer } from \"@fluidity/lib-react\";\n\nimport { useMyTransactionState } from \"../../Transaction\";\n\nimport { StakingViewAction, StakingViewContext } from \"./StakingViewContext\";\n\ntype StakingViewProviderAction =\n  | LiquityStoreUpdate\n  | StakingViewAction\n  | { type: \"startChange\" | \"abortChange\" };\n\ntype StakingViewProviderState = {\n  lqtyStake: LQTYStake;\n  changePending: boolean;\n  adjusting: boolean;\n};\n\nconst init = ({ lqtyStake }: LiquityStoreState): StakingViewProviderState => ({\n  lqtyStake,\n  changePending: false,\n  adjusting: false\n});\n\nconst reduce = (\n  state: StakingViewProviderState,\n  action: StakingViewProviderAction\n): StakingViewProviderState => {\n  // console.log(state);\n  // console.log(action);\n\n  switch (action.type) {\n    case \"startAdjusting\":\n      return { ...state, adjusting: true };\n\n    case \"cancelAdjusting\":\n      return { ...state, adjusting: false };\n\n    case \"startChange\":\n      return { ...state, changePending: true };\n\n    case \"abortChange\":\n      return { ...state, changePending: false };\n\n    case \"updateStore\": {\n      const {\n        oldState: { lqtyStake: oldStake },\n        stateChange: { lqtyStake: updatedStake }\n      } = action;\n\n      if (updatedStake) {\n        const changeCommitted =\n          !updatedStake.stakedLQTY.eq(oldStake.stakedLQTY) ||\n          updatedStake.collateralGain.lt(oldStake.collateralGain) ||\n          updatedStake.lusdGain.lt(oldStake.lusdGain);\n\n        return {\n          ...state,\n          lqtyStake: updatedStake,\n          adjusting: false,\n          changePending: changeCommitted ? false : state.changePending\n        };\n      }\n    }\n  }\n\n  return state;\n};\n\nexport const StakingViewProvider: React.FC = ({ children }) => {\n  const stakingTransactionState = useMyTransactionState(\"stake\");\n  const [{ adjusting, changePending, lqtyStake }, dispatch] = useLiquityReducer(reduce, init);\n\n  useEffect(() => {\n    if (\n      stakingTransactionState.type === \"waitingForApproval\" ||\n      stakingTransactionState.type === \"waitingForConfirmation\"\n    ) {\n      dispatch({ type: \"startChange\" });\n    } else if (\n      stakingTransactionState.type === \"failed\" ||\n      stakingTransactionState.type === \"cancelled\"\n    ) {\n      dispatch({ type: \"abortChange\" });\n    }\n  }, [stakingTransactionState.type, dispatch]);\n\n  return (\n    <StakingViewContext.Provider\n      value={{\n        view: adjusting ? \"ADJUSTING\" : lqtyStake.isEmpty ? \"NONE\" : \"ACTIVE\",\n        changePending,\n        dispatch\n      }}\n    >\n      {children}\n    </StakingViewContext.Provider>\n  );\n};\n","type InactiveView = \"INACTIVE\";\ntype StakingView = \"STAKING\";\ntype ActiveView = \"ACTIVE\";\ntype AdjustingView = \"ADJUSTING\";\ntype DisabledView = \"DISABLED\";\n\nexport type FarmView = InactiveView | StakingView | ActiveView | AdjustingView | DisabledView;\n\ntype StakePressedEvent = \"STAKE_PRESSED\";\ntype AdjustPressedEvent = \"ADJUST_PRESSED\";\ntype CancelPressedEvent = \"CANCEL_PRESSED\";\ntype StakeApprovedEvent = \"STAKE_APPROVED\";\ntype StakeConfirmedEvent = \"STAKE_CONFIRMED\";\ntype ClaimRewardConfirmedEvent = \"CLAIM_REWARD_CONFIRMED\";\ntype UnstakeConfirmedEvent = \"UNSTAKE_CONFIRMED\";\ntype UnstakeAndClaimConfirmedEvent = \"UNSTAKE_AND_CLAIM_CONFIRMED\";\n\nexport type FarmEvent =\n  | StakePressedEvent\n  | AdjustPressedEvent\n  | CancelPressedEvent\n  | StakeApprovedEvent\n  | StakeConfirmedEvent\n  | ClaimRewardConfirmedEvent\n  | UnstakeConfirmedEvent\n  | UnstakeAndClaimConfirmedEvent;\n\ntype FarmEventTransitions = Record<FarmView, Partial<Record<FarmEvent, FarmView>>>;\n\nexport const transitions: FarmEventTransitions = {\n  INACTIVE: {\n    STAKE_PRESSED: \"STAKING\"\n  },\n  STAKING: {\n    CANCEL_PRESSED: \"INACTIVE\",\n    STAKE_CONFIRMED: \"ACTIVE\",\n    STAKE_APPROVED: \"STAKING\"\n  },\n  ACTIVE: {\n    ADJUST_PRESSED: \"ADJUSTING\",\n    CLAIM_REWARD_CONFIRMED: \"ACTIVE\",\n    UNSTAKE_AND_CLAIM_CONFIRMED: \"INACTIVE\"\n  },\n  ADJUSTING: {\n    CANCEL_PRESSED: \"ACTIVE\",\n    STAKE_CONFIRMED: \"ACTIVE\",\n    STAKE_APPROVED: \"ADJUSTING\",\n    UNSTAKE_CONFIRMED: \"ACTIVE\"\n  },\n  DISABLED: {\n    CLAIM_REWARD_CONFIRMED: \"DISABLED\",\n    UNSTAKE_AND_CLAIM_CONFIRMED: \"DISABLED\"\n  }\n};\n","import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { LiquityStoreState, Decimal } from \"@fluidity/lib-base\";\nimport { useLiquitySelector } from \"@fluidity/lib-react\";\nimport { FarmViewContext } from \"./FarmViewContext\";\nimport { transitions } from \"./transitions\";\nimport type { FarmView, FarmEvent } from \"./transitions\";\n\nconst transition = (view: FarmView, event: FarmEvent): FarmView => {\n  const nextView = transitions[view][event] ?? view;\n  return nextView;\n};\n\nconst getInitialView = (\n  liquidityMiningStake: Decimal,\n  remainingLiquidityMiningLQTYReward: Decimal,\n  liquidityMiningLQTYReward: Decimal\n): FarmView => {\n  if (remainingLiquidityMiningLQTYReward.isZero) return \"DISABLED\";\n  if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) return \"INACTIVE\";\n  return \"ACTIVE\";\n};\n\nconst selector = ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n}: LiquityStoreState) => ({\n  liquidityMiningStake,\n  remainingLiquidityMiningLQTYReward,\n  liquidityMiningLQTYReward\n});\n\nexport const FarmViewProvider: React.FC = props => {\n  const { children } = props;\n  const {\n    liquidityMiningStake,\n    remainingLiquidityMiningLQTYReward,\n    liquidityMiningLQTYReward\n  } = useLiquitySelector(selector);\n\n  const [view, setView] = useState<FarmView>(\n    getInitialView(\n      liquidityMiningStake,\n      remainingLiquidityMiningLQTYReward,\n      liquidityMiningLQTYReward\n    )\n  );\n  const viewRef = useRef<FarmView>(view);\n\n  const dispatchEvent = useCallback((event: FarmEvent) => {\n    const nextView = transition(viewRef.current, event);\n\n    console.log(\n      \"dispatchEvent() [current-view, event, next-view]\",\n      viewRef.current,\n      event,\n      nextView\n    );\n    setView(nextView);\n  }, []);\n\n  useEffect(() => {\n    viewRef.current = view;\n  }, [view]);\n\n  useEffect(() => {\n    if (liquidityMiningStake.isZero && liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_AND_CLAIM_CONFIRMED\");\n    } else if (liquidityMiningStake.isZero && !liquidityMiningLQTYReward.isZero) {\n      dispatchEvent(\"UNSTAKE_CONFIRMED\");\n    }\n  }, [liquidityMiningStake.isZero, liquidityMiningLQTYReward.isZero, dispatchEvent]);\n\n  const provider = {\n    view,\n    dispatchEvent\n  };\n\n  return <FarmViewContext.Provider value={provider}>{children}</FarmViewContext.Provider>;\n};\n","import React from \"react\";\nimport { Flex, Container } from \"theme-ui\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Wallet } from \"@ethersproject/wallet\";\n\nimport { Decimal, Difference, Trove } from \"@fluidity/lib-base\";\nimport { LiquityStoreProvider } from \"@fluidity/lib-react\";\n\nimport { useLiquity } from \"./hooks/LiquityContext\";\nimport { TransactionMonitor } from \"./components/Transaction\";\nimport { Header } from \"./components/Header\";\n\nimport { PageSwitcher } from \"./pages/PageSwitcher\";\nimport { Farm } from \"./pages/Farm\";\nimport { LiquidatePage } from \"./pages/LiquidatePage\";\n\nimport { TroveViewProvider } from \"./components/Trove/context/TroveViewProvider\";\nimport { StabilityViewProvider } from \"./components/Stability/context/StabilityViewProvider\";\nimport { StakingViewProvider } from \"./components/Staking/context/StakingViewProvider\";\nimport { FarmViewProvider } from \"./components/Farm/context/FarmViewProvider\";\n\ntype LiquityFrontendProps = {\n  loader?: React.ReactNode;\n};\nexport const LiquityFrontend: React.FC<LiquityFrontendProps> = ({ loader }) => {\n  const { account, provider, liquity } = useLiquity();\n\n  // For console tinkering ;-)\n  Object.assign(window, {\n    account,\n    provider,\n    liquity,\n    Trove,\n    Decimal,\n    Difference,\n    Wallet\n  });\n\n  return (\n    <LiquityStoreProvider {...{ loader }} store={liquity.store}>\n      <Router>\n        <TroveViewProvider>\n          <StabilityViewProvider>\n            <StakingViewProvider>\n              <FarmViewProvider>\n                <Flex sx={{ flexDirection: \"column\", minHeight: \"100%\" }}>\n                  <Header/>\n\n                  <Container\n                    variant=\"main\"\n                    sx={{\n                      display: \"flex\",\n                      flexGrow: 1,\n                      flexDirection: \"column\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\"\n                    }}\n                  >\n                    <Switch>\n                      <Route path=\"/\" exact>\n                        <PageSwitcher />\n                      </Route>\n                      <Route path=\"/farm\">\n                        <Farm />\n                      </Route>\n                      <Route path=\"/liquidate\">\n                        <LiquidatePage />\n                      </Route>\n                    </Switch>\n                  </Container>\n                </Flex>\n              </FarmViewProvider>\n            </StakingViewProvider>\n          </StabilityViewProvider>\n        </TroveViewProvider>\n      </Router>\n      <TransactionMonitor />\n    </LiquityStoreProvider>\n  );\n};\n","import React from \"react\";\nimport { Web3ReactProvider, createWeb3ReactRoot } from \"@web3-react/core\";\nimport { Flex, Spinner, Heading, ThemeProvider, Paragraph, Link } from \"theme-ui\";\nimport Web3ReactManager from \"./components/Web3ReactManager\"\nimport { Global, css } from \"@emotion/react\";\nimport { LiquityProvider } from \"./hooks/LiquityContext\";\nimport { TransactionProvider } from \"./components/Transaction\";\nimport { Icon } from \"./components/Icon\";\nimport { getConfig } from \"./config\";\nimport theme from \"./theme\";\nimport { ethers } from 'ethers'\n\nimport { LiquityFrontend } from \"./LiquityFrontend\";\n\n\n// Start pre-fetching the config\ngetConfig().then(config => {\n  // console.log(\"Frontend config:\");\n  // console.log(config);\n  Object.assign(window, { config });\n});\n\nconst Web3ProviderNetwork = createWeb3ReactRoot('NETWORK')\n\nfunction getLibrary(provider: any) {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nconst UnsupportedMainnetFallback: React.FC = () => (\n  <Flex\n    sx={{\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      textAlign: \"center\"\n    }}\n  >\n    <Heading sx={{ mb: 3 }}>\n      <Icon name=\"exclamation-triangle\" /> This app is for testing purposes only.\n    </Heading>\n\n    <Paragraph sx={{ mb: 3 }}>\n      Please change your network to Ropsten, Rinkeby, Kovan, Görli or Kiln.\n    </Paragraph>\n\n    <Paragraph>\n      If you'd like to use the Liquity Protocol on mainnet, please pick a frontend{\" \"}\n      <Link href=\"https://www.liquity.org/frontend\">\n        here <Icon name=\"external-link-alt\" size=\"xs\" />\n      </Link>\n      .\n    </Paragraph>\n  </Flex>\n);\n\nconst App = () => {\n  const loader = (\n    <Flex sx={{ alignItems: \"center\", justifyContent: \"center\", height: \"100vh\" }}>\n      <Spinner sx={{ m: 2, color: \"text\" }} size=\"32px\" />\n      <Heading>Loading...</Heading>\n    </Flex>\n  );\n\n  const unsupportedNetworkFallback = (chainId: number) => (\n    <Flex\n      sx={{\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100vh\",\n        textAlign: \"center\"\n      }}\n    >\n      <Heading sx={{ mb: 3 }}>\n        <Icon name=\"exclamation-triangle\" /> Liquity is not yet deployed to{\" \"}\n        {chainId === 1 ? \"mainnet\" : \"this network\"}.\n      </Heading>\n      Please switch to Ropsten, Rinkeby, Kovan, Görli or Kiln.\n    </Flex>\n  );\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Web3ProviderNetwork getLibrary={getLibrary}>\n        <Web3ReactManager>\n          <ThemeProvider theme={theme}>\n          <Global\n          styles={css`\n          @font-face {\n            font-family: \"Visby CF\";\n            src: url(\"./fonts/VisbyCF-Regular.woff2\") format(\"woff2\");\n            font-style: normal;\n            font-weight: 400;\n          }\n          @font-face {\n            font-family: \"Visby CF\";\n            src: url(\"./fonts/VisbyCF-Heavy.woff2\") format(\"woff2\");\n            font-style: normal;\n            font-weight: 600;\n          }\n          `}\n        />\n              <LiquityProvider\n                loader={loader}\n                unsupportedNetworkFallback={unsupportedNetworkFallback}\n                unsupportedMainnetFallback={<UnsupportedMainnetFallback />}\n              >\n                <TransactionProvider>\n                  <LiquityFrontend loader={loader} />\n                </TransactionProvider>\n              </LiquityProvider>\n          </ThemeProvider>\n        </Web3ReactManager>\n      </Web3ProviderNetwork>\n    </Web3ReactProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}